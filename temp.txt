diff --git a/API/aes220_API.cpp b/API/aes220_API.cpp
index b18b446..18e3e09 100644
--- a/API/aes220_API.cpp
+++ b/API/aes220_API.cpp
@@ -37,12 +37,6 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 #define AES220_VID 0x2443
 #define AES220_PID 0x00DC
 
-#ifdef _WIN32
- #define DLLEXPORT extern "C" __declspec(dllexport)
-#else
- #define DLLEXPORT extern "C"
-#endif
-
 DLLEXPORT aes220_handle*  aes220_Open_Device(int vid, int pid, int idx, int vbs)
 {
   aes220_handle*  aes220_ptr = new aes220Dev;
diff --git a/API/aes220_API.h b/API/aes220_API.h
index 30abf35..eb327d7 100644
--- a/API/aes220_API.h
+++ b/API/aes220_API.h
@@ -34,6 +34,12 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 #include <stdlib.h>
 #include <stdint.h>
 
+#ifdef _WIN32
+#define DLLEXPORT extern "C" __declspec(dllexport)
+#else
+#define DLLEXPORT extern "C"
+#endif
+
 /* Enumeration: aes220API_errorCode
 
    API error codes.
@@ -59,371 +65,363 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
 
 // aes220Dev is an object defined in aes220Dev.h
-struct aes220Dev;
-typedef struct aes220Dev aes220_handle;
+DLLEXPORT struct aes220Dev;
+DLLEXPORT typedef struct aes220Dev aes220_handle;
 
-/* #ifdef __cplusplus */
-extern "C" {
-  /* #endif */
+/* Function: aes220_Open_Device(int vid, int pid, int idx, int vbs)
+   Returns a handle to an aes220 USB device. However it issimpler to use aes_Open (...) below.
 
-  /* Function: aes220_handle* aes220_Open_Device(int vid, int pid, int idx, int vbs)
-     Returns a handle to an aes220 USB device. However it issimpler to use aes_Open (...) below.
+   Parameters:
 
-     Parameters:
+   vid: the USB vendor ID of the device (0x2443)
 
-     vid: the USB vendor ID of the device (0x2443)
+   pid: the USB device ID (0x00DC)
 
-     pid: the USB device ID (0x00DC)
+   idx: the device identification number (0 if only one such device on bus)
 
-     idx: the device identification number (0 if only one such device on bus)
-
-     vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 
-     6 = mundane messages, 9 = everything)
-  */
-  aes220_handle* aes220_Open_Device(int vid, int pid, int idx, int vbs);
+   vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 
+   6 = mundane messages, 9 = everything)
+*/
+DLLEXPORT aes220_handle* aes220_Open_Device(int vid, int pid, int idx, int vbs);
 
-  /* Function: aes220_handle* aes220_Open(int idx, int vbs)
-     Returns a handle to an aes220 USB device.
+/* Function: aes220_Open(int idx, int vbs)
+   Returns a handle to an aes220 USB device.
 
-     Parameters:
+   Parameters:
 
-     idx: the device identification number (0 if only one such device on bus)
+   idx: the device identification number (0 if only one such device on bus)
 
-     vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 
-     6 = mundane messages, 9 = everything)
-  */
-  aes220_handle* aes220_Open(int idx, int vbs);
+   vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 
+   6 = mundane messages, 9 = everything)
+*/
+DLLEXPORT aes220_handle* aes220_Open(int idx, int vbs);
 
-  /* Function: void aes220_Close_Device(aes220_handle *aes220_ptr)
-     Closes the device pointed by the handle. Necessary before the handle goes out of scope or
-     communication with the device will be broken.
+/* Function: void aes220_Close_Device(aes220_handle *aes220_ptr)
+   Closes the device pointed by the handle. Necessary before the handle goes out of scope or
+   communication with the device will be broken.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: the handle to the device to be closed
-  */
-  void aes220_Close_Device(aes220_handle *aes220_ptr);
+   aes220_ptr: the handle to the device to be closed
+*/
+DLLEXPORT void aes220_Close_Device(aes220_handle *aes220_ptr);
   
-  /* Function: void aes220_Close(aes220_handle *aes220_ptr)
-     Closes the device pointed by the handle. Necessary before the handle goes out of scope or
-     communication with the device will be broken. Same as aes220_Close_Device(...), introduced for name consistancy with aes_Open(...)
+/* Function: void aes220_Close(aes220_handle *aes220_ptr)
+   Closes the device pointed by the handle. Necessary before the handle goes out of scope or
+   communication with the device will be broken. Same as aes220_Close_Device(...), introduced for name consistancy with aes_Open(...)
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: the handle to the device to be closed
-  */
-  void aes220_Close(aes220_handle *aes220_ptr);
+   aes220_ptr: the handle to the device to be closed
+*/
+DLLEXPORT void aes220_Close(aes220_handle *aes220_ptr);
   
-  /* Function:  int aes220_Pipe_Out(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)
-     Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device 
-     (aes220).
+/* Function: int aes220_Pipe_Out(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)
+   Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device 
+   (aes220).
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     buf_ptr: a pointer to a buffer of bytes.
+   buf_ptr: a pointer to a buffer of bytes.
+   N
+   bufSize: the size of the afore mentioned buffer (max size is 64KB)
 
-     bufSize: the size of the afore mentioned buffer (max size is 64KB)
+   channelAddress: the channel to communicate with in the FPGA application
 
-     channelAddress: the channel to communicate with in the FPGA application
+   Returns:
 
-     Returns:
-
-     Returns 0 on success.
-  */
-  int aes220_Pipe_Out(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint32_t bufSize, 
-		      uint8_t channelAddress);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Pipe_Out(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint32_t bufSize, 
+			      uint8_t channelAddress);
 
 
-  /* Function:  int aes220_Pipe_In(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)
-     Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).
+/* Function:  int aes220_Pipe_In(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)
+   Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     buf_ptr: a pointer to a buffer of bytes.
+   buf_ptr: a pointer to a buffer of bytes.
 
-     bufSize: the size of the afore mentioned buffer (max size is 64KB)
+   bufSize: the size of the afore mentioned buffer (max size is 64KB)
 
-     channelAddress: the channel to communicate with in the FPGA application
+   channelAddress: the channel to communicate with in the FPGA application
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Pipe_In(aes220_handle* aes220_ptr, uint8_t *bts_ptr, uint32_t bufSize, 
-		     uint8_t channelAddress);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Pipe_In(aes220_handle* aes220_ptr, uint8_t *bts_ptr, uint32_t bufSize, 
+			     uint8_t channelAddress);
 
 
-  /* Function:  int aes220_Assert_Soft_Reset(aes220_handle *aes220_ptr)
-     Send a reset signal to the FPGA. It is not a hard reset so the result depends on the code implememted in the FPGA.
+/* Function: int aes220_Assert_Soft_Reset(aes220_handle *aes220_ptr)
+   Send a reset signal to the FPGA. It is not a hard reset so the result depends on the code implememted in the FPGA.
 
-     Note: The USB interface provided does take account of the Soft Reset signal.
+   Note: The USB interface provided does take account of the Soft Reset signal.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Assert_Soft_Reset(aes220_handle* aes220_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Assert_Soft_Reset(aes220_handle* aes220_ptr);
 
 
-  /* Function:  int aes220_Clear_Soft_Reset(aes220_handle *aes220_ptr)
-     Clears the reset signal to the FPGA. It is not a hard reset so the result depends on the code implememted in the FPGA. 
+/* Function: int aes220_Clear_Soft_Reset(aes220_handle *aes220_ptr)
+   Clears the reset signal to the FPGA. It is not a hard reset so the result depends on the code implememted in the FPGA. 
 
-     Note: The USB interface provided does take account of the Soft Reset signal.
+   Note: The USB interface provided does take account of the Soft Reset signal.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Clear_Soft_Reset(aes220_handle* aes220_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Clear_Soft_Reset(aes220_handle* aes220_ptr);
 
-  /* Function:  int aes220_Turn3V3On(aes220_handle *aes220_ptr)
-     Turns ON the 3.3V power supply to the banks and FPGA I/Os
+/* Function: int aes220_Turn3V3On(aes220_handle *aes220_ptr)
+   Turns ON the 3.3V power supply to the banks and FPGA I/Os
 
-     Note: 3.3V is turned ON by default but can also be turned OFF using aes220_Turn3V3Off (see below)
+   Note: 3.3V is turned ON by default but can also be turned OFF using aes220_Turn3V3Off (see below)
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Turn3V3On(aes220_handle* aes220_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Turn3V3On(aes220_handle* aes220_ptr);
 
-  /* Function:  int aes220_Turn3V3Off(aes220_handle *aes220_ptr)
-     Turns ON the 3.3V power supply to the banks and FPGA I/Os
+/* Function: int aes220_Turn3V3Off(aes220_handle *aes220_ptr)
+   Turns ON the 3.3V power supply to the banks and FPGA I/Os
 
-     Note: 3.3V is turned ON by default but it can be necessary to turn it OFF if using an external 3.3V supply (if more current is required than can be provided on-board) or if stacking up two or more boards together.
+   Note: 3.3V is turned ON by default but it can be necessary to turn it OFF if using an external 3.3V supply (if more current is required than can be provided on-board) or if stacking up two or more boards together.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Turn3V3Off(aes220_handle* aes220_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Turn3V3Off(aes220_handle* aes220_ptr);
 
-  /* Function:  int aes220_ReadI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)
-     Reads data from an I2C device
+/* Function: int aes220_ReadI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)
+   Reads data from an I2C device
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     deviceAddress: the address of the device on the I2C bus
+   deviceAddress: the address of the device on the I2C bus
 
-     data: a data array (pointer to)
+   data: a data array (pointer to)
 
-     dataLength: the length of the data (max length 64KB)
+   dataLength: the length of the data (max length 64KB)
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_ReadI2C(aes220_handle* aes220_ptr, uint8_t deviceAddress, uint8_t *data,
-		     uint16_t dataLength);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_ReadI2C(aes220_handle* aes220_ptr, uint8_t deviceAddress, uint8_t *data,
+			     uint16_t dataLength);
 
-  /* Function:  int aes220_WriteI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)
-     Writes data from an I2C device
+/* Function: int aes220_WriteI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)
+   Writes data from an I2C device
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     deviceAddress: the address of the device on the I2C bus
+   deviceAddress: the address of the device on the I2C bus
 
-     data: a data array (pointer to)
+   data: a data array (pointer to)
 
-     dataLength: the length of the data (max length 64KB)
+   dataLength: the length of the data (max length 64KB)
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_WriteI2C(aes220_handle* aes220_ptr, uint8_t deviceAddress, uint8_t *data,
-		      uint16_t dataLength);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_WriteI2C(aes220_handle* aes220_ptr, uint8_t deviceAddress, uint8_t *data,
+			      uint16_t dataLength);
 
-  /* Function:  int aes220_CombinedI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *dataToWrite, uint16_t dataToWriteLength, uint8_t *dataToRead, uint16_t dataToReadLength)
-     Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between. 
+/* Function: int aes220_CombinedI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *dataToWrite, uint16_t dataToWriteLength, uint8_t *dataToRead, uint16_t dataToReadLength)
+   Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between. 
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     deviceAddress: the address of the device on the I2C bus
+   deviceAddress: the address of the device on the I2C bus
 
-     dataToWrite: a data array (pointer to)
+   dataToWrite: a data array (pointer to)
 
-     dataToWriteLength: the length of the data to write (max length 64KB)
+   dataToWriteLength: the length of the data to write (max length 64KB)
 
-     dataToRead: a data array (pointer to)
+   dataToRead: a data array (pointer to)
 
-     dataToReadLength: the length of the data to write (max length 64KB)
+   dataToReadLength: the length of the data to write (max length 64KB)
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_CombinedI2C(aes220_handle* aes220_ptr, uint8_t deviceAddress,
-			 uint8_t *dataToWrite, uint16_t dataToWriteLength,
-			 uint8_t *dataToRead, uint16_t dataToReadLength);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_CombinedI2C(aes220_handle* aes220_ptr, uint8_t deviceAddress,
+				 uint8_t *dataToWrite, uint16_t dataToWriteLength,
+				 uint8_t *dataToRead, uint16_t dataToReadLength);
 
-  /* Function:  int aes220_Set_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)
-     Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. This should be left alone unless the micro-controller EEPROM is erased and needs reprogramming.
+/* Function: int aes220_Set_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)
+   Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. This should be left alone unless the micro-controller EEPROM is erased and needs reprogramming.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     boardInfo: an array of 8 unsigned char. Bytes: 3.3V ON/OFF(1), a/b, A, 1, SN, dd, mm, yyyy
+   boardInfo: an array of 8 unsigned char. Bytes: 3.3V ON/OFF(1), a/b, A, 1, SN, dd, mm, yyyy
 
-     Note: Do not use this function to turn the 3.3V ON or OFF, use the aes220_Turn3V3ON/OFF functions
+   Note: Do not use this function to turn the 3.3V ON or OFF, use the aes220_Turn3V3ON/OFF functions
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Set_Board_Info(aes220_handle* aes220_ptr, const uint8_t *boardInfo);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Set_Board_Info(aes220_handle* aes220_ptr, const uint8_t *boardInfo);
 
-  /* Function:  int aes220_Get_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)
-     Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.
+/* Function: int aes220_Get_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)
+   Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     boardInfo: an array of 8 unsigned char. Bytes: 3.3V ON/OFF, a/b, A, 1, SN, dd, mm, yyyy
+   boardInfo: an array of 8 unsigned char. Bytes: 3.3V ON/OFF, a/b, A, 1, SN, dd, mm, yyyy
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Get_Board_Info(aes220_handle* aes220_ptr, const uint8_t * boardInfo);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Get_Board_Info(aes220_handle* aes220_ptr, const uint8_t * boardInfo);
 
-  /* Function:  int aes220_Get_Firmware_Info(aes220_handle *aes220_ptr, const uint8_t *firmwareInfo)
-     Reads the software version written into the code.
+/* Function: int aes220_Get_Firmware_Info(aes220_handle *aes220_ptr, const uint8_t *firmwareInfo)
+   Reads the software version written into the code.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     boardInfo: an array of 3 unsigned char. Bytes: Major, Minor, and revision numbers e.g.: {1.4.0} 
+   boardInfo: an array of 3 unsigned char. Bytes: Major, Minor, and revision numbers e.g.: {1.4.0} 
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Get_Firmware_Info(aes220_handle* aes220_ptr, uint8_t * firmwareInfo_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Get_Firmware_Info(aes220_handle* aes220_ptr, uint8_t * firmwareInfo_ptr);
 
-  /* Function:  int aes220_Program_MC_RAM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
-     Programs the micro-controller RAM with the given file.
+/* Function: int aes220_Program_MC_RAM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
+   Programs the micro-controller RAM with the given file.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     file_ptr: pointer to the file to be downloaded in the micro-controller's RAM 
+   file_ptr: pointer to the file to be downloaded in the micro-controller's RAM 
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Program_MC_RAM(aes220_handle* aes220_ptr, const char * file_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Program_MC_RAM(aes220_handle* aes220_ptr, const char * file_ptr);
 
-  /* Function:  int aes220_Program_MC_EEPROM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
-     Programs the micro-controller EEPROM with the given file.
+/* Function: int aes220_Program_MC_EEPROM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
+   Programs the micro-controller EEPROM with the given file.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     file_ptr: pointer to the file to be downloaded in the micro-controller's EEPROM
+   file_ptr: pointer to the file to be downloaded in the micro-controller's EEPROM
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Program_MC_EEPROM(aes220_handle* aes220_ptr, const char * file_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Program_MC_EEPROM(aes220_handle* aes220_ptr, const char * file_ptr);
 
-  /* Function:  int aes220_Configure_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
-     Configure the FPGA with the given file.
+/* Function: int aes220_Configure_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
+   Configure the FPGA with the given file.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     file_ptr: pointer to the FPGA configuration file
+   file_ptr: pointer to the FPGA configuration file
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Configure_FPGA(aes220_handle* aes220_ptr, const char * file_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Configure_FPGA(aes220_handle* aes220_ptr, const char * file_ptr);
 
-  /* Function:  int aes220_Program_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
-     Program the FPGA flash with the given file.
+/* Function: int aes220_Program_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)
+   Program the FPGA flash with the given file.
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     file_ptr: pointer to the FPGA configuration file
+   file_ptr: pointer to the FPGA configuration file
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Program_FPGA(aes220_handle* aes220_ptr, const char * file_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Program_FPGA(aes220_handle* aes220_ptr, const char * file_ptr);
 
-  /* Function:  int aes220_Erase_FPGA(aes220_handle *aes220_ptr)
-     Erase the FPGA Flash (First page only to prevent the FPGA from booting up).
+/* Function: int aes220_Erase_FPGA(aes220_handle *aes220_ptr)
+   Erase the FPGA Flash (First page only to prevent the FPGA from booting up).
 
-     Parameters:
+   Parameters:
 
-     aes220_ptr: a handle to the USB device
+   aes220_ptr: a handle to the USB device
 
-     Returns:
+   Returns:
 
-     Returns 0 on success.
-  */
-  int aes220_Erase_FPGA(aes220_handle* aes220_ptr);
+   Returns 0 on success.
+*/
+DLLEXPORT int aes220_Erase_FPGA(aes220_handle* aes220_ptr);
 
-  /*************************************************************************************************
+/*************************************************************************************************
 Development functions. Do not include in release version of library
-  *************************************************************************************************/
-
-  int aes220_Read_MC_Mode(aes220_handle* aes220_ptr, uint8_t *MC_Mode_ptr);
-  int aes220_Read_MC_EEPROM(aes220_handle* aes220_ptr, uint16_t startAddress, const uint8_t *data, 
-			    uint16_t length);
-  int aes220_Send_MC_Cmd(aes220_handle* aes220_ptr, uint8_t cmd);
-  int aes220_Write_BRAM(aes220_handle* aes220_ptr, unsigned short addr,
-			unsigned char *bt_ptr, unsigned short bufSize);
-  int aes220_Read_BRAM(aes220_handle* aes220_ptr, unsigned short addr,
-		       unsigned char *bt_ptr, unsigned short bufSize);
-  int aes220_Test_SDRAM(aes220_handle* aes220_ptr);
-
-  /*************************************************************************************************
+*************************************************************************************************/
+
+DLLEXPORT int aes220_Read_MC_Mode(aes220_handle* aes220_ptr, uint8_t *MC_Mode_ptr);
+DLLEXPORT int aes220_Read_MC_EEPROM(aes220_handle* aes220_ptr, uint16_t startAddress, 
+				    const uint8_t *data, uint16_t length);
+DLLEXPORT int aes220_Send_MC_Cmd(aes220_handle* aes220_ptr, uint8_t cmd);
+DLLEXPORT int aes220_Write_BRAM(aes220_handle* aes220_ptr, unsigned short addr,
+				unsigned char *bt_ptr, unsigned short bufSize);
+DLLEXPORT int aes220_Read_BRAM(aes220_handle* aes220_ptr, unsigned short addr,
+			       unsigned char *bt_ptr, unsigned short bufSize);
+DLLEXPORT int aes220_Test_SDRAM(aes220_handle* aes220_ptr);
+
+/*************************************************************************************************
 End of development functions.
-  *************************************************************************************************/
-
+*************************************************************************************************/
 
-  /* #ifdef __cplusplus */
-} 
-/* #endif */
 
 #endif
diff --git a/API/include/aes220Dev.h b/API/include/aes220Dev.h
index d032175..97a60c3 100644
--- a/API/include/aes220Dev.h
+++ b/API/include/aes220Dev.h
@@ -254,9 +254,9 @@ class aes220Dev: private aesFx2Dev
     RUN_ERROR,
     VND_COMM_ERROR,
   };
-	void set_Device_USB_Parameters(int vid, int pid, int idx, int vbs);
-	void get_Device_USB_Parameters(int values[4]);
-	int open_Device(int vid, int pid, int idx);
+  void set_Device_USB_Parameters(int vid, int pid, int idx, int vbs);
+  void get_Device_USB_Parameters(int values[4]);
+  int open_Device(int vid, int pid, int idx);
 
   int program_MC_RAM(const char *uFile);
   /* Function:   int program_MC_RAM(const char *uFile)
diff --git a/API/include/aesFx2Dev.h b/API/include/aesFx2Dev.h
index 69ac572..705a6e3 100644
--- a/API/include/aesFx2Dev.h
+++ b/API/include/aesFx2Dev.h
@@ -40,12 +40,15 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 #include <fstream>
 #include <string>
 #include <stdio.h>
+#include <stdint.h>
 #include <errno.h>
 #include <string.h>
 #include <assert.h>
-#include <unistd.h>
 #include <fcntl.h>
-#include <sys/time.h>
+
+#ifndef _WIN32
+//# include <unistd.h>
+#endif
 
 #include "aesUSB.h"
 
diff --git a/API/include/aesUSB.h b/API/include/aesUSB.h
index b5a820c..656f07e 100644
--- a/API/include/aesUSB.h
+++ b/API/include/aesUSB.h
@@ -39,18 +39,19 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 
 #include <iostream>
 #include <fstream>
-#include <libusb-1.0/libusb.h>
 #include <cstdio>
 #include <cassert>
 #include <string>
 #include "aesLog_V0.0.2.h"
 
 #ifdef _WIN32
+ #include <libusbx-1.0/libusb.h>
  # include <windows.h>
  # define msleep(x) Sleep(x)
 #else
- # include <unistd.h>
-#define msleep(x) usleep(x*1000)
+ #include <libusb-1.0/libusb.h>
+//# include <unistd.h>
+ #define msleep(x) usleep(x*1000)
 #endif
 
 #define MAX_EP0_DATA 64
diff --git a/API/lib/aes220Dev.cpp b/API/lib/aes220Dev.cpp
index 7f9f341..873c0bb 100644
--- a/API/lib/aes220Dev.cpp
+++ b/API/lib/aes220Dev.cpp
@@ -360,7 +360,7 @@ int aes220Dev::configure_FPGA(string fFile) {
 
 
   // Start sending the configuration file through the USB interface
-  unsigned char dataOut[transferSize];
+  unsigned char *dataOut = new unsigned char[transferSize];
 
   log.add("Sending configuration file to FPGA... ", NOTE_VBS);
 
diff --git a/API/lib/aesFx2Dev.cpp b/API/lib/aesFx2Dev.cpp
index 4d7198f..d5950f1 100644
--- a/API/lib/aesFx2Dev.cpp
+++ b/API/lib/aesFx2Dev.cpp
@@ -123,7 +123,7 @@ int aesFx2Dev::programIHexLine(const char *buf,	const char *path,int line) {
     {
       //printf("  Writing nbytes=%d at addr=0x%04x\n",nbytes,addr);
       assert(nbytes>=0 && nbytes<256);
-      unsigned char data[nbytes];
+      unsigned char data[256];
       unsigned char cksum=nbytes+addr+(addr>>8)+type;
       for(unsigned int i=0; i<nbytes; i++)
 	{
diff --git a/NaturalDocs/API/API-1.0/files/aes220_API-h.html b/NaturalDocs/API/API-1.0/files/aes220_API-h.html
index b203cd8..4ff16de 100644
--- a/NaturalDocs/API/API-1.0/files/aes220_API-h.html
+++ b/NaturalDocs/API/API-1.0/files/aes220_API-h.html
@@ -19,47 +19,47 @@ if (browserType) {document.write("<div class=" + browserType + ">");if (browserV
 
 <div class="CGroup"><div class=CTopic><h3 class=CTitle><a name="Functions"></a>Functions</h3></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="aes220_handle*aes220_Open_Device(int_vid,int_pid,int_idx,int_vbs)"></a>aes220_handle* aes220_Open_Device(int vid, int pid, int idx, int vbs)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Returns a handle to an aes220 USB device.&nbsp; However it issimpler to use aes_Open (...) below.</p><h4 class=CHeading>Parameters</h4><p>vid: the USB vendor ID of the device (0x2443)</p><p>pid: the USB device ID (0x00DC)</p><p>idx: the device identification number (0 if only one such device on bus)</p><p>vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 6 = mundane messages, 9 = everything)</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="aes220_handle*aes220_Open_Device(int_vid,int_pid,int_idx,int_vbs)"></a>aes220_handle* aes220_Open_Device(int vid, int pid, int idx, int vbs)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Returns a handle to an aes220 USB device.&nbsp; However it issimpler to use aes_Open (...) below.</p><h4 class=CHeading>Parameters</h4><p>vid: the USB vendor ID of the device (0x2443)</p><p>pid: the USB device ID (0x00DC)</p><p>idx: the device identification number (0 if only one such device on bus)</p><p>vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 6 = mundane messages, 9 = everything)</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="aes220_handle*aes220_Open(int_idx,int_vbs)"></a>aes220_handle* aes220_Open(int idx, int vbs)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Returns a handle to an aes220 USB device.</p><h4 class=CHeading>Parameters</h4><p>idx: the device identification number (0 if only one such device on bus)</p><p>vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 6 = mundane messages, 9 = everything)</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="aes220_handle*aes220_Open(int_idx,int_vbs)"></a>aes220_handle* aes220_Open(int idx, int vbs)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Returns a handle to an aes220 USB device.</p><h4 class=CHeading>Parameters</h4><p>idx: the device identification number (0 if only one such device on bus)</p><p>vbs: level of verbosity used to write the log file (0 = none, 3 = error messages, 6 = mundane messages, 9 = everything)</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="void_aes220_Close_Device(aes220_handle*aes220_ptr)"></a>void aes220_Close_Device(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Closes the device pointed by the handle.&nbsp; Necessary before the handle goes out of scope or communication with the device will be broken.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: the handle to the device to be closed</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="void_aes220_Close_Device(aes220_handle*aes220_ptr)"></a>void aes220_Close_Device(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Closes the device pointed by the handle.&nbsp; Necessary before the handle goes out of scope or communication with the device will be broken.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: the handle to the device to be closed</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="void_aes220_Close(aes220_handle*aes220_ptr)"></a>void aes220_Close(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Closes the device pointed by the handle.&nbsp; Necessary before the handle goes out of scope or communication with the device will be broken.&nbsp; Same as aes220_Close_Device(...), introduced for name consistancy with aes_Open(...)</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: the handle to the device to be closed</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="void_aes220_Close(aes220_handle*aes220_ptr)"></a>void aes220_Close(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Closes the device pointed by the handle.&nbsp; Necessary before the handle goes out of scope or communication with the device will be broken.&nbsp; Same as aes220_Close_Device(...), introduced for name consistancy with aes_Open(...)</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: the handle to the device to be closed</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Pipe_Out(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)"></a>int aes220_Pipe_Out(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>buf_ptr: a pointer to a buffer of bytes.</p><p>bufSize: the size of the afore mentioned buffer (max size is 64KB)</p><p>channelAddress: the channel to communicate with in the FPGA application</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Pipe_Out(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)"></a>int aes220_Pipe_Out(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>buf_ptr: a pointer to a buffer of bytes.&nbsp; N bufSize: the size of the afore mentioned buffer (max size is 64KB)</p><p>channelAddress: the channel to communicate with in the FPGA application</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Pipe_In(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)"></a>int aes220_Pipe_In(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>buf_ptr: a pointer to a buffer of bytes.</p><p>bufSize: the size of the afore mentioned buffer (max size is 64KB)</p><p>channelAddress: the channel to communicate with in the FPGA application</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Pipe_In(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)"></a>int aes220_Pipe_In(aes220_handle *aes220_ptr, uint8_t *buf_ptr, uint16_t bufSize, uint8_t channelAddress)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>buf_ptr: a pointer to a buffer of bytes.</p><p>bufSize: the size of the afore mentioned buffer (max size is 64KB)</p><p>channelAddress: the channel to communicate with in the FPGA application</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Assert_Soft_Reset(aes220_handle*aes220_ptr)"></a>int aes220_Assert_Soft_Reset(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Send a reset signal to the FPGA.&nbsp; It is not a hard reset so the result depends on the code implememted in the FPGA.</p><p>Note: The USB interface provided does take account of the Soft Reset signal.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Assert_Soft_Reset(aes220_handle*aes220_ptr)"></a>int aes220_Assert_Soft_Reset(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Send a reset signal to the FPGA.&nbsp; It is not a hard reset so the result depends on the code implememted in the FPGA.</p><p>Note: The USB interface provided does take account of the Soft Reset signal.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Clear_Soft_Reset(aes220_handle*aes220_ptr)"></a>int aes220_Clear_Soft_Reset(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Clears the reset signal to the FPGA.&nbsp; It is not a hard reset so the result depends on the code implememted in the FPGA.</p><p>Note: The USB interface provided does take account of the Soft Reset signal.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Clear_Soft_Reset(aes220_handle*aes220_ptr)"></a>int aes220_Clear_Soft_Reset(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Clears the reset signal to the FPGA.&nbsp; It is not a hard reset so the result depends on the code implememted in the FPGA.</p><p>Note: The USB interface provided does take account of the Soft Reset signal.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Turn3V3On(aes220_handle*aes220_ptr)"></a>int aes220_Turn3V3On(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Turns ON the 3.3V power supply to the banks and FPGA I/Os</p><p>Note: 3.3V is turned ON by default but can also be turned OFF using aes220_Turn3V3Off (see below)</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Turn3V3On(aes220_handle*aes220_ptr)"></a>int aes220_Turn3V3On(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Turns ON the 3.3V power supply to the banks and FPGA I/Os</p><p>Note: 3.3V is turned ON by default but can also be turned OFF using aes220_Turn3V3Off (see below)</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Turn3V3Off(aes220_handle*aes220_ptr)"></a>int aes220_Turn3V3Off(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Turns ON the 3.3V power supply to the banks and FPGA I/Os</p><p>Note: 3.3V is turned ON by default but it can be necessary to turn it OFF if using an external 3.3V supply (if more current is required than can be provided on-board) or if stacking up two or more boards together.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Turn3V3Off(aes220_handle*aes220_ptr)"></a>int aes220_Turn3V3Off(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Turns ON the 3.3V power supply to the banks and FPGA I/Os</p><p>Note: 3.3V is turned ON by default but it can be necessary to turn it OFF if using an external 3.3V supply (if more current is required than can be provided on-board) or if stacking up two or more boards together.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_ReadI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)"></a>int aes220_ReadI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reads data from an I2C device</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>deviceAddress: the address of the device on the I2C bus</p><p>data: a data array (pointer to)</p><p>dataLength: the length of the data (max length 64KB)</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_ReadI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)"></a>int aes220_ReadI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reads data from an I2C device</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>deviceAddress: the address of the device on the I2C bus</p><p>data: a data array (pointer to)</p><p>dataLength: the length of the data (max length 64KB)</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_WriteI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)"></a>int aes220_WriteI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Writes data from an I2C device</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>deviceAddress: the address of the device on the I2C bus</p><p>data: a data array (pointer to)</p><p>dataLength: the length of the data (max length 64KB)</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_WriteI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)"></a>int aes220_WriteI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *data, uint16_t dataLength)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Writes data from an I2C device</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>deviceAddress: the address of the device on the I2C bus</p><p>data: a data array (pointer to)</p><p>dataLength: the length of the data (max length 64KB)</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_CombinedI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*dataToWrite,uint16_t_dataToWriteLength,uint8_t*dataToRead,uint16_t_dataToReadLength)"></a>int aes220_CombinedI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *dataToWrite, uint16_t dataToWriteLength, uint8_t *dataToRead, uint16_t dataToReadLength)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>deviceAddress: the address of the device on the I2C bus</p><p>dataToWrite: a data array (pointer to)</p><p>dataToWriteLength: the length of the data to write (max length 64KB)</p><p>dataToRead: a data array (pointer to)</p><p>dataToReadLength: the length of the data to write (max length 64KB)</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_CombinedI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*dataToWrite,uint16_t_dataToWriteLength,uint8_t*dataToRead,uint16_t_dataToReadLength)"></a>int aes220_CombinedI2C(aes220_handle *aes220_ptr, uint8_t deviceAddress, uint8_t *dataToWrite, uint16_t dataToWriteLength, uint8_t *dataToRead, uint16_t dataToReadLength)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>deviceAddress: the address of the device on the I2C bus</p><p>dataToWrite: a data array (pointer to)</p><p>dataToWriteLength: the length of the data to write (max length 64KB)</p><p>dataToRead: a data array (pointer to)</p><p>dataToReadLength: the length of the data to write (max length 64KB)</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Set_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)"></a>int aes220_Set_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number.&nbsp; This should be left alone unless the micro-controller EEPROM is erased and needs reprogramming.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>boardInfo: an array of 8 unsigned char.&nbsp; Bytes: 3.3V ON/OFF(1), a/b, A, 1, SN, dd, mm, yyyy</p><p>Note: Do not use this function to turn the 3.3V ON or OFF, use the aes220_Turn3V3ON/OFF functions</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Set_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)"></a>int aes220_Set_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number.&nbsp; This should be left alone unless the micro-controller EEPROM is erased and needs reprogramming.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>boardInfo: an array of 8 unsigned char.&nbsp; Bytes: 3.3V ON/OFF(1), a/b, A, 1, SN, dd, mm, yyyy</p><p>Note: Do not use this function to turn the 3.3V ON or OFF, use the aes220_Turn3V3ON/OFF functions</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Get_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)"></a>int aes220_Get_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>boardInfo: an array of 8 unsigned char.&nbsp; Bytes: 3.3V ON/OFF, a/b, A, 1, SN, dd, mm, yyyy</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Get_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)"></a>int aes220_Get_Board_Info(aes220_handle *aes220_ptr, const uint8_t *boardInfo)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>boardInfo: an array of 8 unsigned char.&nbsp; Bytes: 3.3V ON/OFF, a/b, A, 1, SN, dd, mm, yyyy</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Get_Firmware_Info(aes220_handle*aes220_ptr,const_uint8_t*firmwareInfo)"></a>int aes220_Get_Firmware_Info(aes220_handle *aes220_ptr, const uint8_t *firmwareInfo)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reads the software version written into the code.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>boardInfo: an array of 3 unsigned char.&nbsp; Bytes: Major, Minor, and revision numbers e.g.: {1.4.0}</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Get_Firmware_Info(aes220_handle*aes220_ptr,const_uint8_t*firmwareInfo)"></a>int aes220_Get_Firmware_Info(aes220_handle *aes220_ptr, const uint8_t *firmwareInfo)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Reads the software version written into the code.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>boardInfo: an array of 3 unsigned char.&nbsp; Bytes: Major, Minor, and revision numbers e.g.: {1.4.0}</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Program_MC_RAM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Program_MC_RAM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Programs the micro-controller RAM with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the file to be downloaded in the micro-controller&rsquo;s RAM</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Program_MC_RAM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Program_MC_RAM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Programs the micro-controller RAM with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the file to be downloaded in the micro-controller&rsquo;s RAM</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Program_MC_EEPROM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Program_MC_EEPROM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Programs the micro-controller EEPROM with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the file to be downloaded in the micro-controller&rsquo;s EEPROM</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Program_MC_EEPROM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Program_MC_EEPROM(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Programs the micro-controller EEPROM with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the file to be downloaded in the micro-controller&rsquo;s EEPROM</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Configure_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Configure_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Configure the FPGA with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the FPGA configuration file</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Configure_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Configure_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Configure the FPGA with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the FPGA configuration file</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Program_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Program_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Program the FPGA flash with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the FPGA configuration file</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Program_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)"></a>int aes220_Program_FPGA(aes220_handle *aes220_ptr, const uint8_t * file_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Program the FPGA flash with the given file.</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><p>file_ptr: pointer to the FPGA configuration file</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
-<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Erase_FPGA(aes220_handle*aes220_ptr)"></a>int aes220_Erase_FPGA(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
+<div class="CFunction"><div class=CTopic><h3 class=CTitle><a name="int_aes220_Erase_FPGA(aes220_handle*aes220_ptr)"></a>int aes220_Erase_FPGA(aes220_handle *aes220_ptr)</h3><div class=CBody><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote><p>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</p><h4 class=CHeading>Parameters</h4><p>aes220_ptr: a handle to the USB device</p><h4 class=CHeading>Returns</h4><p>Returns 0 on success.</p></div></div></div>
 
 </div><!--Content-->
 
@@ -74,7 +74,7 @@ var searchPanel = new SearchPanel("searchPanel", "HTML", "../search");
 
 
 <!--START_ND_TOOLTIPS-->
-<div class=CToolTip id="tt1"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device. </div></div><div class=CToolTip id="tt2"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device.</div></div><div class=CToolTip id="tt3"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt4"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt5"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</div></div><div class=CToolTip id="tt6"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</div></div><div class=CToolTip id="tt7"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Send a reset signal to the FPGA. </div></div><div class=CToolTip id="tt8"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Clears the reset signal to the FPGA. </div></div><div class=CToolTip id="tt9"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt10"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt11"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads data from an I2C device</div></div><div class=CToolTip id="tt12"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Writes data from an I2C device</div></div><div class=CToolTip id="tt13"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</div></div><div class=CToolTip id="tt14"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. </div></div><div class=CToolTip id="tt15"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</div></div><div class=CToolTip id="tt16"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the software version written into the code.</div></div><div class=CToolTip id="tt17"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller RAM with the given file.</div></div><div class=CToolTip id="tt18"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller EEPROM with the given file.</div></div><div class=CToolTip id="tt19"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Configure the FPGA with the given file.</div></div><div class=CToolTip id="tt20"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Program the FPGA flash with the given file.</div></div><div class=CToolTip id="tt21"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</div></div><!--END_ND_TOOLTIPS-->
+<div class=CToolTip id="tt1"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device. </div></div><div class=CToolTip id="tt2"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device.</div></div><div class=CToolTip id="tt3"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt4"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt5"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</div></div><div class=CToolTip id="tt6"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</div></div><div class=CToolTip id="tt7"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Send a reset signal to the FPGA. </div></div><div class=CToolTip id="tt8"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Clears the reset signal to the FPGA. </div></div><div class=CToolTip id="tt9"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt10"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt11"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads data from an I2C device</div></div><div class=CToolTip id="tt12"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Writes data from an I2C device</div></div><div class=CToolTip id="tt13"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</div></div><div class=CToolTip id="tt14"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. </div></div><div class=CToolTip id="tt15"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</div></div><div class=CToolTip id="tt16"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the software version written into the code.</div></div><div class=CToolTip id="tt17"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller RAM with the given file.</div></div><div class=CToolTip id="tt18"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller EEPROM with the given file.</div></div><div class=CToolTip id="tt19"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Configure the FPGA with the given file.</div></div><div class=CToolTip id="tt20"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Program the FPGA flash with the given file.</div></div><div class=CToolTip id="tt21"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</div></div><!--END_ND_TOOLTIPS-->
 
 
 
diff --git a/NaturalDocs/API/API-1.0/index/Functions.html b/NaturalDocs/API/API-1.0/index/Functions.html
index 1adf270..91fdf10 100644
--- a/NaturalDocs/API/API-1.0/index/Functions.html
+++ b/NaturalDocs/API/API-1.0/index/Functions.html
@@ -13,15 +13,15 @@ if (browserType) {document.write("<div class=" + browserType + ">");if (browserV
 
 <div id=Index><div class=IPageTitle>Function Index</div><div class=INavigationBar>$#! &middot; 0-9 &middot; <a href="#A">A</a> &middot; B &middot; C &middot; D &middot; E &middot; F &middot; G &middot; H &middot; <a href="#I">I</a> &middot; J &middot; K &middot; L &middot; M &middot; N &middot; O &middot; P &middot; Q &middot; R &middot; S &middot; T &middot; U &middot; <a href="#V">V</a> &middot; W &middot; X &middot; Y &middot; Z</div><table border=0 cellspacing=0 cellpadding=0><tr><td class=IHeading id=IFirstHeading><a name="A"></a>A</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#aes220_handle*aes220_Open(int_idx,int_vbs)" id=link1 onMouseOver="ShowTip(event, 'tt1', 'link1')" onMouseOut="HideTip('tt1')" class=ISymbol>aes220_handle*aes220_Open(int idx,int vbs)</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#aes220_handle*aes220_Open_Device(int_vid,int_pid,int_idx,int_vbs)" id=link2 onMouseOver="ShowTip(event, 'tt2', 'link2')" onMouseOut="HideTip('tt2')" class=ISymbol>aes220_handle*aes220_Open_Device(int vid,int pid,int idx,int vbs)</a></td></tr><tr><td class=IHeading><a name="I"></a>I</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Assert_Soft_Reset(aes220_handle*aes220_ptr)" id=link3 onMouseOver="ShowTip(event, 'tt3', 'link3')" onMouseOut="HideTip('tt3')" class=ISymbol>int aes220_Assert_Soft_Reset(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Clear_Soft_Reset(aes220_handle*aes220_ptr)" id=link4 onMouseOver="ShowTip(event, 'tt4', 'link4')" onMouseOut="HideTip('tt4')" class=ISymbol>int aes220_Clear_Soft_Reset(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_CombinedI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*dataToWrite,uint16_t_dataToWriteLength,uint8_t*dataToRead,uint16_t_dataToReadLength)" id=link5 onMouseOver="ShowTip(event, 'tt5', 'link5')" onMouseOut="HideTip('tt5')" class=ISymbol>int aes220_CombinedI2C(aes220_handle*aes220_ptr,uint8_t deviceAddress,uint8_t*dataToWrite,uint16_t dataToWriteLength,uint8_t*dataToRead,uint16_t dataToReadLength)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Configure_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link6 onMouseOver="ShowTip(event, 'tt6', 'link6')" onMouseOut="HideTip('tt6')" class=ISymbol>int aes220_Configure_FPGA(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Erase_FPGA(aes220_handle*aes220_ptr)" id=link7 onMouseOver="ShowTip(event, 'tt7', 'link7')" onMouseOut="HideTip('tt7')" class=ISymbol>int aes220_Erase_FPGA(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Get_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)" id=link8 onMouseOver="ShowTip(event, 'tt8', 'link8')" onMouseOut="HideTip('tt8')" class=ISymbol>int aes220_Get_Board_Info(aes220_handle*aes220_ptr,const uint8_t*boardInfo)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Get_Firmware_Info(aes220_handle*aes220_ptr,const_uint8_t*firmwareInfo)" id=link9 onMouseOver="ShowTip(event, 'tt9', 'link9')" onMouseOut="HideTip('tt9')" class=ISymbol>int aes220_Get_Firmware_Info(aes220_handle*aes220_ptr,const uint8_t*firmwareInfo)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Pipe_In(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)" id=link10 onMouseOver="ShowTip(event, 'tt10', 'link10')" onMouseOut="HideTip('tt10')" class=ISymbol>int aes220_Pipe_In(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t bufSize,uint8_t channelAddress)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Pipe_Out(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)" id=link11 onMouseOver="ShowTip(event, 'tt11', 'link11')" onMouseOut="HideTip('tt11')" class=ISymbol>int aes220_Pipe_Out(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t bufSize,uint8_t channelAddress)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Program_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link12 onMouseOver="ShowTip(event, 'tt12', 'link12')" onMouseOut="HideTip('tt12')" class=ISymbol>int aes220_Program_FPGA(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Program_MC_EEPROM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link13 onMouseOver="ShowTip(event, 'tt13', 'link13')" onMouseOut="HideTip('tt13')" class=ISymbol>int aes220_Program_MC_EEPROM(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Program_MC_RAM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link14 onMouseOver="ShowTip(event, 'tt14', 'link14')" onMouseOut="HideTip('tt14')" class=ISymbol>int aes220_Program_MC_RAM(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_ReadI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)" id=link15 onMouseOver="ShowTip(event, 'tt15', 'link15')" onMouseOut="HideTip('tt15')" class=ISymbol>int aes220_ReadI2C(aes220_handle*aes220_ptr,uint8_t deviceAddress,uint8_t*data,uint16_t dataLength)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Set_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)" id=link16 onMouseOver="ShowTip(event, 'tt16', 'link16')" onMouseOut="HideTip('tt16')" class=ISymbol>int aes220_Set_Board_Info(aes220_handle*aes220_ptr,const uint8_t*boardInfo)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Turn3V3Off(aes220_handle*aes220_ptr)" id=link17 onMouseOver="ShowTip(event, 'tt17', 'link17')" onMouseOut="HideTip('tt17')" class=ISymbol>int aes220_Turn3V3Off(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Turn3V3On(aes220_handle*aes220_ptr)" id=link18 onMouseOver="ShowTip(event, 'tt18', 'link18')" onMouseOut="HideTip('tt18')" class=ISymbol>int aes220_Turn3V3On(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_WriteI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)" id=link19 onMouseOver="ShowTip(event, 'tt19', 'link19')" onMouseOut="HideTip('tt19')" class=ISymbol>int aes220_WriteI2C(aes220_handle*aes220_ptr,uint8_t deviceAddress,uint8_t*data,uint16_t dataLength)</a></td></tr><tr><td class=IHeading><a name="V"></a>V</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#void_aes220_Close(aes220_handle*aes220_ptr)" id=link20 onMouseOver="ShowTip(event, 'tt20', 'link20')" onMouseOut="HideTip('tt20')" class=ISymbol>void aes220_Close(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#void_aes220_Close_Device(aes220_handle*aes220_ptr)" id=link21 onMouseOver="ShowTip(event, 'tt21', 'link21')" onMouseOut="HideTip('tt21')" class=ISymbol>void aes220_Close_Device(aes220_handle*aes220_ptr)</a></td></tr></table>
 <!--START_ND_TOOLTIPS-->
-<div class=CToolTip id="tt1"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device.</div></div><div class=CToolTip id="tt2"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device. </div></div><!--END_ND_TOOLTIPS-->
+<div class=CToolTip id="tt1"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device.</div></div><div class=CToolTip id="tt2"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device. </div></div><!--END_ND_TOOLTIPS-->
 
 
 <!--START_ND_TOOLTIPS-->
-<div class=CToolTip id="tt3"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Send a reset signal to the FPGA. </div></div><div class=CToolTip id="tt4"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Clears the reset signal to the FPGA. </div></div><div class=CToolTip id="tt5"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</div></div><div class=CToolTip id="tt6"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Configure the FPGA with the given file.</div></div><div class=CToolTip id="tt7"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</div></div><div class=CToolTip id="tt8"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</div></div><div class=CToolTip id="tt9"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the software version written into the code.</div></div><div class=CToolTip id="tt10"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</div></div><div class=CToolTip id="tt11"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</div></div><div class=CToolTip id="tt12"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Program the FPGA flash with the given file.</div></div><div class=CToolTip id="tt13"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller EEPROM with the given file.</div></div><div class=CToolTip id="tt14"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller RAM with the given file.</div></div><div class=CToolTip id="tt15"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads data from an I2C device</div></div><div class=CToolTip id="tt16"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. </div></div><div class=CToolTip id="tt17"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt18"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt19"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Writes data from an I2C device</div></div><!--END_ND_TOOLTIPS-->
+<div class=CToolTip id="tt3"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Send a reset signal to the FPGA. </div></div><div class=CToolTip id="tt4"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Clears the reset signal to the FPGA. </div></div><div class=CToolTip id="tt5"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</div></div><div class=CToolTip id="tt6"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Configure the FPGA with the given file.</div></div><div class=CToolTip id="tt7"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</div></div><div class=CToolTip id="tt8"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</div></div><div class=CToolTip id="tt9"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the software version written into the code.</div></div><div class=CToolTip id="tt10"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</div></div><div class=CToolTip id="tt11"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</div></div><div class=CToolTip id="tt12"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Program the FPGA flash with the given file.</div></div><div class=CToolTip id="tt13"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller EEPROM with the given file.</div></div><div class=CToolTip id="tt14"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller RAM with the given file.</div></div><div class=CToolTip id="tt15"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads data from an I2C device</div></div><div class=CToolTip id="tt16"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. </div></div><div class=CToolTip id="tt17"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt18"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt19"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Writes data from an I2C device</div></div><!--END_ND_TOOLTIPS-->
 
 
 <!--START_ND_TOOLTIPS-->
-<div class=CToolTip id="tt20"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt21"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><!--END_ND_TOOLTIPS-->
+<div class=CToolTip id="tt20"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt21"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><!--END_ND_TOOLTIPS-->
 
 </div><!--Index-->
 
diff --git a/NaturalDocs/API/API-1.0/index/General.html b/NaturalDocs/API/API-1.0/index/General.html
index 2d4a528..66f7c72 100644
--- a/NaturalDocs/API/API-1.0/index/General.html
+++ b/NaturalDocs/API/API-1.0/index/General.html
@@ -13,7 +13,7 @@ if (browserType) {document.write("<div class=" + browserType + ">");if (browserV
 
 <div id=Index><div class=IPageTitle>Index</div><div class=INavigationBar>$#! &middot; 0-9 &middot; <a href="#A">A</a> &middot; <a href="#B">B</a> &middot; C &middot; <a href="#D">D</a> &middot; <a href="#E">E</a> &middot; <a href="#F">F</a> &middot; G &middot; H &middot; <a href="#I">I</a> &middot; J &middot; K &middot; L &middot; M &middot; N &middot; O &middot; P &middot; Q &middot; R &middot; S &middot; T &middot; <a href="#U">U</a> &middot; <a href="#V">V</a> &middot; W &middot; X &middot; Y &middot; Z</div><table border=0 cellspacing=0 cellpadding=0><tr><td class=IHeading id=IFirstHeading><a name="A"></a>A</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#aes220_API.h"  class=ISymbol>aes220_API.h</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#aes220_handle*aes220_Open(int_idx,int_vbs)" id=link1 onMouseOver="ShowTip(event, 'tt1', 'link1')" onMouseOut="HideTip('tt1')" class=ISymbol>aes220_handle*aes220_Open(int idx,int vbs)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#aes220_handle*aes220_Open_Device(int_vid,int_pid,int_idx,int_vbs)" id=link2 onMouseOver="ShowTip(event, 'tt2', 'link2')" onMouseOut="HideTip('tt2')" class=ISymbol>aes220_handle*aes220_Open_Device(int vid,int pid,int idx,int vbs)</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#aes220API_errorCode" id=link3 onMouseOver="ShowTip(event, 'tt3', 'link3')" onMouseOut="HideTip('tt3')" class=ISymbol>aes220API_errorCode</a></td></tr><tr><td class=IHeading><a name="B"></a>B</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#BULK_RX_ERROR" id=link4 onMouseOver="ShowTip(event, 'tt4', 'link4')" onMouseOut="HideTip('tt4')" class=ISymbol>BULK_RX_ERROR</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#BULK_TX_ERROR" id=link5 onMouseOver="ShowTip(event, 'tt5', 'link5')" onMouseOut="HideTip('tt5')" class=ISymbol>BULK_TX_ERROR</a></td></tr><tr><td class=IHeading><a name="D"></a>D</td><td></td></tr><tr><td class=ISymbolPrefix id=IOnlySymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#DEVICE_NOT_OPENED" id=link6 onMouseOver="ShowTip(event, 'tt6', 'link6')" onMouseOut="HideTip('tt6')" class=ISymbol>DEVICE_NOT_OPENED</a></td></tr><tr><td class=IHeading><a name="E"></a>E</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#EEPROM_ERROR" id=link7 onMouseOver="ShowTip(event, 'tt7', 'link7')" onMouseOut="HideTip('tt7')" class=ISymbol>EEPROM_ERROR</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#Enumerations"  class=ISymbol>Enumerations</a></td></tr><tr><td class=IHeading><a name="F"></a>F</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FILE_NOT_CREATED" id=link8 onMouseOver="ShowTip(event, 'tt8', 'link8')" onMouseOut="HideTip('tt8')" class=ISymbol>FILE_NOT_CREATED</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FILE_NOT_FOUND=1" id=link9 onMouseOver="ShowTip(event, 'tt9', 'link9')" onMouseOut="HideTip('tt9')" class=ISymbol>FILE_NOT_FOUND=1</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FLASH_ERROR" id=link10 onMouseOver="ShowTip(event, 'tt10', 'link10')" onMouseOut="HideTip('tt10')" class=ISymbol>FLASH_ERROR</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FLASH_NOT_READY" id=link11 onMouseOver="ShowTip(event, 'tt11', 'link11')" onMouseOut="HideTip('tt11')" class=ISymbol>FLASH_NOT_READY</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FLASH_READY" id=link12 onMouseOver="ShowTip(event, 'tt12', 'link12')" onMouseOut="HideTip('tt12')" class=ISymbol>FLASH_READY</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FPGA_CONF_ERROR" id=link13 onMouseOver="ShowTip(event, 'tt13', 'link13')" onMouseOut="HideTip('tt13')" class=ISymbol>FPGA_CONF_ERROR</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FPGA_PROG_ERROR" id=link14 onMouseOver="ShowTip(event, 'tt14', 'link14')" onMouseOut="HideTip('tt14')" class=ISymbol>FPGA_PROG_ERROR</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#FPGA_UNKNOWN_STATE" id=link15 onMouseOver="ShowTip(event, 'tt15', 'link15')" onMouseOut="HideTip('tt15')" class=ISymbol>FPGA_UNKNOWN_STATE</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#Functions"  class=ISymbol>Functions</a></td></tr><tr><td class=IHeading><a name="I"></a>I</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Assert_Soft_Reset(aes220_handle*aes220_ptr)" id=link16 onMouseOver="ShowTip(event, 'tt16', 'link16')" onMouseOut="HideTip('tt16')" class=ISymbol>int aes220_Assert_Soft_Reset(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Clear_Soft_Reset(aes220_handle*aes220_ptr)" id=link17 onMouseOver="ShowTip(event, 'tt17', 'link17')" onMouseOut="HideTip('tt17')" class=ISymbol>int aes220_Clear_Soft_Reset(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_CombinedI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*dataToWrite,uint16_t_dataToWriteLength,uint8_t*dataToRead,uint16_t_dataToReadLength)" id=link18 onMouseOver="ShowTip(event, 'tt18', 'link18')" onMouseOut="HideTip('tt18')" class=ISymbol>int aes220_CombinedI2C(aes220_handle*aes220_ptr,uint8_t deviceAddress,uint8_t*dataToWrite,uint16_t dataToWriteLength,uint8_t*dataToRead,uint16_t dataToReadLength)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Configure_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link19 onMouseOver="ShowTip(event, 'tt19', 'link19')" onMouseOut="HideTip('tt19')" class=ISymbol>int aes220_Configure_FPGA(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Erase_FPGA(aes220_handle*aes220_ptr)" id=link20 onMouseOver="ShowTip(event, 'tt20', 'link20')" onMouseOut="HideTip('tt20')" class=ISymbol>int aes220_Erase_FPGA(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Get_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)" id=link21 onMouseOver="ShowTip(event, 'tt21', 'link21')" onMouseOut="HideTip('tt21')" class=ISymbol>int aes220_Get_Board_Info(aes220_handle*aes220_ptr,const uint8_t*boardInfo)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Get_Firmware_Info(aes220_handle*aes220_ptr,const_uint8_t*firmwareInfo)" id=link22 onMouseOver="ShowTip(event, 'tt22', 'link22')" onMouseOut="HideTip('tt22')" class=ISymbol>int aes220_Get_Firmware_Info(aes220_handle*aes220_ptr,const uint8_t*firmwareInfo)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Pipe_In(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)" id=link23 onMouseOver="ShowTip(event, 'tt23', 'link23')" onMouseOut="HideTip('tt23')" class=ISymbol>int aes220_Pipe_In(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t bufSize,uint8_t channelAddress)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Pipe_Out(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t_bufSize,uint8_t_channelAddress)" id=link24 onMouseOver="ShowTip(event, 'tt24', 'link24')" onMouseOut="HideTip('tt24')" class=ISymbol>int aes220_Pipe_Out(aes220_handle*aes220_ptr,uint8_t*buf_ptr,uint16_t bufSize,uint8_t channelAddress)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Program_FPGA(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link25 onMouseOver="ShowTip(event, 'tt25', 'link25')" onMouseOut="HideTip('tt25')" class=ISymbol>int aes220_Program_FPGA(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Program_MC_EEPROM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link26 onMouseOver="ShowTip(event, 'tt26', 'link26')" onMouseOut="HideTip('tt26')" class=ISymbol>int aes220_Program_MC_EEPROM(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Program_MC_RAM(aes220_handle*aes220_ptr,const_uint8_t*file_ptr)" id=link27 onMouseOver="ShowTip(event, 'tt27', 'link27')" onMouseOut="HideTip('tt27')" class=ISymbol>int aes220_Program_MC_RAM(aes220_handle*aes220_ptr,const uint8_t*file_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_ReadI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)" id=link28 onMouseOver="ShowTip(event, 'tt28', 'link28')" onMouseOut="HideTip('tt28')" class=ISymbol>int aes220_ReadI2C(aes220_handle*aes220_ptr,uint8_t deviceAddress,uint8_t*data,uint16_t dataLength)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Set_Board_Info(aes220_handle*aes220_ptr,const_uint8_t*boardInfo)" id=link29 onMouseOver="ShowTip(event, 'tt29', 'link29')" onMouseOut="HideTip('tt29')" class=ISymbol>int aes220_Set_Board_Info(aes220_handle*aes220_ptr,const uint8_t*boardInfo)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Turn3V3Off(aes220_handle*aes220_ptr)" id=link30 onMouseOver="ShowTip(event, 'tt30', 'link30')" onMouseOut="HideTip('tt30')" class=ISymbol>int aes220_Turn3V3Off(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_Turn3V3On(aes220_handle*aes220_ptr)" id=link31 onMouseOver="ShowTip(event, 'tt31', 'link31')" onMouseOut="HideTip('tt31')" class=ISymbol>int aes220_Turn3V3On(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#int_aes220_WriteI2C(aes220_handle*aes220_ptr,uint8_t_deviceAddress,uint8_t*data,uint16_t_dataLength)" id=link32 onMouseOver="ShowTip(event, 'tt32', 'link32')" onMouseOut="HideTip('tt32')" class=ISymbol>int aes220_WriteI2C(aes220_handle*aes220_ptr,uint8_t deviceAddress,uint8_t*data,uint16_t dataLength)</a></td></tr><tr><td class=IHeading><a name="U"></a>U</td><td></td></tr><tr><td class=ISymbolPrefix id=IOnlySymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#UC_PROG_ERROR" id=link33 onMouseOver="ShowTip(event, 'tt33', 'link33')" onMouseOut="HideTip('tt33')" class=ISymbol>UC_PROG_ERROR</a></td></tr><tr><td class=IHeading><a name="V"></a>V</td><td></td></tr><tr><td class=ISymbolPrefix id=IFirstSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#void_aes220_Close(aes220_handle*aes220_ptr)" id=link34 onMouseOver="ShowTip(event, 'tt34', 'link34')" onMouseOut="HideTip('tt34')" class=ISymbol>void aes220_Close(aes220_handle*aes220_ptr)</a></td></tr><tr><td class=ISymbolPrefix id=ILastSymbolPrefix>&nbsp;</td><td class=IEntry><a href="../files/aes220_API-h.html#void_aes220_Close_Device(aes220_handle*aes220_ptr)" id=link35 onMouseOver="ShowTip(event, 'tt35', 'link35')" onMouseOut="HideTip('tt35')" class=ISymbol>void aes220_Close_Device(aes220_handle*aes220_ptr)</a></td></tr></table>
 <!--START_ND_TOOLTIPS-->
-<div class=CToolTip id="tt1"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device.</div></div><div class=CToolTip id="tt2"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device. </div></div><div class=CToolTip id="tt3"><div class=CType>API error codes.</div></div><!--END_ND_TOOLTIPS-->
+<div class=CToolTip id="tt1"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device.</div></div><div class=CToolTip id="tt2"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT aes220_handle* aes220_Open_Device(</td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>pid,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>idx,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>int&nbsp;</td><td class="PParameter  prettyprint " nowrap>vbs</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Returns a handle to an aes220 USB device. </div></div><div class=CToolTip id="tt3"><div class=CType>API error codes.</div></div><!--END_ND_TOOLTIPS-->
 
 
 <!--START_ND_TOOLTIPS-->
@@ -33,7 +33,7 @@ if (browserType) {document.write("<div class=" + browserType + ">");if (browserV
 
 
 <!--START_ND_TOOLTIPS-->
-<div class=CToolTip id="tt16"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Send a reset signal to the FPGA. </div></div><div class=CToolTip id="tt17"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Clears the reset signal to the FPGA. </div></div><div class=CToolTip id="tt18"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</div></div><div class=CToolTip id="tt19"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Configure the FPGA with the given file.</div></div><div class=CToolTip id="tt20"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</div></div><div class=CToolTip id="tt21"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</div></div><div class=CToolTip id="tt22"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the software version written into the code.</div></div><div class=CToolTip id="tt23"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</div></div><div class=CToolTip id="tt24"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</div></div><div class=CToolTip id="tt25"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Program the FPGA flash with the given file.</div></div><div class=CToolTip id="tt26"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller EEPROM with the given file.</div></div><div class=CToolTip id="tt27"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller RAM with the given file.</div></div><div class=CToolTip id="tt28"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads data from an I2C device</div></div><div class=CToolTip id="tt29"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. </div></div><div class=CToolTip id="tt30"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt31"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt32"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Writes data from an I2C device</div></div><!--END_ND_TOOLTIPS-->
+<div class=CToolTip id="tt16"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Assert_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Send a reset signal to the FPGA. </div></div><div class=CToolTip id="tt17"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Clear_Soft_Reset(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Clears the reset signal to the FPGA. </div></div><div class=CToolTip id="tt18"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_CombinedI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToWrite,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToWriteLength,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>dataToRead,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataToReadLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Executes a write followed by a read of data to and from an I2C device without inserting a stop bit in between.</div></div><div class=CToolTip id="tt19"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Configure_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Configure the FPGA with the given file.</div></div><div class=CToolTip id="tt20"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Erase_FPGA(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Erase the FPGA Flash (First page only to prevent the FPGA from booting up).</div></div><div class=CToolTip id="tt21"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number as well as whether the 3.3V rail is on or off.</div></div><div class=CToolTip id="tt22"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Get_Firmware_Info(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>firmwareInfo_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads the software version written into the code.</div></div><div class=CToolTip id="tt23"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_In(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>bts_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Receives a buffer of data (bytes) over the USB link from the device (aes220) to the host (PC).</div></div><div class=CToolTip id="tt24"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Pipe_Out(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>buf_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint32_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>bufSize,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>channelAddress</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Transmits a buffer of data (bytes) over the USB link from the host (PC) to the device (aes220).</div></div><div class=CToolTip id="tt25"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_FPGA(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Program the FPGA flash with the given file.</div></div><div class=CToolTip id="tt26"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_EEPROM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller EEPROM with the given file.</div></div><div class=CToolTip id="tt27"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Program_MC_RAM(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>char&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>file_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Programs the micro-controller RAM with the given file.</div></div><div class=CToolTip id="tt28"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_ReadI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Reads data from an I2C device</div></div><div class=CToolTip id="tt29"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Set_Board_Info(</td><td class="PTypePrefix  prettyprint " nowrap></td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PTypePrefix  prettyprint " nowrap>const&nbsp;</td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>boardInfo</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Sets the information relevant to the module such as Serial Number, Module Type (aes220a or b) and its revision number. </div></div><div class=CToolTip id="tt30"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3Off(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt31"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_Turn3V3On(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Turns ON the 3.3V power supply to the banks and FPGA I/Os</div></div><div class=CToolTip id="tt32"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT int aes220_WriteI2C(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>deviceAddress,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint8_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>data,</td></tr><tr><td></td><td class="PType  prettyprint " nowrap>uint16_t&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap></td><td class="PParameter  prettyprint " nowrap>dataLength</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Writes data from an I2C device</div></div><!--END_ND_TOOLTIPS-->
 
 
 <!--START_ND_TOOLTIPS-->
@@ -41,7 +41,7 @@ if (browserType) {document.write("<div class=" + browserType + ">");if (browserV
 
 
 <!--START_ND_TOOLTIPS-->
-<div class=CToolTip id="tt34"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt35"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><!--END_ND_TOOLTIPS-->
+<div class=CToolTip id="tt34"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><div class=CToolTip id="tt35"><div class=CFunction><blockquote><table border=0 cellspacing=0 cellpadding=0 class="Prototype"><tr><td><table border=0 cellspacing=0 cellpadding=0><tr><td class="PBeforeParameters  prettyprint "nowrap>DLLEXPORT void aes220_Close_Device(</td><td class="PType  prettyprint " nowrap>aes220_handle&nbsp;</td><td class="PParameterPrefix  prettyprint " nowrap>*</td><td class="PParameter  prettyprint " nowrap>aes220_ptr</td><td class="PAfterParameters  prettyprint "nowrap>)</td></tr></table></td></tr></table></blockquote>Closes the device pointed by the handle. </div></div><!--END_ND_TOOLTIPS-->
 
 </div><!--Index-->
 
diff --git a/NaturalDocs/API/Data/ConfigFileInfo.nd b/NaturalDocs/API/Data/ConfigFileInfo.nd
index 6bc7bbe..77fb1a4 100644
Binary files a/NaturalDocs/API/Data/ConfigFileInfo.nd and b/NaturalDocs/API/Data/ConfigFileInfo.nd differ
diff --git a/NaturalDocs/API/Data/FileInfo.nd b/NaturalDocs/API/Data/FileInfo.nd
index 0c386f6..4ca829d 100644
--- a/NaturalDocs/API/Data/FileInfo.nd
+++ b/NaturalDocs/API/Data/FileInfo.nd
@@ -1,4 +1,4 @@
 1.51
 C/C++
-/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.cpp	1362066652	0	/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.cpp
-/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.h	1362590958	1	/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.h
+/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.cpp	1362757486	0	/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.cpp
+/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.h	1362758796	1	/media/ssaury1/BUF/Work/Aessent/Modules/aes220/Progs/Release/Sources/API/aes220_API.h
diff --git a/NaturalDocs/API/Data/IndexInfo.nd b/NaturalDocs/API/Data/IndexInfo.nd
index d1a7468..521d193 100644
Binary files a/NaturalDocs/API/Data/IndexInfo.nd and b/NaturalDocs/API/Data/IndexInfo.nd differ
diff --git a/NaturalDocs/API/Data/SymbolTable.nd b/NaturalDocs/API/Data/SymbolTable.nd
index eacb50c..38bf958 100644
Binary files a/NaturalDocs/API/Data/SymbolTable.nd and b/NaturalDocs/API/Data/SymbolTable.nd differ
