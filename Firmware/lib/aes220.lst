                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Thu Feb 28 13:14:40 2013
                              5 ;--------------------------------------------------------
                              6 	.module aes220
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _setUserPinsDir_PARM_2
                             13 	.globl _EIPX6
                             14 	.globl _EIPX5
                             15 	.globl _EIPX4
                             16 	.globl _PI2C
                             17 	.globl _PUSB
                             18 	.globl _EIEX6
                             19 	.globl _EIEX5
                             20 	.globl _EIEX4
                             21 	.globl _EI2C
                             22 	.globl _EUSB
                             23 	.globl _SMOD1
                             24 	.globl _ERESI
                             25 	.globl _RESI
                             26 	.globl _INT6
                             27 	.globl _CY
                             28 	.globl _AC
                             29 	.globl _F0
                             30 	.globl _RS1
                             31 	.globl _RS0
                             32 	.globl _OV
                             33 	.globl _FL
                             34 	.globl _P
                             35 	.globl _TF2
                             36 	.globl _EXF2
                             37 	.globl _RCLK
                             38 	.globl _TCLK
                             39 	.globl _EXEN2
                             40 	.globl _TR2
                             41 	.globl _C_T2
                             42 	.globl _CP_RL2
                             43 	.globl _SM01
                             44 	.globl _SM11
                             45 	.globl _SM21
                             46 	.globl _REN1
                             47 	.globl _TB81
                             48 	.globl _RB81
                             49 	.globl _TI1
                             50 	.globl _RI1
                             51 	.globl _PS1
                             52 	.globl _PT2
                             53 	.globl _PS0
                             54 	.globl _PT1
                             55 	.globl _PX1
                             56 	.globl _PT0
                             57 	.globl _PX0
                             58 	.globl _PD7
                             59 	.globl _PD6
                             60 	.globl _PD5
                             61 	.globl _PD4
                             62 	.globl _PD3
                             63 	.globl _PD2
                             64 	.globl _PD1
                             65 	.globl _PD0
                             66 	.globl _EA
                             67 	.globl _ES1
                             68 	.globl _ET2
                             69 	.globl _ES0
                             70 	.globl _ET1
                             71 	.globl _EX1
                             72 	.globl _ET0
                             73 	.globl _EX0
                             74 	.globl _PC7
                             75 	.globl _PC6
                             76 	.globl _PC5
                             77 	.globl _PC4
                             78 	.globl _PC3
                             79 	.globl _PC2
                             80 	.globl _PC1
                             81 	.globl _PC0
                             82 	.globl _SM0
                             83 	.globl _SM1
                             84 	.globl _SM2
                             85 	.globl _REN
                             86 	.globl _TB8
                             87 	.globl _RB8
                             88 	.globl _TI
                             89 	.globl _RI
                             90 	.globl _PB7
                             91 	.globl _PB6
                             92 	.globl _PB5
                             93 	.globl _PB4
                             94 	.globl _PB3
                             95 	.globl _PB2
                             96 	.globl _PB1
                             97 	.globl _PB0
                             98 	.globl _TF1
                             99 	.globl _TR1
                            100 	.globl _TF0
                            101 	.globl _TR0
                            102 	.globl _IE1
                            103 	.globl _IT1
                            104 	.globl _IE0
                            105 	.globl _IT0
                            106 	.globl _PA7
                            107 	.globl _PA6
                            108 	.globl _PA5
                            109 	.globl _PA4
                            110 	.globl _PA3
                            111 	.globl _PA2
                            112 	.globl _PA1
                            113 	.globl _PA0
                            114 	.globl _EIP
                            115 	.globl _B
                            116 	.globl _EIE
                            117 	.globl _ACC
                            118 	.globl _EICON
                            119 	.globl _PSW
                            120 	.globl _TH2
                            121 	.globl _TL2
                            122 	.globl _RCAP2H
                            123 	.globl _RCAP2L
                            124 	.globl _T2CON
                            125 	.globl _SBUF1
                            126 	.globl _SCON1
                            127 	.globl _GPIFSGLDATLNOX
                            128 	.globl _GPIFSGLDATLX
                            129 	.globl _GPIFSGLDATH
                            130 	.globl _GPIFTRIG
                            131 	.globl _EP01STAT
                            132 	.globl _IP
                            133 	.globl _OEE
                            134 	.globl _OED
                            135 	.globl _OEC
                            136 	.globl _OEB
                            137 	.globl _OEA
                            138 	.globl _IOE
                            139 	.globl _IOD
                            140 	.globl _AUTOPTRSETUP
                            141 	.globl _EP68FIFOFLGS
                            142 	.globl _EP24FIFOFLGS
                            143 	.globl _EP2468STAT
                            144 	.globl _IE
                            145 	.globl _INT4CLR
                            146 	.globl _INT2CLR
                            147 	.globl _IOC
                            148 	.globl _AUTOPTRL2
                            149 	.globl _AUTOPTRH2
                            150 	.globl _AUTOPTRL1
                            151 	.globl _AUTOPTRH1
                            152 	.globl _SBUF0
                            153 	.globl _SCON0
                            154 	.globl __XPAGE
                            155 	.globl _EXIF
                            156 	.globl _IOB
                            157 	.globl _CKCON
                            158 	.globl _TH1
                            159 	.globl _TH0
                            160 	.globl _TL1
                            161 	.globl _TL0
                            162 	.globl _TMOD
                            163 	.globl _TCON
                            164 	.globl _PCON
                            165 	.globl _DPS
                            166 	.globl _DPH1
                            167 	.globl _DPL1
                            168 	.globl _DPH
                            169 	.globl _DPL
                            170 	.globl _SP
                            171 	.globl _IOA
                            172 	.globl _D5OFF
                            173 	.globl _D5ON
                            174 	.globl _D4OFF
                            175 	.globl _D4ON
                            176 	.globl _D3OFF
                            177 	.globl _D3ON
                            178 	.globl _D2OFF
                            179 	.globl _D2ON
                            180 	.globl _GPCR2
                            181 	.globl _ECC2B2
                            182 	.globl _ECC2B1
                            183 	.globl _ECC2B0
                            184 	.globl _ECC1B2
                            185 	.globl _ECC1B1
                            186 	.globl _ECC1B0
                            187 	.globl _ECCRESET
                            188 	.globl _ECCCFG
                            189 	.globl _EP8FIFOBUF
                            190 	.globl _EP6FIFOBUF
                            191 	.globl _EP4FIFOBUF
                            192 	.globl _EP2FIFOBUF
                            193 	.globl _EP1INBUF
                            194 	.globl _EP1OUTBUF
                            195 	.globl _EP0BUF
                            196 	.globl _UDMACRCQUAL
                            197 	.globl _UDMACRCL
                            198 	.globl _UDMACRCH
                            199 	.globl _GPIFHOLDAMOUNT
                            200 	.globl _FLOWSTBHPERIOD
                            201 	.globl _FLOWSTBEDGE
                            202 	.globl _FLOWSTB
                            203 	.globl _FLOWHOLDOFF
                            204 	.globl _FLOWEQ1CTL
                            205 	.globl _FLOWEQ0CTL
                            206 	.globl _FLOWLOGIC
                            207 	.globl _FLOWSTATE
                            208 	.globl _GPIFABORT
                            209 	.globl _GPIFREADYSTAT
                            210 	.globl _GPIFREADYCFG
                            211 	.globl _XGPIFSGLDATLNOX
                            212 	.globl _XGPIFSGLDATLX
                            213 	.globl _XGPIFSGLDATH
                            214 	.globl _EP8GPIFTRIG
                            215 	.globl _EP8GPIFPFSTOP
                            216 	.globl _EP8GPIFFLGSEL
                            217 	.globl _EP6GPIFTRIG
                            218 	.globl _EP6GPIFPFSTOP
                            219 	.globl _EP6GPIFFLGSEL
                            220 	.globl _EP4GPIFTRIG
                            221 	.globl _EP4GPIFPFSTOP
                            222 	.globl _EP4GPIFFLGSEL
                            223 	.globl _EP2GPIFTRIG
                            224 	.globl _EP2GPIFPFSTOP
                            225 	.globl _EP2GPIFFLGSEL
                            226 	.globl _GPIFTCB0
                            227 	.globl _GPIFTCB1
                            228 	.globl _GPIFTCB2
                            229 	.globl _GPIFTCB3
                            230 	.globl _GPIFADRL
                            231 	.globl _GPIFADRH
                            232 	.globl _GPIFCTLCFG
                            233 	.globl _GPIFIDLECTL
                            234 	.globl _GPIFIDLECS
                            235 	.globl _GPIFWFSELECT
                            236 	.globl _SETUPDAT
                            237 	.globl _SUDPTRCTL
                            238 	.globl _SUDPTRL
                            239 	.globl _SUDPTRH
                            240 	.globl _EP8FIFOBCL
                            241 	.globl _EP8FIFOBCH
                            242 	.globl _EP6FIFOBCL
                            243 	.globl _EP6FIFOBCH
                            244 	.globl _EP4FIFOBCL
                            245 	.globl _EP4FIFOBCH
                            246 	.globl _EP2FIFOBCL
                            247 	.globl _EP2FIFOBCH
                            248 	.globl _EP8FIFOFLGS
                            249 	.globl _EP6FIFOFLGS
                            250 	.globl _EP4FIFOFLGS
                            251 	.globl _EP2FIFOFLGS
                            252 	.globl _EP8CS
                            253 	.globl _EP6CS
                            254 	.globl _EP4CS
                            255 	.globl _EP2CS
                            256 	.globl _EP1INCS
                            257 	.globl _EP1OUTCS
                            258 	.globl _EP0CS
                            259 	.globl _EP8BCL
                            260 	.globl _EP8BCH
                            261 	.globl _EP6BCL
                            262 	.globl _EP6BCH
                            263 	.globl _EP4BCL
                            264 	.globl _EP4BCH
                            265 	.globl _EP2BCL
                            266 	.globl _EP2BCH
                            267 	.globl _EP1INBC
                            268 	.globl _EP1OUTBC
                            269 	.globl _EP0BCL
                            270 	.globl _EP0BCH
                            271 	.globl _FNADDR
                            272 	.globl _MICROFRAME
                            273 	.globl _USBFRAMEL
                            274 	.globl _USBFRAMEH
                            275 	.globl _TOGCTL
                            276 	.globl _WAKEUPCS
                            277 	.globl _SUSPEND
                            278 	.globl _USBCS
                            279 	.globl _XAUTODAT2
                            280 	.globl _XAUTODAT1
                            281 	.globl _I2CTL
                            282 	.globl _I2DAT
                            283 	.globl _I2CS
                            284 	.globl _PORTECFG
                            285 	.globl _PORTCCFG
                            286 	.globl _PORTACFG
                            287 	.globl _INTSETUP
                            288 	.globl _INT4IVEC
                            289 	.globl _INT2IVEC
                            290 	.globl _CLRERRCNT
                            291 	.globl _ERRCNTLIM
                            292 	.globl _USBERRIRQ
                            293 	.globl _USBERRIE
                            294 	.globl _GPIFIRQ
                            295 	.globl _GPIFIE
                            296 	.globl _EPIRQ
                            297 	.globl _EPIE
                            298 	.globl _USBIRQ
                            299 	.globl _USBIE
                            300 	.globl _NAKIRQ
                            301 	.globl _NAKIE
                            302 	.globl _IBNIRQ
                            303 	.globl _IBNIE
                            304 	.globl _EP8FIFOIRQ
                            305 	.globl _EP8FIFOIE
                            306 	.globl _EP6FIFOIRQ
                            307 	.globl _EP6FIFOIE
                            308 	.globl _EP4FIFOIRQ
                            309 	.globl _EP4FIFOIE
                            310 	.globl _EP2FIFOIRQ
                            311 	.globl _EP2FIFOIE
                            312 	.globl _OUTPKTEND
                            313 	.globl _INPKTEND
                            314 	.globl _EP8ISOINPKTS
                            315 	.globl _EP6ISOINPKTS
                            316 	.globl _EP4ISOINPKTS
                            317 	.globl _EP2ISOINPKTS
                            318 	.globl _EP8FIFOPFL
                            319 	.globl _EP8FIFOPFH
                            320 	.globl _EP6FIFOPFL
                            321 	.globl _EP6FIFOPFH
                            322 	.globl _EP4FIFOPFL
                            323 	.globl _EP4FIFOPFH
                            324 	.globl _EP2FIFOPFL
                            325 	.globl _EP2FIFOPFH
                            326 	.globl _EP8AUTOINLENL
                            327 	.globl _EP8AUTOINLENH
                            328 	.globl _EP6AUTOINLENL
                            329 	.globl _EP6AUTOINLENH
                            330 	.globl _EP4AUTOINLENL
                            331 	.globl _EP4AUTOINLENH
                            332 	.globl _EP2AUTOINLENL
                            333 	.globl _EP2AUTOINLENH
                            334 	.globl _EP8FIFOCFG
                            335 	.globl _EP6FIFOCFG
                            336 	.globl _EP4FIFOCFG
                            337 	.globl _EP2FIFOCFG
                            338 	.globl _EP8CFG
                            339 	.globl _EP6CFG
                            340 	.globl _EP4CFG
                            341 	.globl _EP2CFG
                            342 	.globl _EP1INCFG
                            343 	.globl _EP1OUTCFG
                            344 	.globl _REVCTL
                            345 	.globl _REVID
                            346 	.globl _FIFOPINPOLAR
                            347 	.globl _UART230
                            348 	.globl _BPADDRL
                            349 	.globl _BPADDRH
                            350 	.globl _BREAKPT
                            351 	.globl _FIFORESET
                            352 	.globl _PINFLAGSCD
                            353 	.globl _PINFLAGSAB
                            354 	.globl _IFCONFIG
                            355 	.globl _CPUCS
                            356 	.globl _RES_WAVEDATA_END
                            357 	.globl _GPIF_WAVE_DATA
                            358 	.globl _execFlashCmd_PARM_2
                            359 	.globl _writeEeprom_PARM_4
                            360 	.globl _writeEeprom_PARM_3
                            361 	.globl _writeEeprom_PARM_2
                            362 	.globl _CONFIGURE_FPGA
                            363 	.globl _START_CONFIG_PROC
                            364 	.globl _assertSoftReset
                            365 	.globl _clearSoftReset
                            366 	.globl _startFpga
                            367 	.globl _setupFpgaConf
                            368 	.globl _configureFpga
                            369 	.globl _setupFpgaProg
                            370 	.globl _progFpga
                            371 	.globl _setUserPinsDir
                            372 	.globl _setUserPins
                            373 	.globl _setMode
                            374 	.globl _writeEeprom
                            375 	.globl _execFlashCmd
                            376 	.globl _transferSpiByte
                            377 	.globl _readBoardStatusRegister
                            378 ;--------------------------------------------------------
                            379 ; special function registers
                            380 ;--------------------------------------------------------
                            381 	.area RSEG    (DATA)
                    0080    382 _IOA	=	0x0080
                    0081    383 _SP	=	0x0081
                    0082    384 _DPL	=	0x0082
                    0083    385 _DPH	=	0x0083
                    0084    386 _DPL1	=	0x0084
                    0085    387 _DPH1	=	0x0085
                    0086    388 _DPS	=	0x0086
                    0087    389 _PCON	=	0x0087
                    0088    390 _TCON	=	0x0088
                    0089    391 _TMOD	=	0x0089
                    008A    392 _TL0	=	0x008a
                    008B    393 _TL1	=	0x008b
                    008C    394 _TH0	=	0x008c
                    008D    395 _TH1	=	0x008d
                    008E    396 _CKCON	=	0x008e
                    0090    397 _IOB	=	0x0090
                    0091    398 _EXIF	=	0x0091
                    0092    399 __XPAGE	=	0x0092
                    0098    400 _SCON0	=	0x0098
                    0099    401 _SBUF0	=	0x0099
                    009A    402 _AUTOPTRH1	=	0x009a
                    009B    403 _AUTOPTRL1	=	0x009b
                    009D    404 _AUTOPTRH2	=	0x009d
                    009E    405 _AUTOPTRL2	=	0x009e
                    00A0    406 _IOC	=	0x00a0
                    00A1    407 _INT2CLR	=	0x00a1
                    00A2    408 _INT4CLR	=	0x00a2
                    00A8    409 _IE	=	0x00a8
                    00AA    410 _EP2468STAT	=	0x00aa
                    00AB    411 _EP24FIFOFLGS	=	0x00ab
                    00AC    412 _EP68FIFOFLGS	=	0x00ac
                    00AF    413 _AUTOPTRSETUP	=	0x00af
                    00B0    414 _IOD	=	0x00b0
                    00B1    415 _IOE	=	0x00b1
                    00B2    416 _OEA	=	0x00b2
                    00B3    417 _OEB	=	0x00b3
                    00B4    418 _OEC	=	0x00b4
                    00B5    419 _OED	=	0x00b5
                    00B6    420 _OEE	=	0x00b6
                    00B8    421 _IP	=	0x00b8
                    00BA    422 _EP01STAT	=	0x00ba
                    00BB    423 _GPIFTRIG	=	0x00bb
                    00BD    424 _GPIFSGLDATH	=	0x00bd
                    00BE    425 _GPIFSGLDATLX	=	0x00be
                    00BF    426 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    427 _SCON1	=	0x00c0
                    00C1    428 _SBUF1	=	0x00c1
                    00C8    429 _T2CON	=	0x00c8
                    00CA    430 _RCAP2L	=	0x00ca
                    00CB    431 _RCAP2H	=	0x00cb
                    00CC    432 _TL2	=	0x00cc
                    00CD    433 _TH2	=	0x00cd
                    00D0    434 _PSW	=	0x00d0
                    00D8    435 _EICON	=	0x00d8
                    00E0    436 _ACC	=	0x00e0
                    00E8    437 _EIE	=	0x00e8
                    00F0    438 _B	=	0x00f0
                    00F8    439 _EIP	=	0x00f8
                            440 ;--------------------------------------------------------
                            441 ; special function bits
                            442 ;--------------------------------------------------------
                            443 	.area RSEG    (DATA)
                    0080    444 _PA0	=	0x0080
                    0081    445 _PA1	=	0x0081
                    0082    446 _PA2	=	0x0082
                    0083    447 _PA3	=	0x0083
                    0084    448 _PA4	=	0x0084
                    0085    449 _PA5	=	0x0085
                    0086    450 _PA6	=	0x0086
                    0087    451 _PA7	=	0x0087
                    0088    452 _IT0	=	0x0088
                    0089    453 _IE0	=	0x0089
                    008A    454 _IT1	=	0x008a
                    008B    455 _IE1	=	0x008b
                    008C    456 _TR0	=	0x008c
                    008D    457 _TF0	=	0x008d
                    008E    458 _TR1	=	0x008e
                    008F    459 _TF1	=	0x008f
                    0090    460 _PB0	=	0x0090
                    0091    461 _PB1	=	0x0091
                    0092    462 _PB2	=	0x0092
                    0093    463 _PB3	=	0x0093
                    0094    464 _PB4	=	0x0094
                    0095    465 _PB5	=	0x0095
                    0096    466 _PB6	=	0x0096
                    0097    467 _PB7	=	0x0097
                    0098    468 _RI	=	0x0098
                    0099    469 _TI	=	0x0099
                    009A    470 _RB8	=	0x009a
                    009B    471 _TB8	=	0x009b
                    009C    472 _REN	=	0x009c
                    009D    473 _SM2	=	0x009d
                    009E    474 _SM1	=	0x009e
                    009F    475 _SM0	=	0x009f
                    00A0    476 _PC0	=	0x00a0
                    00A1    477 _PC1	=	0x00a1
                    00A2    478 _PC2	=	0x00a2
                    00A3    479 _PC3	=	0x00a3
                    00A4    480 _PC4	=	0x00a4
                    00A5    481 _PC5	=	0x00a5
                    00A6    482 _PC6	=	0x00a6
                    00A7    483 _PC7	=	0x00a7
                    00A8    484 _EX0	=	0x00a8
                    00A9    485 _ET0	=	0x00a9
                    00AA    486 _EX1	=	0x00aa
                    00AB    487 _ET1	=	0x00ab
                    00AC    488 _ES0	=	0x00ac
                    00AD    489 _ET2	=	0x00ad
                    00AE    490 _ES1	=	0x00ae
                    00AF    491 _EA	=	0x00af
                    00B0    492 _PD0	=	0x00b0
                    00B1    493 _PD1	=	0x00b1
                    00B2    494 _PD2	=	0x00b2
                    00B3    495 _PD3	=	0x00b3
                    00B4    496 _PD4	=	0x00b4
                    00B5    497 _PD5	=	0x00b5
                    00B6    498 _PD6	=	0x00b6
                    00B7    499 _PD7	=	0x00b7
                    00B8    500 _PX0	=	0x00b8
                    00B9    501 _PT0	=	0x00b9
                    00BA    502 _PX1	=	0x00ba
                    00BB    503 _PT1	=	0x00bb
                    00BC    504 _PS0	=	0x00bc
                    00BD    505 _PT2	=	0x00bd
                    00BE    506 _PS1	=	0x00be
                    00C0    507 _RI1	=	0x00c0
                    00C1    508 _TI1	=	0x00c1
                    00C2    509 _RB81	=	0x00c2
                    00C3    510 _TB81	=	0x00c3
                    00C4    511 _REN1	=	0x00c4
                    00C5    512 _SM21	=	0x00c5
                    00C6    513 _SM11	=	0x00c6
                    00C7    514 _SM01	=	0x00c7
                    00C8    515 _CP_RL2	=	0x00c8
                    00C9    516 _C_T2	=	0x00c9
                    00CA    517 _TR2	=	0x00ca
                    00CB    518 _EXEN2	=	0x00cb
                    00CC    519 _TCLK	=	0x00cc
                    00CD    520 _RCLK	=	0x00cd
                    00CE    521 _EXF2	=	0x00ce
                    00CF    522 _TF2	=	0x00cf
                    00D0    523 _P	=	0x00d0
                    00D1    524 _FL	=	0x00d1
                    00D2    525 _OV	=	0x00d2
                    00D3    526 _RS0	=	0x00d3
                    00D4    527 _RS1	=	0x00d4
                    00D5    528 _F0	=	0x00d5
                    00D6    529 _AC	=	0x00d6
                    00D7    530 _CY	=	0x00d7
                    00DB    531 _INT6	=	0x00db
                    00DC    532 _RESI	=	0x00dc
                    00DD    533 _ERESI	=	0x00dd
                    00DF    534 _SMOD1	=	0x00df
                    00E8    535 _EUSB	=	0x00e8
                    00E9    536 _EI2C	=	0x00e9
                    00EA    537 _EIEX4	=	0x00ea
                    00EB    538 _EIEX5	=	0x00eb
                    00EC    539 _EIEX6	=	0x00ec
                    00F8    540 _PUSB	=	0x00f8
                    00F9    541 _PI2C	=	0x00f9
                    00FA    542 _EIPX4	=	0x00fa
                    00FB    543 _EIPX5	=	0x00fb
                    00FC    544 _EIPX6	=	0x00fc
                            545 ;--------------------------------------------------------
                            546 ; overlayable register banks
                            547 ;--------------------------------------------------------
                            548 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     549 	.ds 8
                            550 ;--------------------------------------------------------
                            551 ; internal ram data
                            552 ;--------------------------------------------------------
                            553 	.area DSEG    (DATA)
   0000                     554 _START_CONFIG_PROC::
   0000                     555 	.ds 1
   0001                     556 _CONFIGURE_FPGA::
   0001                     557 	.ds 1
   0002                     558 _configureFpga_dataLen_1_1:
   0002                     559 	.ds 4
   0006                     560 _configureFpga_bytes_1_1:
   0006                     561 	.ds 2
   0008                     562 _progFpga_bytes_1_1:
   0008                     563 	.ds 2
   000A                     564 _writeEeprom_PARM_2:
   000A                     565 	.ds 2
   000C                     566 _writeEeprom_PARM_3:
   000C                     567 	.ds 2
   000E                     568 _writeEeprom_PARM_4:
   000E                     569 	.ds 3
   0011                     570 _writeEeprom_prom_addr_1_1:
   0011                     571 	.ds 1
   0012                     572 _writeEeprom_addr_buffer_1_1:
   0012                     573 	.ds 2
   0014                     574 _writeEeprom_last_data_ptr_1_1:
   0014                     575 	.ds 3
   0017                     576 _execFlashCmd_PARM_2:
   0017                     577 	.ds 2
   0019                     578 _readBoardStatusRegister_buf_1_1:
   0019                     579 	.ds 1
                            580 ;--------------------------------------------------------
                            581 ; overlayable items in internal ram 
                            582 ;--------------------------------------------------------
                            583 	.area	OSEG    (OVR,DATA)
   0000                     584 _setUserPinsDir_PARM_2::
   0000                     585 	.ds 1
                            586 	.area	OSEG    (OVR,DATA)
                            587 	.area	OSEG    (OVR,DATA)
                            588 	.area	OSEG    (OVR,DATA)
                            589 ;--------------------------------------------------------
                            590 ; indirectly addressable internal ram data
                            591 ;--------------------------------------------------------
                            592 	.area ISEG    (DATA)
                            593 ;--------------------------------------------------------
                            594 ; absolute internal ram data
                            595 ;--------------------------------------------------------
                            596 	.area IABS    (ABS,DATA)
                            597 	.area IABS    (ABS,DATA)
                            598 ;--------------------------------------------------------
                            599 ; bit data
                            600 ;--------------------------------------------------------
                            601 	.area BSEG    (BIT)
                            602 ;--------------------------------------------------------
                            603 ; paged external ram data
                            604 ;--------------------------------------------------------
                            605 	.area PSEG    (PAG,XDATA)
                            606 ;--------------------------------------------------------
                            607 ; external ram data
                            608 ;--------------------------------------------------------
                            609 	.area XSEG    (XDATA)
                    E400    610 _GPIF_WAVE_DATA	=	0xe400
                    E480    611 _RES_WAVEDATA_END	=	0xe480
                    E600    612 _CPUCS	=	0xe600
                    E601    613 _IFCONFIG	=	0xe601
                    E602    614 _PINFLAGSAB	=	0xe602
                    E603    615 _PINFLAGSCD	=	0xe603
                    E604    616 _FIFORESET	=	0xe604
                    E605    617 _BREAKPT	=	0xe605
                    E606    618 _BPADDRH	=	0xe606
                    E607    619 _BPADDRL	=	0xe607
                    E608    620 _UART230	=	0xe608
                    E609    621 _FIFOPINPOLAR	=	0xe609
                    E60A    622 _REVID	=	0xe60a
                    E60B    623 _REVCTL	=	0xe60b
                    E610    624 _EP1OUTCFG	=	0xe610
                    E611    625 _EP1INCFG	=	0xe611
                    E612    626 _EP2CFG	=	0xe612
                    E613    627 _EP4CFG	=	0xe613
                    E614    628 _EP6CFG	=	0xe614
                    E615    629 _EP8CFG	=	0xe615
                    E618    630 _EP2FIFOCFG	=	0xe618
                    E619    631 _EP4FIFOCFG	=	0xe619
                    E61A    632 _EP6FIFOCFG	=	0xe61a
                    E61B    633 _EP8FIFOCFG	=	0xe61b
                    E620    634 _EP2AUTOINLENH	=	0xe620
                    E621    635 _EP2AUTOINLENL	=	0xe621
                    E622    636 _EP4AUTOINLENH	=	0xe622
                    E623    637 _EP4AUTOINLENL	=	0xe623
                    E624    638 _EP6AUTOINLENH	=	0xe624
                    E625    639 _EP6AUTOINLENL	=	0xe625
                    E626    640 _EP8AUTOINLENH	=	0xe626
                    E627    641 _EP8AUTOINLENL	=	0xe627
                    E630    642 _EP2FIFOPFH	=	0xe630
                    E631    643 _EP2FIFOPFL	=	0xe631
                    E632    644 _EP4FIFOPFH	=	0xe632
                    E633    645 _EP4FIFOPFL	=	0xe633
                    E634    646 _EP6FIFOPFH	=	0xe634
                    E635    647 _EP6FIFOPFL	=	0xe635
                    E636    648 _EP8FIFOPFH	=	0xe636
                    E637    649 _EP8FIFOPFL	=	0xe637
                    E640    650 _EP2ISOINPKTS	=	0xe640
                    E641    651 _EP4ISOINPKTS	=	0xe641
                    E642    652 _EP6ISOINPKTS	=	0xe642
                    E643    653 _EP8ISOINPKTS	=	0xe643
                    E648    654 _INPKTEND	=	0xe648
                    E649    655 _OUTPKTEND	=	0xe649
                    E650    656 _EP2FIFOIE	=	0xe650
                    E651    657 _EP2FIFOIRQ	=	0xe651
                    E652    658 _EP4FIFOIE	=	0xe652
                    E653    659 _EP4FIFOIRQ	=	0xe653
                    E654    660 _EP6FIFOIE	=	0xe654
                    E655    661 _EP6FIFOIRQ	=	0xe655
                    E656    662 _EP8FIFOIE	=	0xe656
                    E657    663 _EP8FIFOIRQ	=	0xe657
                    E658    664 _IBNIE	=	0xe658
                    E659    665 _IBNIRQ	=	0xe659
                    E65A    666 _NAKIE	=	0xe65a
                    E65B    667 _NAKIRQ	=	0xe65b
                    E65C    668 _USBIE	=	0xe65c
                    E65D    669 _USBIRQ	=	0xe65d
                    E65E    670 _EPIE	=	0xe65e
                    E65F    671 _EPIRQ	=	0xe65f
                    E660    672 _GPIFIE	=	0xe660
                    E661    673 _GPIFIRQ	=	0xe661
                    E662    674 _USBERRIE	=	0xe662
                    E663    675 _USBERRIRQ	=	0xe663
                    E664    676 _ERRCNTLIM	=	0xe664
                    E665    677 _CLRERRCNT	=	0xe665
                    E666    678 _INT2IVEC	=	0xe666
                    E667    679 _INT4IVEC	=	0xe667
                    E668    680 _INTSETUP	=	0xe668
                    E670    681 _PORTACFG	=	0xe670
                    E671    682 _PORTCCFG	=	0xe671
                    E672    683 _PORTECFG	=	0xe672
                    E678    684 _I2CS	=	0xe678
                    E679    685 _I2DAT	=	0xe679
                    E67A    686 _I2CTL	=	0xe67a
                    E67B    687 _XAUTODAT1	=	0xe67b
                    E67C    688 _XAUTODAT2	=	0xe67c
                    E680    689 _USBCS	=	0xe680
                    E681    690 _SUSPEND	=	0xe681
                    E682    691 _WAKEUPCS	=	0xe682
                    E683    692 _TOGCTL	=	0xe683
                    E684    693 _USBFRAMEH	=	0xe684
                    E685    694 _USBFRAMEL	=	0xe685
                    E686    695 _MICROFRAME	=	0xe686
                    E687    696 _FNADDR	=	0xe687
                    E68A    697 _EP0BCH	=	0xe68a
                    E68B    698 _EP0BCL	=	0xe68b
                    E68D    699 _EP1OUTBC	=	0xe68d
                    E68F    700 _EP1INBC	=	0xe68f
                    E690    701 _EP2BCH	=	0xe690
                    E691    702 _EP2BCL	=	0xe691
                    E694    703 _EP4BCH	=	0xe694
                    E695    704 _EP4BCL	=	0xe695
                    E698    705 _EP6BCH	=	0xe698
                    E699    706 _EP6BCL	=	0xe699
                    E69C    707 _EP8BCH	=	0xe69c
                    E69D    708 _EP8BCL	=	0xe69d
                    E6A0    709 _EP0CS	=	0xe6a0
                    E6A1    710 _EP1OUTCS	=	0xe6a1
                    E6A2    711 _EP1INCS	=	0xe6a2
                    E6A3    712 _EP2CS	=	0xe6a3
                    E6A4    713 _EP4CS	=	0xe6a4
                    E6A5    714 _EP6CS	=	0xe6a5
                    E6A6    715 _EP8CS	=	0xe6a6
                    E6A7    716 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    717 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    718 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    719 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    720 _EP2FIFOBCH	=	0xe6ab
                    E6AC    721 _EP2FIFOBCL	=	0xe6ac
                    E6AD    722 _EP4FIFOBCH	=	0xe6ad
                    E6AE    723 _EP4FIFOBCL	=	0xe6ae
                    E6AF    724 _EP6FIFOBCH	=	0xe6af
                    E6B0    725 _EP6FIFOBCL	=	0xe6b0
                    E6B1    726 _EP8FIFOBCH	=	0xe6b1
                    E6B2    727 _EP8FIFOBCL	=	0xe6b2
                    E6B3    728 _SUDPTRH	=	0xe6b3
                    E6B4    729 _SUDPTRL	=	0xe6b4
                    E6B5    730 _SUDPTRCTL	=	0xe6b5
                    E6B8    731 _SETUPDAT	=	0xe6b8
                    E6C0    732 _GPIFWFSELECT	=	0xe6c0
                    E6C1    733 _GPIFIDLECS	=	0xe6c1
                    E6C2    734 _GPIFIDLECTL	=	0xe6c2
                    E6C3    735 _GPIFCTLCFG	=	0xe6c3
                    E6C4    736 _GPIFADRH	=	0xe6c4
                    E6C5    737 _GPIFADRL	=	0xe6c5
                    E6CE    738 _GPIFTCB3	=	0xe6ce
                    E6CF    739 _GPIFTCB2	=	0xe6cf
                    E6D0    740 _GPIFTCB1	=	0xe6d0
                    E6D1    741 _GPIFTCB0	=	0xe6d1
                    E6D2    742 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    743 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    744 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    745 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    746 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    747 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    748 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    749 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    750 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    751 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    752 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    753 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    754 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    755 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    756 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    757 _GPIFREADYCFG	=	0xe6f3
                    E6F4    758 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    759 _GPIFABORT	=	0xe6f5
                    E6C6    760 _FLOWSTATE	=	0xe6c6
                    E6C7    761 _FLOWLOGIC	=	0xe6c7
                    E6C8    762 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    763 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    764 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    765 _FLOWSTB	=	0xe6cb
                    E6CC    766 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    767 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    768 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    769 _UDMACRCH	=	0xe67d
                    E67E    770 _UDMACRCL	=	0xe67e
                    E67F    771 _UDMACRCQUAL	=	0xe67f
                    E740    772 _EP0BUF	=	0xe740
                    E780    773 _EP1OUTBUF	=	0xe780
                    E7C0    774 _EP1INBUF	=	0xe7c0
                    F000    775 _EP2FIFOBUF	=	0xf000
                    F400    776 _EP4FIFOBUF	=	0xf400
                    F800    777 _EP6FIFOBUF	=	0xf800
                    FC00    778 _EP8FIFOBUF	=	0xfc00
                    E628    779 _ECCCFG	=	0xe628
                    E629    780 _ECCRESET	=	0xe629
                    E62A    781 _ECC1B0	=	0xe62a
                    E62B    782 _ECC1B1	=	0xe62b
                    E62C    783 _ECC1B2	=	0xe62c
                    E62D    784 _ECC2B0	=	0xe62d
                    E62E    785 _ECC2B1	=	0xe62e
                    E62F    786 _ECC2B2	=	0xe62f
                    E50D    787 _GPCR2	=	0xe50d
                    8800    788 _D2ON	=	0x8800
                    8000    789 _D2OFF	=	0x8000
                    9800    790 _D3ON	=	0x9800
                    9000    791 _D3OFF	=	0x9000
                    A800    792 _D4ON	=	0xa800
                    A000    793 _D4OFF	=	0xa000
                    B800    794 _D5ON	=	0xb800
                    B000    795 _D5OFF	=	0xb000
                            796 ;--------------------------------------------------------
                            797 ; absolute external ram data
                            798 ;--------------------------------------------------------
                            799 	.area XABS    (ABS,XDATA)
                            800 ;--------------------------------------------------------
                            801 ; external initialized ram data
                            802 ;--------------------------------------------------------
                            803 	.area XISEG   (XDATA)
                            804 	.area HOME    (CODE)
                            805 	.area GSINIT0 (CODE)
                            806 	.area GSINIT1 (CODE)
                            807 	.area GSINIT2 (CODE)
                            808 	.area GSINIT3 (CODE)
                            809 	.area GSINIT4 (CODE)
                            810 	.area GSINIT5 (CODE)
                            811 	.area GSINIT  (CODE)
                            812 	.area GSFINAL (CODE)
                            813 	.area CSEG    (CODE)
                            814 ;--------------------------------------------------------
                            815 ; global & static initialisations
                            816 ;--------------------------------------------------------
                            817 	.area HOME    (CODE)
                            818 	.area GSINIT  (CODE)
                            819 	.area GSFINAL (CODE)
                            820 	.area GSINIT  (CODE)
                            821 ;	../include/aes220.h:213: BOOL START_CONFIG_PROC = TRUE;
   0000 75*00 01            822 	mov	_START_CONFIG_PROC,#0x01
                            823 ;	../include/aes220.h:214: BOOL CONFIGURE_FPGA = FALSE;
   0003 75*01 00            824 	mov	_CONFIGURE_FPGA,#0x00
                            825 ;--------------------------------------------------------
                            826 ; Home
                            827 ;--------------------------------------------------------
                            828 	.area HOME    (CODE)
                            829 	.area HOME    (CODE)
                            830 ;--------------------------------------------------------
                            831 ; code
                            832 ;--------------------------------------------------------
                            833 	.area CSEG    (CODE)
                            834 ;------------------------------------------------------------
                            835 ;Allocation info for local variables in function 'assertSoftReset'
                            836 ;------------------------------------------------------------
                            837 ;------------------------------------------------------------
                            838 ;	aes220.c:104: void assertSoftReset()
                            839 ;	-----------------------------------------
                            840 ;	 function assertSoftReset
                            841 ;	-----------------------------------------
   0000                     842 _assertSoftReset:
                    0002    843 	ar2 = 0x02
                    0003    844 	ar3 = 0x03
                    0004    845 	ar4 = 0x04
                    0005    846 	ar5 = 0x05
                    0006    847 	ar6 = 0x06
                    0007    848 	ar7 = 0x07
                    0000    849 	ar0 = 0x00
                    0001    850 	ar1 = 0x01
                            851 ;	aes220.c:106: OEA |= 0x01; // Make sure PA0 is an output
   0000 43 B2 01            852 	orl	_OEA,#0x01
                            853 ;	aes220.c:107: PA0 = 1; // Reset active level = 1
   0003 D2 80               854 	setb	_PA0
   0005 22                  855 	ret
                            856 ;------------------------------------------------------------
                            857 ;Allocation info for local variables in function 'clearSoftReset'
                            858 ;------------------------------------------------------------
                            859 ;------------------------------------------------------------
                            860 ;	aes220.c:110: void clearSoftReset()
                            861 ;	-----------------------------------------
                            862 ;	 function clearSoftReset
                            863 ;	-----------------------------------------
   0006                     864 _clearSoftReset:
                            865 ;	aes220.c:112: OEA |= 0x01; // Make sure PA0 is an output
   0006 43 B2 01            866 	orl	_OEA,#0x01
                            867 ;	aes220.c:113: PA0 = 0; // Reset active level = 1
   0009 C2 80               868 	clr	_PA0
   000B 22                  869 	ret
                            870 ;------------------------------------------------------------
                            871 ;Allocation info for local variables in function 'startFpga'
                            872 ;------------------------------------------------------------
                            873 ;fpgaProgd                 Allocated to registers r2 
                            874 ;------------------------------------------------------------
                            875 ;	aes220.c:116: BOOL startFpga() 
                            876 ;	-----------------------------------------
                            877 ;	 function startFpga
                            878 ;	-----------------------------------------
   000C                     879 _startFpga:
                            880 ;	aes220.c:123: OEA = 0x00;
   000C 75 B2 00            881 	mov	_OEA,#0x00
                            882 ;	aes220.c:124: OEB = 0b11101111; // set PB0/1/2/3/5/6/7 as outputs
   000F 75 B3 EF            883 	mov	_OEB,#0xEF
                            884 ;	aes220.c:125: OED = 0b10001101; // set PD0/2/3/7 as outputs
   0012 75 B5 8D            885 	mov	_OED,#0x8D
                            886 ;	aes220.c:126: SUSPEND_F = 0;
   0015 C2 B7               887 	clr	_PD7
                            888 ;	aes220.c:127: PROG_B = 0; // Reset the FPGA (hard reset)
   0017 C2 B0               889 	clr	_PD0
                            890 ;	aes220.c:131: M2 = 0; 
   0019 C2 91               891 	clr	_PB1
                            892 ;	aes220.c:132: M1 = 1;
   001B D2 95               893 	setb	_PB5
                            894 ;	aes220.c:133: M0 = 1;
   001D D2 93               895 	setb	_PB3
                            896 ;	aes220.c:134: VS2 = 1;
   001F D2 92               897 	setb	_PB2
                            898 ;	aes220.c:135: VS1 = 1;
   0021 D2 97               899 	setb	_PB7
                            900 ;	aes220.c:136: VS0 = 1;
   0023 D2 96               901 	setb	_PB6
                            902 ;	aes220.c:137: while (INIT_B != 0) {};
   0025                     903 00101$:
   0025 20 B5 FD            904 	jb	_PD5,00101$
                            905 ;	aes220.c:138: PROG_B = 1; // release reset (hard)
   0028 D2 B0               906 	setb	_PD0
                            907 ;	aes220.c:140: while (INIT_B != 1) {}; // wait for fpga to do its houskeeping
   002A                     908 00104$:
   002A 30 B5 FD            909 	jnb	_PD5,00104$
                            910 ;	aes220.c:143: delay(200); // 200ms increased from 100ms or aes220b uC hangs
   002D 90 00 C8            911 	mov	dptr,#0x00C8
   0030 12s00r00            912 	lcall	_delay
                            913 ;	aes220.c:145: if (DONE == 1) { fpgaProgd = TRUE; }
   0033 30 B1 04            914 	jnb	_PD1,00108$
   0036 7A 01               915 	mov	r2,#0x01
   0038 80 02               916 	sjmp	00109$
   003A                     917 00108$:
                            918 ;	aes220.c:146: else { fpgaProgd = FALSE; } // Blank Flash or problem during config
   003A 7A 00               919 	mov	r2,#0x00
   003C                     920 00109$:
                            921 ;	aes220.c:150: OEA = 0x00; // Port A as input
   003C 75 B2 00            922 	mov	_OEA,#0x00
                            923 ;	aes220.c:151: OEB = 0x00; // Port B as input
   003F 75 B3 00            924 	mov	_OEB,#0x00
                            925 ;	aes220.c:152: OED = 0x81; // Port D as input save for PROG_B and SUSPEND_F
   0042 75 B5 81            926 	mov	_OED,#0x81
                            927 ;	aes220.c:153: PROG_B = 1;
   0045 D2 B0               928 	setb	_PD0
                            929 ;	aes220.c:154: SUSPEND_F = 0;
   0047 C2 B7               930 	clr	_PD7
                            931 ;	aes220.c:156: return fpgaProgd;
   0049 8A 82               932 	mov	dpl,r2
   004B 22                  933 	ret
                            934 ;------------------------------------------------------------
                            935 ;Allocation info for local variables in function 'setupFpgaConf'
                            936 ;------------------------------------------------------------
                            937 ;fpgaStatus                Allocated to registers r2 
                            938 ;------------------------------------------------------------
                            939 ;	aes220.c:159: BYTE setupFpgaConf() 
                            940 ;	-----------------------------------------
                            941 ;	 function setupFpgaConf
                            942 ;	-----------------------------------------
   004C                     943 _setupFpgaConf:
                            944 ;	aes220.c:164: OED = 0xC5; // set PD0/2/6/7 as outputs, the rest as inputs
   004C 75 B5 C5            945 	mov	_OED,#0xC5
                            946 ;	aes220.c:165: SUSPEND_F = 0;
   004F C2 B7               947 	clr	_PD7
                            948 ;	aes220.c:166: PROG_B = 0; // Reset the FPGA
   0051 C2 B0               949 	clr	_PD0
                            950 ;	aes220.c:167: OEA = 0xFF; // set port A as outputs (SelectMAP data bus)
   0053 75 B2 FF            951 	mov	_OEA,#0xFF
                            952 ;	aes220.c:168: OEB = 0xFF; // set port B as outputs
   0056 75 B3 FF            953 	mov	_OEB,#0xFF
                            954 ;	aes220.c:170: INIT_B = 1;
   0059 D2 B5               955 	setb	_PD5
                            956 ;	aes220.c:171: RDWRB  = 1;
   005B D2 94               957 	setb	_PB4
                            958 ;	aes220.c:172: CSI_B  = 1;    // Chip select signal set permanently to 0 (one 
   005D D2 B2               959 	setb	_PD2
                            960 ;	aes220.c:174: CCLK  = 0;    // sets CCLK low
   005F C2 B6               961 	clr	_PD6
                            962 ;	aes220.c:176: M2    = 1;    // M2 = 1 for SelectMap mode 
   0061 D2 91               963 	setb	_PB1
                            964 ;	aes220.c:177: M1    = 1;    // M1 = 1 for SelectMap mode
   0063 D2 95               965 	setb	_PB5
                            966 ;	aes220.c:178: M0    = 0;    // M0 = 0 for SelectMap mode
   0065 C2 93               967 	clr	_PB3
                            968 ;	aes220.c:181: delay(500); // 500ms
   0067 90 01 F4            969 	mov	dptr,#0x01F4
   006A 12s00r00            970 	lcall	_delay
                            971 ;	aes220.c:182: while (INIT_B != 0) {}; // wait for INIT_B to go low
   006D                     972 00101$:
   006D 20 B5 FD            973 	jb	_PD5,00101$
                            974 ;	aes220.c:183: PROG_B = 1;             // PROG_B back up
   0070 D2 B0               975 	setb	_PD0
                            976 ;	aes220.c:184: while (INIT_B != 1) {}; // Wait for INIT_B to do the same
   0072                     977 00104$:
   0072 30 B5 FD            978 	jnb	_PD5,00104$
                            979 ;	aes220.c:185: RDWRB = 0; // select write mode
   0075 C2 94               980 	clr	_PB4
                            981 ;	aes220.c:186: CSI_B = 0;  // assert chip select
   0077 C2 B2               982 	clr	_PD2
                            983 ;	aes220.c:187: delay(500);
   0079 90 01 F4            984 	mov	dptr,#0x01F4
   007C 12s00r00            985 	lcall	_delay
                            986 ;	aes220.c:188: if (DONE == 0) {fpgaStatus = F_READY;}
   007F 20 B1 04            987 	jb	_PD1,00108$
   0082 7A AD               988 	mov	r2,#0xAD
   0084 80 02               989 	sjmp	00109$
   0086                     990 00108$:
                            991 ;	aes220.c:189: else fpgaStatus = F_NOT_READY;
   0086 7A B3               992 	mov	r2,#0xB3
   0088                     993 00109$:
                            994 ;	aes220.c:190: return fpgaStatus;
   0088 8A 82               995 	mov	dpl,r2
   008A 22                  996 	ret
                            997 ;------------------------------------------------------------
                            998 ;Allocation info for local variables in function 'configureFpga'
                            999 ;------------------------------------------------------------
                           1000 ;dataLen                   Allocated with name '_configureFpga_dataLen_1_1'
                           1001 ;fpgaStatus                Allocated to registers r6 
                           1002 ;bytes                     Allocated with name '_configureFpga_bytes_1_1'
                           1003 ;i                         Allocated to registers r2 r3 
                           1004 ;------------------------------------------------------------
                           1005 ;	aes220.c:193: BYTE configureFpga(DWORD dataLen)
                           1006 ;	-----------------------------------------
                           1007 ;	 function configureFpga
                           1008 ;	-----------------------------------------
   008B                    1009 _configureFpga:
   008B 85 82*02           1010 	mov	_configureFpga_dataLen_1_1,dpl
   008E 85 83*03           1011 	mov	(_configureFpga_dataLen_1_1 + 1),dph
   0091 85 F0*04           1012 	mov	(_configureFpga_dataLen_1_1 + 2),b
   0094 F5*05              1013 	mov	(_configureFpga_dataLen_1_1 + 3),a
                           1014 ;	aes220.c:198: fpgaStatus = setupFpgaConf();
   0096 12s00r4C           1015 	lcall	_setupFpgaConf
   0099 AE 82              1016 	mov	r6,dpl
                           1017 ;	aes220.c:200: if (fpgaStatus == F_READY) {
   009B BE AD 02           1018 	cjne	r6,#0xAD,00127$
   009E 80 03              1019 	sjmp	00128$
   00A0                    1020 00127$:
   00A0 02s01r40           1021 	ljmp	00112$
   00A3                    1022 00128$:
                           1023 ;	aes220.c:201: while(dataLen > 0) { 
   00A3                    1024 00105$:
   00A3 E5*02              1025 	mov	a,_configureFpga_dataLen_1_1
   00A5 45*03              1026 	orl	a,(_configureFpga_dataLen_1_1 + 1)
   00A7 45*04              1027 	orl	a,(_configureFpga_dataLen_1_1 + 2)
   00A9 45*05              1028 	orl	a,(_configureFpga_dataLen_1_1 + 3)
   00AB 60 7A              1029 	jz	00107$
                           1030 ;	aes220.c:202: if ( !(EP2468STAT & bmEP2EMPTY) ) { // EP2 received data
   00AD E5 AA              1031 	mov	a,_EP2468STAT
   00AF 20 E0 F1           1032 	jb	acc.0,00105$
                           1033 ;	aes220.c:206: bytes = MAKEWORD(EP2BCH,EP2BCL);
   00B2 90 E6 90           1034 	mov	dptr,#_EP2BCH
   00B5 E0                 1035 	movx	a,@dptr
   00B6 F8                 1036 	mov	r0,a
   00B7 7F 00              1037 	mov	r7,#0x00
   00B9 90 E6 91           1038 	mov	dptr,#_EP2BCL
   00BC E0                 1039 	movx	a,@dptr
   00BD F9                 1040 	mov	r1,a
   00BE 7A 00              1041 	mov	r2,#0x00
   00C0 4F                 1042 	orl	a,r7
   00C1 F5*06              1043 	mov	_configureFpga_bytes_1_1,a
   00C3 EA                 1044 	mov	a,r2
   00C4 48                 1045 	orl	a,r0
   00C5 F5*07              1046 	mov	(_configureFpga_bytes_1_1 + 1),a
                           1047 ;	aes220.c:208: for (i=0;i<bytes;++i) {
   00C7 7A 00              1048 	mov	r2,#0x00
   00C9 7B 00              1049 	mov	r3,#0x00
   00CB                    1050 00113$:
   00CB C3                 1051 	clr	c
   00CC EA                 1052 	mov	a,r2
   00CD 95*06              1053 	subb	a,_configureFpga_bytes_1_1
   00CF EB                 1054 	mov	a,r3
   00D0 95*07              1055 	subb	a,(_configureFpga_bytes_1_1 + 1)
   00D2 50 19              1056 	jnc	00116$
                           1057 ;	aes220.c:209: IOA = EP2FIFOBUF[i]; // output the byte on port A
   00D4 8A 82              1058 	mov	dpl,r2
   00D6 74 F0              1059 	mov	a,#(_EP2FIFOBUF >> 8)
   00D8 2B                 1060 	add	a,r3
   00D9 F5 83              1061 	mov	dph,a
   00DB E0                 1062 	movx	a,@dptr
   00DC F5 80              1063 	mov	_IOA,a
                           1064 ;	aes220.c:210: CCLK = 0;     // tick the clock (low)
   00DE C2 B6              1065 	clr	_PD6
                           1066 ;	aes220.c:211: LED6 = 1;     // flash the LED, why not?
   00E0 D2 90              1067 	setb	_PB0
                           1068 ;	aes220.c:212: CCLK = 1;     // tick the clock (high)
   00E2 D2 B6              1069 	setb	_PD6
                           1070 ;	aes220.c:213: LED6 = 0;     // keep flashing this LED
   00E4 C2 90              1071 	clr	_PB0
                           1072 ;	aes220.c:208: for (i=0;i<bytes;++i) {
   00E6 0A                 1073 	inc	r2
   00E7 BA 00 E1           1074 	cjne	r2,#0x00,00113$
   00EA 0B                 1075 	inc	r3
   00EB 80 DE              1076 	sjmp	00113$
   00ED                    1077 00116$:
                           1078 ;	aes220.c:215: dataLen -= bytes;
   00ED AA*06              1079 	mov	r2,_configureFpga_bytes_1_1
   00EF AB*07              1080 	mov	r3,(_configureFpga_bytes_1_1 + 1)
   00F1 E4                 1081 	clr	a
   00F2 FC                 1082 	mov	r4,a
   00F3 FD                 1083 	mov	r5,a
   00F4 E5*02              1084 	mov	a,_configureFpga_dataLen_1_1
   00F6 C3                 1085 	clr	c
   00F7 9A                 1086 	subb	a,r2
   00F8 F5*02              1087 	mov	_configureFpga_dataLen_1_1,a
   00FA E5*03              1088 	mov	a,(_configureFpga_dataLen_1_1 + 1)
   00FC 9B                 1089 	subb	a,r3
   00FD F5*03              1090 	mov	(_configureFpga_dataLen_1_1 + 1),a
   00FF E5*04              1091 	mov	a,(_configureFpga_dataLen_1_1 + 2)
   0101 9C                 1092 	subb	a,r4
   0102 F5*04              1093 	mov	(_configureFpga_dataLen_1_1 + 2),a
   0104 E5*05              1094 	mov	a,(_configureFpga_dataLen_1_1 + 3)
   0106 9D                 1095 	subb	a,r5
   0107 F5*05              1096 	mov	(_configureFpga_dataLen_1_1 + 3),a
                           1097 ;	aes220.c:216: if ( (INIT_B == 0) & (DONE == 0) ) {
   0109 A2 B5              1098 	mov	c,_PD5
   010B B3                 1099 	cpl	c
   010C E4                 1100 	clr	a
   010D 33                 1101 	rlc	a
   010E FA                 1102 	mov	r2,a
   010F A2 B1              1103 	mov	c,_PD1
   0111 B3                 1104 	cpl	c
   0112 E4                 1105 	clr	a
   0113 33                 1106 	rlc	a
   0114 FB                 1107 	mov	r3,a
   0115 5A                 1108 	anl	a,r2
   0116 60 06              1109 	jz	00102$
                           1110 ;	aes220.c:218: LED6 = 1; // turn LED off
   0118 D2 90              1111 	setb	_PB0
                           1112 ;	aes220.c:219: return fpgaStatus;
   011A 75 82 B0           1113 	mov	dpl,#0xB0
   011D 22                 1114 	ret
   011E                    1115 00102$:
                           1116 ;	aes220.c:222: REARM();
   011E 90 E6 91           1117 	mov	dptr,#_EP2BCL
   0121 74 80              1118 	mov	a,#0x80
   0123 F0                 1119 	movx	@dptr,a
   0124 02s00rA3           1120 	ljmp	00105$
   0127                    1121 00107$:
                           1122 ;	aes220.c:226: if (DONE == 1) {
   0127 30 B1 14           1123 	jnb	_PD1,00109$
                           1124 ;	aes220.c:228: OEA = 0x00; // Port A as input
   012A 75 B2 00           1125 	mov	_OEA,#0x00
                           1126 ;	aes220.c:229: assertSoftReset(); // keep soft_reset at one (active)
   012D 12s00r00           1127 	lcall	_assertSoftReset
                           1128 ;	aes220.c:231: CSI_B = 1;  // release chip select
   0130 D2 B2              1129 	setb	_PD2
                           1130 ;	aes220.c:232: RDWRB = 1; // release write mode
   0132 D2 94              1131 	setb	_PB4
                           1132 ;	aes220.c:235: OEB = 0x00; // Port B as input
   0134 75 B3 00           1133 	mov	_OEB,#0x00
                           1134 ;	aes220.c:236: OED = 0x81; // Port D as input save for PROG_B and SUSPEND_F
   0137 75 B5 81           1135 	mov	_OED,#0x81
                           1136 ;	aes220.c:237: fpgaStatus = PROG_DONE;
   013A 7E AB              1137 	mov	r6,#0xAB
   013C 80 02              1138 	sjmp	00112$
   013E                    1139 00109$:
                           1140 ;	aes220.c:239: else fpgaStatus = DONE_LOW;
   013E 7E B2              1141 	mov	r6,#0xB2
   0140                    1142 00112$:
                           1143 ;	aes220.c:241: return fpgaStatus;
   0140 8E 82              1144 	mov	dpl,r6
   0142 22                 1145 	ret
                           1146 ;------------------------------------------------------------
                           1147 ;Allocation info for local variables in function 'setupFpgaProg'
                           1148 ;------------------------------------------------------------
                           1149 ;------------------------------------------------------------
                           1150 ;	aes220.c:244: void setupFpgaProg() 
                           1151 ;	-----------------------------------------
                           1152 ;	 function setupFpgaProg
                           1153 ;	-----------------------------------------
   0143                    1154 _setupFpgaProg:
                           1155 ;	aes220.c:249: OEA = 0x00; // set port A as inputs
   0143 75 B2 00           1156 	mov	_OEA,#0x00
                           1157 ;	aes220.c:250: OEB = 0xFF; // set port B as outputs
   0146 75 B3 FF           1158 	mov	_OEB,#0xFF
                           1159 ;	aes220.c:251: OED = 0b10001101; // set PD0, PD2, PD3 and PD7 as outputs
   0149 75 B5 8D           1160 	mov	_OED,#0x8D
                           1161 ;	aes220.c:252: SUSPEND_F = 0;
   014C C2 B7              1162 	clr	_PD7
                           1163 ;	aes220.c:254: PROG_B = 1;
   014E D2 B0              1164 	setb	_PD0
                           1165 ;	aes220.c:255: LOAD_B = 1;    // Shift register load signal set to 1
   0150 D2 B2              1166 	setb	_PD2
                           1167 ;	aes220.c:256: CS_B   = 1;    // Chip select signal set to 1
   0152 D2 B3              1168 	setb	_PD3
                           1169 ;	aes220.c:257: fpgaStatus = PROG_F_MODE;
   0154 90s00r00           1170 	mov	dptr,#_fpgaStatus
   0157 74 A8              1171 	mov	a,#0xA8
   0159 F0                 1172 	movx	@dptr,a
   015A 22                 1173 	ret
                           1174 ;------------------------------------------------------------
                           1175 ;Allocation info for local variables in function 'progFpga'
                           1176 ;------------------------------------------------------------
                           1177 ;bytes                     Allocated with name '_progFpga_bytes_1_1'
                           1178 ;i                         Allocated to registers r2 r3 
                           1179 ;ctrlCode                  Allocated to registers r2 
                           1180 ;------------------------------------------------------------
                           1181 ;	aes220.c:260: BYTE progFpga()
                           1182 ;	-----------------------------------------
                           1183 ;	 function progFpga
                           1184 ;	-----------------------------------------
   015B                    1185 _progFpga:
                           1186 ;	aes220.c:264: setupFpgaProg();
   015B 12s01r43           1187 	lcall	_setupFpgaProg
                           1188 ;	aes220.c:265: if (fpgaStatus != PROG_F_MODE) return 1;
   015E 90s00r00           1189 	mov	dptr,#_fpgaStatus
   0161 E0                 1190 	movx	a,@dptr
   0162 FA                 1191 	mov	r2,a
   0163 BA A8 02           1192 	cjne	r2,#0xA8,00148$
   0166 80 04              1193 	sjmp	00113$
   0168                    1194 00148$:
   0168 75 82 01           1195 	mov	dpl,#0x01
   016B 22                 1196 	ret
                           1197 ;	aes220.c:266: while(fpgaStatus != PROG_DONE) { 
   016C                    1198 00113$:
   016C 90s00r00           1199 	mov	dptr,#_fpgaStatus
   016F E0                 1200 	movx	a,@dptr
   0170 FA                 1201 	mov	r2,a
   0171 BA AB 03           1202 	cjne	r2,#0xAB,00149$
   0174 02s02r77           1203 	ljmp	00115$
   0177                    1204 00149$:
                           1205 ;	aes220.c:267: if ( !(EP2468STAT & bmEP2EMPTY)) {
   0177 E5 AA              1206 	mov	a,_EP2468STAT
   0179 20 E0 F0           1207 	jb	acc.0,00113$
                           1208 ;	aes220.c:271: bytes = MAKEWORD(EP2BCH,EP2BCL);
   017C 90 E6 90           1209 	mov	dptr,#_EP2BCH
   017F E0                 1210 	movx	a,@dptr
   0180 FB                 1211 	mov	r3,a
   0181 7A 00              1212 	mov	r2,#0x00
   0183 90 E6 91           1213 	mov	dptr,#_EP2BCL
   0186 E0                 1214 	movx	a,@dptr
   0187 FC                 1215 	mov	r4,a
   0188 7D 00              1216 	mov	r5,#0x00
   018A 4A                 1217 	orl	a,r2
   018B F5*08              1218 	mov	_progFpga_bytes_1_1,a
   018D ED                 1219 	mov	a,r5
   018E 4B                 1220 	orl	a,r3
   018F F5*09              1221 	mov	(_progFpga_bytes_1_1 + 1),a
                           1222 ;	aes220.c:273: ctrlCode = EP2FIFOBUF[0];
   0191 90 F0 00           1223 	mov	dptr,#_EP2FIFOBUF
   0194 E0                 1224 	movx	a,@dptr
   0195 FA                 1225 	mov	r2,a
                           1226 ;	aes220.c:274: switch (ctrlCode) {
   0196 BA 60 02           1227 	cjne	r2,#0x60,00151$
   0199 80 13              1228 	sjmp	00103$
   019B                    1229 00151$:
   019B BA 61 02           1230 	cjne	r2,#0x61,00152$
   019E 80 38              1231 	sjmp	00104$
   01A0                    1232 00152$:
   01A0 BA 62 02           1233 	cjne	r2,#0x62,00153$
   01A3 80 5B              1234 	sjmp	00105$
   01A5                    1235 00153$:
   01A5 BA AF 03           1236 	cjne	r2,#0xAF,00154$
   01A8 02s02r5D           1237 	ljmp	00106$
   01AB                    1238 00154$:
   01AB 02s02r6C           1239 	ljmp	00109$
                           1240 ;	aes220.c:275: case STATUS_CHECK:
   01AE                    1241 00103$:
                           1242 ;	aes220.c:276: CS_B = 0;    // Enable flash
   01AE C2 B3              1243 	clr	_PD3
                           1244 ;	aes220.c:277: LOAD_B = 0;
   01B0 C2 B2              1245 	clr	_PD2
                           1246 ;	aes220.c:278: IOB = 0xD7;  // Write the value on port B
   01B2 75 90 D7           1247 	mov	_IOB,#0xD7
                           1248 ;	aes220.c:279: LOAD_B = 1;
   01B5 D2 B2              1249 	setb	_PD2
                           1250 ;	aes220.c:280: IOB = 0x55;  // Write a dummy value to flush out status byte from flash
   01B7 75 90 55           1251 	mov	_IOB,#0x55
                           1252 ;	aes220.c:281: LOAD_B = 0;
   01BA C2 B2              1253 	clr	_PD2
                           1254 ;	aes220.c:282: LOAD_B = 1;
   01BC D2 B2              1255 	setb	_PD2
                           1256 ;	aes220.c:283: EP6FIFOBUF[0] = IOA; // read and send value on port A back
   01BE 90 F8 00           1257 	mov	dptr,#_EP6FIFOBUF
   01C1 E5 80              1258 	mov	a,_IOA
   01C3 F0                 1259 	movx	@dptr,a
                           1260 ;	aes220.c:284: CS_B = 1;
   01C4 D2 B3              1261 	setb	_PD3
                           1262 ;	aes220.c:286: EP6BCH=0;
   01C6 90 E6 98           1263 	mov	dptr,#_EP6BCH
   01C9 E4                 1264 	clr	a
   01CA F0                 1265 	movx	@dptr,a
                           1266 ;	aes220.c:287: SYNCDELAY();
   01CB 00                 1267 	 nop 
   01CC 00                 1268 	 nop 
   01CD 00                 1269 	 nop 
   01CE 00                 1270 	 nop 
                           1271 ;	aes220.c:288: EP6BCL=1;
   01CF 90 E6 99           1272 	mov	dptr,#_EP6BCL
   01D2 74 01              1273 	mov	a,#0x01
   01D4 F0                 1274 	movx	@dptr,a
                           1275 ;	aes220.c:289: break; // end of case STATUS_CHECK
   01D5 02s02r6E           1276 	ljmp	00110$
                           1277 ;	aes220.c:290: case WRITE_CMD:
   01D8                    1278 00104$:
                           1279 ;	aes220.c:291: CS_B = 0;
   01D8 C2 B3              1280 	clr	_PD3
                           1281 ;	aes220.c:292: for (i=1;i<bytes;++i) {
   01DA 7A 01              1282 	mov	r2,#0x01
   01DC 7B 00              1283 	mov	r3,#0x00
   01DE                    1284 00116$:
   01DE C3                 1285 	clr	c
   01DF EA                 1286 	mov	a,r2
   01E0 95*08              1287 	subb	a,_progFpga_bytes_1_1
   01E2 EB                 1288 	mov	a,r3
   01E3 95*09              1289 	subb	a,(_progFpga_bytes_1_1 + 1)
   01E5 50 15              1290 	jnc	00119$
                           1291 ;	aes220.c:293: LOAD_B = 0;
   01E7 C2 B2              1292 	clr	_PD2
                           1293 ;	aes220.c:294: IOB = EP2FIFOBUF[i];
   01E9 8A 82              1294 	mov	dpl,r2
   01EB 74 F0              1295 	mov	a,#(_EP2FIFOBUF >> 8)
   01ED 2B                 1296 	add	a,r3
   01EE F5 83              1297 	mov	dph,a
   01F0 E0                 1298 	movx	a,@dptr
   01F1 F5 90              1299 	mov	_IOB,a
                           1300 ;	aes220.c:295: LOAD_B = 1;
   01F3 D2 B2              1301 	setb	_PD2
                           1302 ;	aes220.c:292: for (i=1;i<bytes;++i) {
   01F5 0A                 1303 	inc	r2
   01F6 BA 00 E5           1304 	cjne	r2,#0x00,00116$
   01F9 0B                 1305 	inc	r3
   01FA 80 E2              1306 	sjmp	00116$
   01FC                    1307 00119$:
                           1308 ;	aes220.c:297: CS_B = 1;
   01FC D2 B3              1309 	setb	_PD3
                           1310 ;	aes220.c:298: break; // end of case WRITE_CMD
                           1311 ;	aes220.c:299: case READ_CMD:
   01FE 80 6E              1312 	sjmp	00110$
   0200                    1313 00105$:
                           1314 ;	aes220.c:300: CS_B = 0;
   0200 C2 B3              1315 	clr	_PD3
                           1316 ;	aes220.c:301: for (i=1;i<bytes;++i) {
   0202 7A 01              1317 	mov	r2,#0x01
   0204 7B 00              1318 	mov	r3,#0x00
   0206                    1319 00120$:
   0206 C3                 1320 	clr	c
   0207 EA                 1321 	mov	a,r2
   0208 95*08              1322 	subb	a,_progFpga_bytes_1_1
   020A EB                 1323 	mov	a,r3
   020B 95*09              1324 	subb	a,(_progFpga_bytes_1_1 + 1)
   020D 50 15              1325 	jnc	00123$
                           1326 ;	aes220.c:302: LOAD_B = 0;
   020F C2 B2              1327 	clr	_PD2
                           1328 ;	aes220.c:303: IOB = EP2FIFOBUF[i];
   0211 8A 82              1329 	mov	dpl,r2
   0213 74 F0              1330 	mov	a,#(_EP2FIFOBUF >> 8)
   0215 2B                 1331 	add	a,r3
   0216 F5 83              1332 	mov	dph,a
   0218 E0                 1333 	movx	a,@dptr
   0219 F5 90              1334 	mov	_IOB,a
                           1335 ;	aes220.c:304: LOAD_B = 1;
   021B D2 B2              1336 	setb	_PD2
                           1337 ;	aes220.c:301: for (i=1;i<bytes;++i) {
   021D 0A                 1338 	inc	r2
   021E BA 00 E5           1339 	cjne	r2,#0x00,00120$
   0221 0B                 1340 	inc	r3
   0222 80 E2              1341 	sjmp	00120$
   0224                    1342 00123$:
                           1343 ;	aes220.c:306: for (i=0;i<PAGE_SIZE;++i) {
   0224 7A 00              1344 	mov	r2,#0x00
   0226 7B 00              1345 	mov	r3,#0x00
   0228                    1346 00124$:
   0228 C3                 1347 	clr	c
   0229 EA                 1348 	mov	a,r2
   022A 94 08              1349 	subb	a,#0x08
   022C EB                 1350 	mov	a,r3
   022D 94 01              1351 	subb	a,#0x01
   022F 50 18              1352 	jnc	00127$
                           1353 ;	aes220.c:307: LOAD_B = 0;
   0231 C2 B2              1354 	clr	_PD2
                           1355 ;	aes220.c:308: IOB = 0xAA; // dummy byte
   0233 75 90 AA           1356 	mov	_IOB,#0xAA
                           1357 ;	aes220.c:309: LOAD_B = 1;
   0236 D2 B2              1358 	setb	_PD2
                           1359 ;	aes220.c:310: EP6FIFOBUF[i] = IOA;
   0238 8A 82              1360 	mov	dpl,r2
   023A 74 F8              1361 	mov	a,#(_EP6FIFOBUF >> 8)
   023C 2B                 1362 	add	a,r3
   023D F5 83              1363 	mov	dph,a
   023F E5 80              1364 	mov	a,_IOA
   0241 F0                 1365 	movx	@dptr,a
                           1366 ;	aes220.c:306: for (i=0;i<PAGE_SIZE;++i) {
   0242 0A                 1367 	inc	r2
   0243 BA 00 E2           1368 	cjne	r2,#0x00,00124$
   0246 0B                 1369 	inc	r3
   0247 80 DF              1370 	sjmp	00124$
   0249                    1371 00127$:
                           1372 ;	aes220.c:312: CS_B = 1;
   0249 D2 B3              1373 	setb	_PD3
                           1374 ;	aes220.c:314: EP6BCH=MSB(PAGE_SIZE);
   024B 90 E6 98           1375 	mov	dptr,#_EP6BCH
   024E 74 01              1376 	mov	a,#0x01
   0250 F0                 1377 	movx	@dptr,a
                           1378 ;	aes220.c:315: SYNCDELAY();
   0251 00                 1379 	 nop 
   0252 00                 1380 	 nop 
   0253 00                 1381 	 nop 
   0254 00                 1382 	 nop 
                           1383 ;	aes220.c:316: EP6BCL=LSB(PAGE_SIZE);
   0255 90 E6 99           1384 	mov	dptr,#_EP6BCL
   0258 74 08              1385 	mov	a,#0x08
   025A F0                 1386 	movx	@dptr,a
                           1387 ;	aes220.c:317: break; // end of case READ_CMD
                           1388 ;	aes220.c:318: case RESET_F:
   025B 80 11              1389 	sjmp	00110$
   025D                    1390 00106$:
                           1391 ;	aes220.c:319: if (startFpga()) {
   025D 12s00r0C           1392 	lcall	_startFpga
   0260 E5 82              1393 	mov	a,dpl
   0262 60 0A              1394 	jz	00110$
                           1395 ;	aes220.c:320: fpgaStatus = PROG_DONE;
   0264 90s00r00           1396 	mov	dptr,#_fpgaStatus
   0267 74 AB              1397 	mov	a,#0xAB
   0269 F0                 1398 	movx	@dptr,a
                           1399 ;	aes220.c:322: break; // end of case RESET_FPGA
                           1400 ;	aes220.c:323: default:
   026A 80 02              1401 	sjmp	00110$
   026C                    1402 00109$:
                           1403 ;	aes220.c:324: LED6 = 1 ; // D6 OFF
   026C D2 90              1404 	setb	_PB0
                           1405 ;	aes220.c:326: } // end of switch
   026E                    1406 00110$:
                           1407 ;	aes220.c:327: REARM(); // ep2
   026E 90 E6 91           1408 	mov	dptr,#_EP2BCL
   0271 74 80              1409 	mov	a,#0x80
   0273 F0                 1410 	movx	@dptr,a
   0274 02s01r6C           1411 	ljmp	00113$
   0277                    1412 00115$:
                           1413 ;	aes220.c:330: return 0;
   0277 75 82 00           1414 	mov	dpl,#0x00
   027A 22                 1415 	ret
                           1416 ;------------------------------------------------------------
                           1417 ;Allocation info for local variables in function 'setUserPinsDir'
                           1418 ;------------------------------------------------------------
                           1419 ;uppHDirByte               Allocated with name '_setUserPinsDir_PARM_2'
                           1420 ;uppLDirByte               Allocated to registers r2 
                           1421 ;bmOED                     Allocated to registers 
                           1422 ;bmOEA                     Allocated to registers 
                           1423 ;------------------------------------------------------------
                           1424 ;	aes220.c:334: void setUserPinsDir(BYTE uppLDirByte, BYTE uppHDirByte) 
                           1425 ;	-----------------------------------------
                           1426 ;	 function setUserPinsDir
                           1427 ;	-----------------------------------------
   027B                    1428 _setUserPinsDir:
   027B AA 82              1429 	mov	r2,dpl
                           1430 ;	aes220.c:340: OED &= bmOED; // Clearing bits 2/3/5/6
   027D 53 B5 93           1431 	anl	_OED,#0x93
                           1432 ;	aes220.c:341: OEA &= bmOEA; // Clearing bits 1/3
   0280 53 B2 F5           1433 	anl	_OEA,#0xF5
                           1434 ;	aes220.c:344: OED |= uppLDirByte;
   0283 EA                 1435 	mov	a,r2
   0284 42 B5              1436 	orl	_OED,a
                           1437 ;	aes220.c:345: OEA |= uppHDirByte;
   0286 E5*00              1438 	mov	a,_setUserPinsDir_PARM_2
   0288 42 B2              1439 	orl	_OEA,a
   028A 22                 1440 	ret
                           1441 ;------------------------------------------------------------
                           1442 ;Allocation info for local variables in function 'setUserPins'
                           1443 ;------------------------------------------------------------
                           1444 ;userPinsByte              Allocated to registers r2 
                           1445 ;------------------------------------------------------------
                           1446 ;	aes220.c:348: void setUserPins(BYTE userPinsByte) 
                           1447 ;	-----------------------------------------
                           1448 ;	 function setUserPins
                           1449 ;	-----------------------------------------
   028B                    1450 _setUserPins:
                           1451 ;	aes220.c:350: UPP0 = bmBIT0 & userPinsByte;
   028B E5 82              1452 	mov	a,dpl
   028D FA                 1453 	mov	r2,a
   028E 13                 1454 	rrc	a
   028F 92 B2              1455 	mov	_PD2,c
                           1456 ;	aes220.c:351: UPP1 = bmBIT1 & userPinsByte;
   0291 EA                 1457 	mov	a,r2
   0292 A2 E1              1458 	mov	c,acc.1
   0294 92 B3              1459 	mov	_PD3,c
                           1460 ;	aes220.c:352: UPP2 = bmBIT2 & userPinsByte;
   0296 EA                 1461 	mov	a,r2
   0297 A2 E2              1462 	mov	c,acc.2
   0299 92 B5              1463 	mov	_PD5,c
                           1464 ;	aes220.c:353: UPP3 = bmBIT3 & userPinsByte;
   029B EA                 1465 	mov	a,r2
   029C A2 E3              1466 	mov	c,acc.3
   029E 92 B6              1467 	mov	_PD6,c
                           1468 ;	aes220.c:354: UPP4 = bmBIT4 & userPinsByte;
   02A0 EA                 1469 	mov	a,r2
   02A1 A2 E4              1470 	mov	c,acc.4
   02A3 92 81              1471 	mov	_PA1,c
                           1472 ;	aes220.c:355: UPP5 = bmBIT5 & userPinsByte;
   02A5 EA                 1473 	mov	a,r2
   02A6 A2 E5              1474 	mov	c,acc.5
   02A8 92 83              1475 	mov	_PA3,c
   02AA 22                 1476 	ret
                           1477 ;------------------------------------------------------------
                           1478 ;Allocation info for local variables in function 'setMode'
                           1479 ;------------------------------------------------------------
                           1480 ;uCMode                    Allocated to registers r2 
                           1481 ;------------------------------------------------------------
                           1482 ;	aes220.c:359: void setMode(BYTE uCMode)
                           1483 ;	-----------------------------------------
                           1484 ;	 function setMode
                           1485 ;	-----------------------------------------
   02AB                    1486 _setMode:
   02AB AA 82              1487 	mov	r2,dpl
                           1488 ;	aes220.c:361: switch (uCMode) {
   02AD BA A2 02           1489 	cjne	r2,#0xA2,00108$
   02B0 80 06              1490 	sjmp	00101$
   02B2                    1491 00108$:
   02B2 BA A3 02           1492 	cjne	r2,#0xA3,00109$
   02B5 80 40              1493 	sjmp	00102$
   02B7                    1494 00109$:
   02B7 22                 1495 	ret
                           1496 ;	aes220.c:363: case PORT_MODE:
   02B8                    1497 00101$:
                           1498 ;	aes220.c:365: PORTACFG = 0x00; // otherwise PA7 = SLCS -> is maintained at '1' by the
   02B8 90 E6 70           1499 	mov	dptr,#_PORTACFG
   02BB E4                 1500 	clr	a
   02BC F0                 1501 	movx	@dptr,a
                           1502 ;	aes220.c:366: SYNCDELAY();     // FPGA 
   02BD 00                 1503 	 nop 
   02BE 00                 1504 	 nop 
   02BF 00                 1505 	 nop 
   02C0 00                 1506 	 nop 
                           1507 ;	aes220.c:369: IFCONFIG = 0b11000000; // intern. clk, 48MHz, not provided to FPGA, not
   02C1 90 E6 01           1508 	mov	dptr,#_IFCONFIG
   02C4 74 C0              1509 	mov	a,#0xC0
   02C6 F0                 1510 	movx	@dptr,a
                           1511 ;	aes220.c:370: SYNCDELAY();           // inverted, port mode
   02C7 00                 1512 	 nop 
   02C8 00                 1513 	 nop 
   02C9 00                 1514 	 nop 
   02CA 00                 1515 	 nop 
                           1516 ;	aes220.c:373: EP2BCL = 0x80; // write once
   02CB 90 E6 91           1517 	mov	dptr,#_EP2BCL
   02CE 74 80              1518 	mov	a,#0x80
   02D0 F0                 1519 	movx	@dptr,a
                           1520 ;	aes220.c:374: SYNCDELAY();
   02D1 00                 1521 	 nop 
   02D2 00                 1522 	 nop 
   02D3 00                 1523 	 nop 
   02D4 00                 1524 	 nop 
                           1525 ;	aes220.c:375: EP2BCL = 0x80; // do it again
   02D5 90 E6 91           1526 	mov	dptr,#_EP2BCL
   02D8 74 80              1527 	mov	a,#0x80
   02DA F0                 1528 	movx	@dptr,a
                           1529 ;	aes220.c:378: EP6BCL = 0x00; // write once
   02DB 90 E6 99           1530 	mov	dptr,#_EP6BCL
   02DE E4                 1531 	clr	a
   02DF F0                 1532 	movx	@dptr,a
                           1533 ;	aes220.c:379: SYNCDELAY();
   02E0 00                 1534 	 nop 
   02E1 00                 1535 	 nop 
   02E2 00                 1536 	 nop 
   02E3 00                 1537 	 nop 
                           1538 ;	aes220.c:380: EP6BCL = 0x00; // do it again
   02E4 90 E6 99           1539 	mov	dptr,#_EP6BCL
   02E7 E4                 1540 	clr	a
   02E8 F0                 1541 	movx	@dptr,a
                           1542 ;	aes220.c:383: OEA = 0x00; // Port A as input
   02E9 75 B2 00           1543 	mov	_OEA,#0x00
                           1544 ;	aes220.c:384: OEB = 0x00; // Port B as input
   02EC 75 B3 00           1545 	mov	_OEB,#0x00
                           1546 ;	aes220.c:385: OED = 0x81; // Port D as input save for PROG_B and SUSPEND_F
   02EF 75 B5 81           1547 	mov	_OED,#0x81
                           1548 ;	aes220.c:386: PROG_B = 1;
   02F2 D2 B0              1549 	setb	_PD0
                           1550 ;	aes220.c:387: SUSPEND_F = 0;
   02F4 C2 B7              1551 	clr	_PD7
                           1552 ;	aes220.c:389: break; // end of case PORT_MODE
   02F6 22                 1553 	ret
                           1554 ;	aes220.c:391: case SLAVE_FIFO_MODE:
   02F7                    1555 00102$:
                           1556 ;	aes220.c:393: OED = 0x81;
   02F7 75 B5 81           1557 	mov	_OED,#0x81
                           1558 ;	aes220.c:394: SUSPEND_F = 0;
   02FA C2 B7              1559 	clr	_PD7
                           1560 ;	aes220.c:396: PORTACFG = 0x40; // PA7 = SLCS -> needs to be maintained at '1' by the
   02FC 90 E6 70           1561 	mov	dptr,#_PORTACFG
   02FF 74 40              1562 	mov	a,#0x40
   0301 F0                 1563 	movx	@dptr,a
                           1564 ;	aes220.c:397: SYNCDELAY();     // FPGA otherwise port D outputs set to '0' resetting
   0302 00                 1565 	 nop 
   0303 00                 1566 	 nop 
   0304 00                 1567 	 nop 
   0305 00                 1568 	 nop 
                           1569 ;	aes220.c:402: IFCONFIG = 0b01000011; // extern. clk, 48MHz, provided by FPGA, 
   0306 90 E6 01           1570 	mov	dptr,#_IFCONFIG
   0309 74 43              1571 	mov	a,#0x43
   030B F0                 1572 	movx	@dptr,a
                           1573 ;	aes220.c:403: SYNCDELAY();           // not inverted clock, slave FIFO mode
   030C 00                 1574 	 nop 
   030D 00                 1575 	 nop 
   030E 00                 1576 	 nop 
   030F 00                 1577 	 nop 
                           1578 ;	aes220.c:405: OED = 0x81;
   0310 75 B5 81           1579 	mov	_OED,#0x81
                           1580 ;	aes220.c:406: SUSPEND_F = 0;
   0313 C2 B7              1581 	clr	_PD7
                           1582 ;	aes220.c:409: FIFORESET = bmNAKALL; SYNCDELAY();
   0315 90 E6 04           1583 	mov	dptr,#_FIFORESET
   0318 74 80              1584 	mov	a,#0x80
   031A F0                 1585 	movx	@dptr,a
   031B 00                 1586 	 nop 
   031C 00                 1587 	 nop 
   031D 00                 1588 	 nop 
   031E 00                 1589 	 nop 
                           1590 ;	aes220.c:410: FIFORESET = bmNAKALL | 2; SYNCDELAY();
   031F 90 E6 04           1591 	mov	dptr,#_FIFORESET
   0322 74 82              1592 	mov	a,#0x82
   0324 F0                 1593 	movx	@dptr,a
   0325 00                 1594 	 nop 
   0326 00                 1595 	 nop 
   0327 00                 1596 	 nop 
   0328 00                 1597 	 nop 
                           1598 ;	aes220.c:411: FIFORESET = bmNAKALL | 6; SYNCDELAY();
   0329 90 E6 04           1599 	mov	dptr,#_FIFORESET
   032C 74 86              1600 	mov	a,#0x86
   032E F0                 1601 	movx	@dptr,a
   032F 00                 1602 	 nop 
   0330 00                 1603 	 nop 
   0331 00                 1604 	 nop 
   0332 00                 1605 	 nop 
                           1606 ;	aes220.c:412: FIFORESET = 0x00; SYNCDELAY();
   0333 90 E6 04           1607 	mov	dptr,#_FIFORESET
   0336 E4                 1608 	clr	a
   0337 F0                 1609 	movx	@dptr,a
   0338 00                 1610 	 nop 
   0339 00                 1611 	 nop 
   033A 00                 1612 	 nop 
   033B 00                 1613 	 nop 
                           1614 ;	aes220.c:415: EP2FIFOCFG = 0x00; SYNCDELAY(); // autoout=0, 8 bits wide bus (Port B)
   033C 90 E6 18           1615 	mov	dptr,#_EP2FIFOCFG
   033F E4                 1616 	clr	a
   0340 F0                 1617 	movx	@dptr,a
   0341 00                 1618 	 nop 
   0342 00                 1619 	 nop 
   0343 00                 1620 	 nop 
   0344 00                 1621 	 nop 
                           1622 ;	aes220.c:418: EP6FIFOCFG = 0x48; SYNCDELAY(); // Full minus one, autoIN=1, 8 bits wide bus (Port B)  
   0345 90 E6 1A           1623 	mov	dptr,#_EP6FIFOCFG
   0348 74 48              1624 	mov	a,#0x48
   034A F0                 1625 	movx	@dptr,a
   034B 00                 1626 	 nop 
   034C 00                 1627 	 nop 
   034D 00                 1628 	 nop 
   034E 00                 1629 	 nop 
                           1630 ;	aes220.c:425: EP6AUTOINLENH = 0x02; // Send data in 512 byte chunks
   034F 90 E6 24           1631 	mov	dptr,#_EP6AUTOINLENH
   0352 74 02              1632 	mov	a,#0x02
   0354 F0                 1633 	movx	@dptr,a
                           1634 ;	aes220.c:426: SYNCDELAY();
   0355 00                 1635 	 nop 
   0356 00                 1636 	 nop 
   0357 00                 1637 	 nop 
   0358 00                 1638 	 nop 
                           1639 ;	aes220.c:427: EP6AUTOINLENL = 0x00;
   0359 90 E6 25           1640 	mov	dptr,#_EP6AUTOINLENL
   035C E4                 1641 	clr	a
   035D F0                 1642 	movx	@dptr,a
                           1643 ;	aes220.c:428: SYNCDELAY();
   035E 00                 1644 	 nop 
   035F 00                 1645 	 nop 
   0360 00                 1646 	 nop 
   0361 00                 1647 	 nop 
                           1648 ;	aes220.c:430: RESETFIFO(0x06);
   0362 90 E6 04           1649 	mov	dptr,#_FIFORESET
   0365 74 80              1650 	mov	a,#0x80
   0367 F0                 1651 	movx	@dptr,a
   0368 00                 1652 	 nop 
   0369 00                 1653 	 nop 
   036A 00                 1654 	 nop 
   036B 00                 1655 	 nop 
   036C 90 E6 04           1656 	mov	dptr,#_FIFORESET
   036F 74 06              1657 	mov	a,#0x06
   0371 F0                 1658 	movx	@dptr,a
   0372 00                 1659 	 nop 
   0373 00                 1660 	 nop 
   0374 00                 1661 	 nop 
   0375 00                 1662 	 nop 
   0376 90 E6 04           1663 	mov	dptr,#_FIFORESET
   0379 E4                 1664 	clr	a
   037A F0                 1665 	movx	@dptr,a
   037B 00                 1666 	 nop 
   037C 00                 1667 	 nop 
   037D 00                 1668 	 nop 
   037E 00                 1669 	 nop 
                           1670 ;	aes220.c:431: SYNCDELAY();
   037F 00                 1671 	 nop 
   0380 00                 1672 	 nop 
   0381 00                 1673 	 nop 
   0382 00                 1674 	 nop 
                           1675 ;	aes220.c:434: EP4FIFOCFG &= ~0b00000001; // 8 bit wide bus (Port B) 
   0383 90 E6 19           1676 	mov	dptr,#_EP4FIFOCFG
   0386 E0                 1677 	movx	a,@dptr
   0387 FA                 1678 	mov	r2,a
   0388 54 FE              1679 	anl	a,#0xFE
   038A F0                 1680 	movx	@dptr,a
                           1681 ;	aes220.c:435: SYNCDELAY(); 
   038B 00                 1682 	 nop 
   038C 00                 1683 	 nop 
   038D 00                 1684 	 nop 
   038E 00                 1685 	 nop 
                           1686 ;	aes220.c:436: EP8FIFOCFG &= ~0b00000001; // 8 bit wide bus (Port B) 
   038F 90 E6 1B           1687 	mov	dptr,#_EP8FIFOCFG
   0392 E0                 1688 	movx	a,@dptr
   0393 FA                 1689 	mov	r2,a
   0394 54 FE              1690 	anl	a,#0xFE
   0396 F0                 1691 	movx	@dptr,a
                           1692 ;	aes220.c:437: SYNCDELAY(); 
   0397 00                 1693 	 nop 
   0398 00                 1694 	 nop 
   0399 00                 1695 	 nop 
   039A 00                 1696 	 nop 
                           1697 ;	aes220.c:440: FIFOPINPOLAR = 0x3D; // PKTEND, SLRD, SLWR, SLOE AND FIFO FULL active high
   039B 90 E6 09           1698 	mov	dptr,#_FIFOPINPOLAR
   039E 74 3D              1699 	mov	a,#0x3D
   03A0 F0                 1700 	movx	@dptr,a
                           1701 ;	aes220.c:441: PINFLAGSAB = 0xE0; // Flag B is EP6 FIFO full flag
   03A1 90 E6 02           1702 	mov	dptr,#_PINFLAGSAB
   03A4 74 E0              1703 	mov	a,#0xE0
   03A6 F0                 1704 	movx	@dptr,a
                           1705 ;	aes220.c:442: SYNCDELAY();
   03A7 00                 1706 	 nop 
   03A8 00                 1707 	 nop 
   03A9 00                 1708 	 nop 
   03AA 00                 1709 	 nop 
                           1710 ;	aes220.c:443: PINFLAGSCD = 0x08; // Flag C is EP2 FIFO empty flag
   03AB 90 E6 03           1711 	mov	dptr,#_PINFLAGSCD
   03AE 74 08              1712 	mov	a,#0x08
   03B0 F0                 1713 	movx	@dptr,a
                           1714 ;	aes220.c:444: SYNCDELAY();
   03B1 00                 1715 	 nop 
   03B2 00                 1716 	 nop 
   03B3 00                 1717 	 nop 
   03B4 00                 1718 	 nop 
                           1719 ;	aes220.c:446: OED = 0x81;
   03B5 75 B5 81           1720 	mov	_OED,#0x81
                           1721 ;	aes220.c:447: SUSPEND_F = 0;
   03B8 C2 B7              1722 	clr	_PD7
                           1723 ;	aes220.c:455: } // end of uCMode switch
   03BA 22                 1724 	ret
                           1725 ;------------------------------------------------------------
                           1726 ;Allocation info for local variables in function 'writeEeprom'
                           1727 ;------------------------------------------------------------
                           1728 ;addr                      Allocated with name '_writeEeprom_PARM_2'
                           1729 ;length                    Allocated with name '_writeEeprom_PARM_3'
                           1730 ;buf                       Allocated with name '_writeEeprom_PARM_4'
                           1731 ;prom_addr                 Allocated with name '_writeEeprom_prom_addr_1_1'
                           1732 ;addr_len                  Allocated to registers 
                           1733 ;addr_buffer               Allocated with name '_writeEeprom_addr_buffer_1_1'
                           1734 ;bs                        Allocated to registers r2 
                           1735 ;data_buffer_ptr           Allocated to registers r3 r4 r5 
                           1736 ;last_data_ptr             Allocated with name '_writeEeprom_last_data_ptr_1_1'
                           1737 ;------------------------------------------------------------
                           1738 ;	aes220.c:458: BOOL writeEeprom(BYTE prom_addr, WORD addr, WORD length, BYTE* buf)
                           1739 ;	-----------------------------------------
                           1740 ;	 function writeEeprom
                           1741 ;	-----------------------------------------
   03BB                    1742 _writeEeprom:
   03BB 85 82*11           1743 	mov	_writeEeprom_prom_addr_1_1,dpl
                           1744 ;	aes220.c:463: BYTE *data_buffer_ptr = buf;
   03BE AB*0E              1745 	mov	r3,_writeEeprom_PARM_4
   03C0 AC*0F              1746 	mov	r4,(_writeEeprom_PARM_4 + 1)
   03C2 AD*10              1747 	mov	r5,(_writeEeprom_PARM_4 + 2)
                           1748 ;	aes220.c:464: BYTE *last_data_ptr = buf + length;
   03C4 E5*0C              1749 	mov	a,_writeEeprom_PARM_3
   03C6 2B                 1750 	add	a,r3
   03C7 F5*14              1751 	mov	_writeEeprom_last_data_ptr_1_1,a
   03C9 E5*0D              1752 	mov	a,(_writeEeprom_PARM_3 + 1)
   03CB 3C                 1753 	addc	a,r4
   03CC F5*15              1754 	mov	(_writeEeprom_last_data_ptr_1_1 + 1),a
   03CE 8D*16              1755 	mov	(_writeEeprom_last_data_ptr_1_1 + 2),r5
                           1756 ;	aes220.c:467: addr_buffer[0] = MSB(addr);
   03D0 AA*0B              1757 	mov	r2,(_writeEeprom_PARM_2 + 1)
   03D2 8A*12              1758 	mov	_writeEeprom_addr_buffer_1_1,r2
                           1759 ;	aes220.c:468: addr_buffer[1] = LSB(addr);
   03D4 AA*0A              1760 	mov	r2,_writeEeprom_PARM_2
   03D6 7E 00              1761 	mov	r6,#0x00
   03D8 8A*13              1762 	mov	(_writeEeprom_addr_buffer_1_1 + 0x0001),r2
                           1763 ;	aes220.c:470: while ( data_buffer_ptr < last_data_ptr ) {
   03DA                    1764 00106$:
   03DA C3                 1765 	clr	c
   03DB EB                 1766 	mov	a,r3
   03DC 95*14              1767 	subb	a,_writeEeprom_last_data_ptr_1_1
   03DE EC                 1768 	mov	a,r4
   03DF 95*15              1769 	subb	a,(_writeEeprom_last_data_ptr_1_1 + 1)
   03E1 ED                 1770 	mov	a,r5
   03E2 95*16              1771 	subb	a,(_writeEeprom_last_data_ptr_1_1 + 2)
   03E4 40 03              1772 	jc	00115$
   03E6 02s04r5E           1773 	ljmp	00108$
   03E9                    1774 00115$:
                           1775 ;	aes220.c:471: if ( (last_data_ptr - data_buffer_ptr) > MAX_EEP_WRITE) { // 
   03E9 E5*14              1776 	mov	a,_writeEeprom_last_data_ptr_1_1
   03EB C3                 1777 	clr	c
   03EC 9B                 1778 	subb	a,r3
   03ED FA                 1779 	mov	r2,a
   03EE E5*15              1780 	mov	a,(_writeEeprom_last_data_ptr_1_1 + 1)
   03F0 9C                 1781 	subb	a,r4
   03F1 FE                 1782 	mov	r6,a
   03F2 C3                 1783 	clr	c
   03F3 74 40              1784 	mov	a,#0x40
   03F5 9A                 1785 	subb	a,r2
   03F6 74 80              1786 	mov	a,#(0x00 ^ 0x80)
   03F8 8E F0              1787 	mov	b,r6
   03FA 63 F0 80           1788 	xrl	b,#0x80
   03FD 95 F0              1789 	subb	a,b
   03FF 50 04              1790 	jnc	00102$
                           1791 ;	aes220.c:472: bs = MAX_EEP_WRITE;
   0401 7A 40              1792 	mov	r2,#0x40
   0403 80 0B              1793 	sjmp	00103$
   0405                    1794 00102$:
                           1795 ;	aes220.c:474: else bs = last_data_ptr - data_buffer_ptr;
   0405 E5*14              1796 	mov	a,_writeEeprom_last_data_ptr_1_1
   0407 C3                 1797 	clr	c
   0408 9B                 1798 	subb	a,r3
   0409 FE                 1799 	mov	r6,a
   040A E5*15              1800 	mov	a,(_writeEeprom_last_data_ptr_1_1 + 1)
   040C 9C                 1801 	subb	a,r4
   040D FF                 1802 	mov	r7,a
   040E 8E 02              1803 	mov	ar2,r6
   0410                    1804 00103$:
                           1805 ;	aes220.c:475: if ( ! i2c_write ( prom_addr, addr_len, addr_buffer, bs, data_buffer_ptr ) ) return FALSE;
   0410 75*00r12           1806 	mov	_i2c_write_PARM_3,#_writeEeprom_addr_buffer_1_1
   0413 75*01 00           1807 	mov	(_i2c_write_PARM_3 + 1),#0x00
   0416 75*02 40           1808 	mov	(_i2c_write_PARM_3 + 2),#0x40
   0419 8A*00              1809 	mov	_i2c_write_PARM_4,r2
   041B 75*01 00           1810 	mov	(_i2c_write_PARM_4 + 1),#0x00
   041E 75*00 02           1811 	mov	_i2c_write_PARM_2,#0x02
   0421 E4                 1812 	clr	a
   0422 F5*01              1813 	mov	(_i2c_write_PARM_2 + 1),a
   0424 8B*00              1814 	mov	_i2c_write_PARM_5,r3
   0426 8C*01              1815 	mov	(_i2c_write_PARM_5 + 1),r4
   0428 8D*02              1816 	mov	(_i2c_write_PARM_5 + 2),r5
   042A 85*11 82           1817 	mov	dpl,_writeEeprom_prom_addr_1_1
   042D C0 02              1818 	push	ar2
   042F C0 03              1819 	push	ar3
   0431 C0 04              1820 	push	ar4
   0433 C0 05              1821 	push	ar5
   0435 12s00r00           1822 	lcall	_i2c_write
   0438 E5 82              1823 	mov	a,dpl
   043A D0 05              1824 	pop	ar5
   043C D0 04              1825 	pop	ar4
   043E D0 03              1826 	pop	ar3
   0440 D0 02              1827 	pop	ar2
   0442 70 03              1828 	jnz	00105$
   0444 F5 82              1829 	mov	dpl,a
   0446 22                 1830 	ret
   0447                    1831 00105$:
                           1832 ;	aes220.c:476: addr += bs; // More data to come so remember to increase the address
   0447 8A 06              1833 	mov	ar6,r2
   0449 7F 00              1834 	mov	r7,#0x00
   044B EE                 1835 	mov	a,r6
   044C 25*0A              1836 	add	a,_writeEeprom_PARM_2
   044E F5*0A              1837 	mov	_writeEeprom_PARM_2,a
   0450 EF                 1838 	mov	a,r7
   0451 35*0B              1839 	addc	a,(_writeEeprom_PARM_2 + 1)
   0453 F5*0B              1840 	mov	(_writeEeprom_PARM_2 + 1),a
                           1841 ;	aes220.c:477: data_buffer_ptr += bs;
   0455 EA                 1842 	mov	a,r2
   0456 2B                 1843 	add	a,r3
   0457 FB                 1844 	mov	r3,a
   0458 E4                 1845 	clr	a
   0459 3C                 1846 	addc	a,r4
   045A FC                 1847 	mov	r4,a
   045B 02s03rDA           1848 	ljmp	00106$
   045E                    1849 00108$:
                           1850 ;	aes220.c:479: return TRUE;
   045E 75 82 01           1851 	mov	dpl,#0x01
   0461 22                 1852 	ret
                           1853 ;------------------------------------------------------------
                           1854 ;Allocation info for local variables in function 'execFlashCmd'
                           1855 ;------------------------------------------------------------
                           1856 ;len                       Allocated with name '_execFlashCmd_PARM_2'
                           1857 ;cmd                       Allocated to registers r2 r3 
                           1858 ;i                         Allocated to registers r2 
                           1859 ;------------------------------------------------------------
                           1860 ;	aes220.c:482: void execFlashCmd(WORD cmd, WORD len)
                           1861 ;	-----------------------------------------
                           1862 ;	 function execFlashCmd
                           1863 ;	-----------------------------------------
   0462                    1864 _execFlashCmd:
   0462 AA 82              1865 	mov	r2,dpl
                           1866 ;	aes220.c:485: CS_B = 0;    // Enable SPI interface
   0464 C2 B3              1867 	clr	_PD3
                           1868 ;	aes220.c:486: transferSpiByte((BYTE)cmd);
   0466 8A 82              1869 	mov	dpl,r2
   0468 12s04rAC           1870 	lcall	_transferSpiByte
                           1871 ;	aes220.c:487: for (i=0; i<len; i++) {
   046B 7A 00              1872 	mov	r2,#0x00
   046D                    1873 00101$:
   046D 8A 03              1874 	mov	ar3,r2
   046F 7C 00              1875 	mov	r4,#0x00
   0471 C3                 1876 	clr	c
   0472 EB                 1877 	mov	a,r3
   0473 95*17              1878 	subb	a,_execFlashCmd_PARM_2
   0475 EC                 1879 	mov	a,r4
   0476 95*18              1880 	subb	a,(_execFlashCmd_PARM_2 + 1)
   0478 50 2F              1881 	jnc	00104$
                           1882 ;	aes220.c:488: EP0BUF[i] = transferSpiByte(EP0BUF[i]);
   047A EA                 1883 	mov	a,r2
   047B 24 40              1884 	add	a,#_EP0BUF
   047D FB                 1885 	mov	r3,a
   047E E4                 1886 	clr	a
   047F 34 E7              1887 	addc	a,#(_EP0BUF >> 8)
   0481 FC                 1888 	mov	r4,a
   0482 EA                 1889 	mov	a,r2
   0483 24 40              1890 	add	a,#_EP0BUF
   0485 F5 82              1891 	mov	dpl,a
   0487 E4                 1892 	clr	a
   0488 34 E7              1893 	addc	a,#(_EP0BUF >> 8)
   048A F5 83              1894 	mov	dph,a
   048C E0                 1895 	movx	a,@dptr
   048D F5 82              1896 	mov	dpl,a
   048F C0 02              1897 	push	ar2
   0491 C0 03              1898 	push	ar3
   0493 C0 04              1899 	push	ar4
   0495 12s04rAC           1900 	lcall	_transferSpiByte
   0498 AD 82              1901 	mov	r5,dpl
   049A D0 04              1902 	pop	ar4
   049C D0 03              1903 	pop	ar3
   049E D0 02              1904 	pop	ar2
   04A0 8B 82              1905 	mov	dpl,r3
   04A2 8C 83              1906 	mov	dph,r4
   04A4 ED                 1907 	mov	a,r5
   04A5 F0                 1908 	movx	@dptr,a
                           1909 ;	aes220.c:487: for (i=0; i<len; i++) {
   04A6 0A                 1910 	inc	r2
   04A7 80 C4              1911 	sjmp	00101$
   04A9                    1912 00104$:
                           1913 ;	aes220.c:490: CS_B = 1;
   04A9 D2 B3              1914 	setb	_PD3
   04AB 22                 1915 	ret
                           1916 ;------------------------------------------------------------
                           1917 ;Allocation info for local variables in function 'transferSpiByte'
                           1918 ;------------------------------------------------------------
                           1919 ;spiByte                   Allocated to registers 
                           1920 ;------------------------------------------------------------
                           1921 ;	aes220.c:493: BYTE transferSpiByte(BYTE spiByte) 
                           1922 ;	-----------------------------------------
                           1923 ;	 function transferSpiByte
                           1924 ;	-----------------------------------------
   04AC                    1925 _transferSpiByte:
   04AC 85 82 90           1926 	mov	_IOB,dpl
                           1927 ;	aes220.c:496: LOAD_B = 0;
   04AF C2 B2              1928 	clr	_PD2
                           1929 ;	aes220.c:497: LOAD_B = 1;
   04B1 D2 B2              1930 	setb	_PD2
                           1931 ;	aes220.c:498: NOP;
   04B3 00                 1932 	 nop 
                           1933 ;	aes220.c:499: NOP;
   04B4 00                 1934 	 nop 
                           1935 ;	aes220.c:500: NOP;
   04B5 00                 1936 	 nop 
                           1937 ;	aes220.c:501: return IOA;
   04B6 85 80 82           1938 	mov	dpl,_IOA
   04B9 22                 1939 	ret
                           1940 ;------------------------------------------------------------
                           1941 ;Allocation info for local variables in function 'readBoardStatusRegister'
                           1942 ;------------------------------------------------------------
                           1943 ;addr_len                  Allocated to registers 
                           1944 ;addr_buffer               Allocated to registers 
                           1945 ;bs                        Allocated to registers 
                           1946 ;buf                       Allocated with name '_readBoardStatusRegister_buf_1_1'
                           1947 ;------------------------------------------------------------
                           1948 ;	aes220.c:504: BYTE readBoardStatusRegister()
                           1949 ;	-----------------------------------------
                           1950 ;	 function readBoardStatusRegister
                           1951 ;	-----------------------------------------
   04BA                    1952 _readBoardStatusRegister:
                           1953 ;	aes220.c:514: if (!eeprom_read(0x51, addr_buffer, bs, &buf)) return 0x00;
   04BA 75*00r19           1954 	mov	_eeprom_read_PARM_4,#_readBoardStatusRegister_buf_1_1
   04BD 75*01 00           1955 	mov	(_eeprom_read_PARM_4 + 1),#0x00
   04C0 75*02 40           1956 	mov	(_eeprom_read_PARM_4 + 2),#0x40
   04C3 75*00 F8           1957 	mov	_eeprom_read_PARM_2,#0xF8
   04C6 75*01 3D           1958 	mov	(_eeprom_read_PARM_2 + 1),#0x3D
   04C9 75*00 01           1959 	mov	_eeprom_read_PARM_3,#0x01
   04CC E4                 1960 	clr	a
   04CD F5*01              1961 	mov	(_eeprom_read_PARM_3 + 1),a
   04CF 75 82 51           1962 	mov	dpl,#0x51
   04D2 12s00r00           1963 	lcall	_eeprom_read
   04D5 E5 82              1964 	mov	a,dpl
   04D7 70 03              1965 	jnz	00102$
   04D9 F5 82              1966 	mov	dpl,a
                           1967 ;	aes220.c:516: return buf;
   04DB 22                 1968 	ret
   04DC                    1969 00102$:
   04DC 85*19 82           1970 	mov	dpl,_readBoardStatusRegister_buf_1_1
   04DF 22                 1971 	ret
                           1972 	.area CSEG    (CODE)
                           1973 	.area CONST   (CODE)
                           1974 	.area XINIT   (CODE)
                           1975 	.area CABS    (ABS,CODE)
