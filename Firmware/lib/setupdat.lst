                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Fri May 20 09:44:32 2011
                              5 ;--------------------------------------------------------
                              6 	.module setupdat
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _EIPX6
                             13 	.globl _EIPX5
                             14 	.globl _EIPX4
                             15 	.globl _PI2C
                             16 	.globl _PUSB
                             17 	.globl _EIEX6
                             18 	.globl _EIEX5
                             19 	.globl _EIEX4
                             20 	.globl _EI2C
                             21 	.globl _EUSB
                             22 	.globl _SMOD1
                             23 	.globl _ERESI
                             24 	.globl _RESI
                             25 	.globl _INT6
                             26 	.globl _CY
                             27 	.globl _AC
                             28 	.globl _F0
                             29 	.globl _RS1
                             30 	.globl _RS0
                             31 	.globl _OV
                             32 	.globl _FL
                             33 	.globl _P
                             34 	.globl _TF2
                             35 	.globl _EXF2
                             36 	.globl _RCLK
                             37 	.globl _TCLK
                             38 	.globl _EXEN2
                             39 	.globl _TR2
                             40 	.globl _C_T2
                             41 	.globl _CP_RL2
                             42 	.globl _SM01
                             43 	.globl _SM11
                             44 	.globl _SM21
                             45 	.globl _REN1
                             46 	.globl _TB81
                             47 	.globl _RB81
                             48 	.globl _TI1
                             49 	.globl _RI1
                             50 	.globl _PS1
                             51 	.globl _PT2
                             52 	.globl _PS0
                             53 	.globl _PT1
                             54 	.globl _PX1
                             55 	.globl _PT0
                             56 	.globl _PX0
                             57 	.globl _PD7
                             58 	.globl _PD6
                             59 	.globl _PD5
                             60 	.globl _PD4
                             61 	.globl _PD3
                             62 	.globl _PD2
                             63 	.globl _PD1
                             64 	.globl _PD0
                             65 	.globl _EA
                             66 	.globl _ES1
                             67 	.globl _ET2
                             68 	.globl _ES0
                             69 	.globl _ET1
                             70 	.globl _EX1
                             71 	.globl _ET0
                             72 	.globl _EX0
                             73 	.globl _PC7
                             74 	.globl _PC6
                             75 	.globl _PC5
                             76 	.globl _PC4
                             77 	.globl _PC3
                             78 	.globl _PC2
                             79 	.globl _PC1
                             80 	.globl _PC0
                             81 	.globl _SM0
                             82 	.globl _SM1
                             83 	.globl _SM2
                             84 	.globl _REN
                             85 	.globl _TB8
                             86 	.globl _RB8
                             87 	.globl _TI
                             88 	.globl _RI
                             89 	.globl _PB7
                             90 	.globl _PB6
                             91 	.globl _PB5
                             92 	.globl _PB4
                             93 	.globl _PB3
                             94 	.globl _PB2
                             95 	.globl _PB1
                             96 	.globl _PB0
                             97 	.globl _TF1
                             98 	.globl _TR1
                             99 	.globl _TF0
                            100 	.globl _TR0
                            101 	.globl _IE1
                            102 	.globl _IT1
                            103 	.globl _IE0
                            104 	.globl _IT0
                            105 	.globl _PA7
                            106 	.globl _PA6
                            107 	.globl _PA5
                            108 	.globl _PA4
                            109 	.globl _PA3
                            110 	.globl _PA2
                            111 	.globl _PA1
                            112 	.globl _PA0
                            113 	.globl _EIP
                            114 	.globl _B
                            115 	.globl _EIE
                            116 	.globl _ACC
                            117 	.globl _EICON
                            118 	.globl _PSW
                            119 	.globl _TH2
                            120 	.globl _TL2
                            121 	.globl _RCAP2H
                            122 	.globl _RCAP2L
                            123 	.globl _T2CON
                            124 	.globl _SBUF1
                            125 	.globl _SCON1
                            126 	.globl _GPIFSGLDATLNOX
                            127 	.globl _GPIFSGLDATLX
                            128 	.globl _GPIFSGLDATH
                            129 	.globl _GPIFTRIG
                            130 	.globl _EP01STAT
                            131 	.globl _IP
                            132 	.globl _OEE
                            133 	.globl _OED
                            134 	.globl _OEC
                            135 	.globl _OEB
                            136 	.globl _OEA
                            137 	.globl _IOE
                            138 	.globl _IOD
                            139 	.globl _AUTOPTRSETUP
                            140 	.globl _EP68FIFOFLGS
                            141 	.globl _EP24FIFOFLGS
                            142 	.globl _EP2468STAT
                            143 	.globl _IE
                            144 	.globl _INT4CLR
                            145 	.globl _INT2CLR
                            146 	.globl _IOC
                            147 	.globl _AUTOPTRL2
                            148 	.globl _AUTOPTRH2
                            149 	.globl _AUTOPTRL1
                            150 	.globl _AUTOPTRH1
                            151 	.globl _SBUF0
                            152 	.globl _SCON0
                            153 	.globl __XPAGE
                            154 	.globl _EXIF
                            155 	.globl _IOB
                            156 	.globl _CKCON
                            157 	.globl _TH1
                            158 	.globl _TH0
                            159 	.globl _TL1
                            160 	.globl _TL0
                            161 	.globl _TMOD
                            162 	.globl _TCON
                            163 	.globl _PCON
                            164 	.globl _DPS
                            165 	.globl _DPH1
                            166 	.globl _DPL1
                            167 	.globl _DPH
                            168 	.globl _DPL
                            169 	.globl _SP
                            170 	.globl _IOA
                            171 	.globl _GPCR2
                            172 	.globl _ECC2B2
                            173 	.globl _ECC2B1
                            174 	.globl _ECC2B0
                            175 	.globl _ECC1B2
                            176 	.globl _ECC1B1
                            177 	.globl _ECC1B0
                            178 	.globl _ECCRESET
                            179 	.globl _ECCCFG
                            180 	.globl _EP8FIFOBUF
                            181 	.globl _EP6FIFOBUF
                            182 	.globl _EP4FIFOBUF
                            183 	.globl _EP2FIFOBUF
                            184 	.globl _EP1INBUF
                            185 	.globl _EP1OUTBUF
                            186 	.globl _EP0BUF
                            187 	.globl _UDMACRCQUAL
                            188 	.globl _UDMACRCL
                            189 	.globl _UDMACRCH
                            190 	.globl _GPIFHOLDAMOUNT
                            191 	.globl _FLOWSTBHPERIOD
                            192 	.globl _FLOWSTBEDGE
                            193 	.globl _FLOWSTB
                            194 	.globl _FLOWHOLDOFF
                            195 	.globl _FLOWEQ1CTL
                            196 	.globl _FLOWEQ0CTL
                            197 	.globl _FLOWLOGIC
                            198 	.globl _FLOWSTATE
                            199 	.globl _GPIFABORT
                            200 	.globl _GPIFREADYSTAT
                            201 	.globl _GPIFREADYCFG
                            202 	.globl _XGPIFSGLDATLNOX
                            203 	.globl _XGPIFSGLDATLX
                            204 	.globl _XGPIFSGLDATH
                            205 	.globl _EP8GPIFTRIG
                            206 	.globl _EP8GPIFPFSTOP
                            207 	.globl _EP8GPIFFLGSEL
                            208 	.globl _EP6GPIFTRIG
                            209 	.globl _EP6GPIFPFSTOP
                            210 	.globl _EP6GPIFFLGSEL
                            211 	.globl _EP4GPIFTRIG
                            212 	.globl _EP4GPIFPFSTOP
                            213 	.globl _EP4GPIFFLGSEL
                            214 	.globl _EP2GPIFTRIG
                            215 	.globl _EP2GPIFPFSTOP
                            216 	.globl _EP2GPIFFLGSEL
                            217 	.globl _GPIFTCB0
                            218 	.globl _GPIFTCB1
                            219 	.globl _GPIFTCB2
                            220 	.globl _GPIFTCB3
                            221 	.globl _GPIFADRL
                            222 	.globl _GPIFADRH
                            223 	.globl _GPIFCTLCFG
                            224 	.globl _GPIFIDLECTL
                            225 	.globl _GPIFIDLECS
                            226 	.globl _GPIFWFSELECT
                            227 	.globl _SETUPDAT
                            228 	.globl _SUDPTRCTL
                            229 	.globl _SUDPTRL
                            230 	.globl _SUDPTRH
                            231 	.globl _EP8FIFOBCL
                            232 	.globl _EP8FIFOBCH
                            233 	.globl _EP6FIFOBCL
                            234 	.globl _EP6FIFOBCH
                            235 	.globl _EP4FIFOBCL
                            236 	.globl _EP4FIFOBCH
                            237 	.globl _EP2FIFOBCL
                            238 	.globl _EP2FIFOBCH
                            239 	.globl _EP8FIFOFLGS
                            240 	.globl _EP6FIFOFLGS
                            241 	.globl _EP4FIFOFLGS
                            242 	.globl _EP2FIFOFLGS
                            243 	.globl _EP8CS
                            244 	.globl _EP6CS
                            245 	.globl _EP4CS
                            246 	.globl _EP2CS
                            247 	.globl _EP1INCS
                            248 	.globl _EP1OUTCS
                            249 	.globl _EP0CS
                            250 	.globl _EP8BCL
                            251 	.globl _EP8BCH
                            252 	.globl _EP6BCL
                            253 	.globl _EP6BCH
                            254 	.globl _EP4BCL
                            255 	.globl _EP4BCH
                            256 	.globl _EP2BCL
                            257 	.globl _EP2BCH
                            258 	.globl _EP1INBC
                            259 	.globl _EP1OUTBC
                            260 	.globl _EP0BCL
                            261 	.globl _EP0BCH
                            262 	.globl _FNADDR
                            263 	.globl _MICROFRAME
                            264 	.globl _USBFRAMEL
                            265 	.globl _USBFRAMEH
                            266 	.globl _TOGCTL
                            267 	.globl _WAKEUPCS
                            268 	.globl _SUSPEND
                            269 	.globl _USBCS
                            270 	.globl _XAUTODAT2
                            271 	.globl _XAUTODAT1
                            272 	.globl _I2CTL
                            273 	.globl _I2DAT
                            274 	.globl _I2CS
                            275 	.globl _PORTECFG
                            276 	.globl _PORTCCFG
                            277 	.globl _PORTACFG
                            278 	.globl _INTSETUP
                            279 	.globl _INT4IVEC
                            280 	.globl _INT2IVEC
                            281 	.globl _CLRERRCNT
                            282 	.globl _ERRCNTLIM
                            283 	.globl _USBERRIRQ
                            284 	.globl _USBERRIE
                            285 	.globl _GPIFIRQ
                            286 	.globl _GPIFIE
                            287 	.globl _EPIRQ
                            288 	.globl _EPIE
                            289 	.globl _USBIRQ
                            290 	.globl _USBIE
                            291 	.globl _NAKIRQ
                            292 	.globl _NAKIE
                            293 	.globl _IBNIRQ
                            294 	.globl _IBNIE
                            295 	.globl _EP8FIFOIRQ
                            296 	.globl _EP8FIFOIE
                            297 	.globl _EP6FIFOIRQ
                            298 	.globl _EP6FIFOIE
                            299 	.globl _EP4FIFOIRQ
                            300 	.globl _EP4FIFOIE
                            301 	.globl _EP2FIFOIRQ
                            302 	.globl _EP2FIFOIE
                            303 	.globl _OUTPKTEND
                            304 	.globl _INPKTEND
                            305 	.globl _EP8ISOINPKTS
                            306 	.globl _EP6ISOINPKTS
                            307 	.globl _EP4ISOINPKTS
                            308 	.globl _EP2ISOINPKTS
                            309 	.globl _EP8FIFOPFL
                            310 	.globl _EP8FIFOPFH
                            311 	.globl _EP6FIFOPFL
                            312 	.globl _EP6FIFOPFH
                            313 	.globl _EP4FIFOPFL
                            314 	.globl _EP4FIFOPFH
                            315 	.globl _EP2FIFOPFL
                            316 	.globl _EP2FIFOPFH
                            317 	.globl _EP8AUTOINLENL
                            318 	.globl _EP8AUTOINLENH
                            319 	.globl _EP6AUTOINLENL
                            320 	.globl _EP6AUTOINLENH
                            321 	.globl _EP4AUTOINLENL
                            322 	.globl _EP4AUTOINLENH
                            323 	.globl _EP2AUTOINLENL
                            324 	.globl _EP2AUTOINLENH
                            325 	.globl _EP8FIFOCFG
                            326 	.globl _EP6FIFOCFG
                            327 	.globl _EP4FIFOCFG
                            328 	.globl _EP2FIFOCFG
                            329 	.globl _EP8CFG
                            330 	.globl _EP6CFG
                            331 	.globl _EP4CFG
                            332 	.globl _EP2CFG
                            333 	.globl _EP1INCFG
                            334 	.globl _EP1OUTCFG
                            335 	.globl _REVCTL
                            336 	.globl _REVID
                            337 	.globl _FIFOPINPOLAR
                            338 	.globl _UART230
                            339 	.globl _BPADDRL
                            340 	.globl _BPADDRH
                            341 	.globl _BREAKPT
                            342 	.globl _FIFORESET
                            343 	.globl _PINFLAGSCD
                            344 	.globl _PINFLAGSAB
                            345 	.globl _IFCONFIG
                            346 	.globl _CPUCS
                            347 	.globl _RES_WAVEDATA_END
                            348 	.globl _GPIF_WAVE_DATA
                            349 	.globl _pOtherConfig
                            350 	.globl _pDevConfig
                            351 	.globl _remote_wakeup_allowed
                            352 	.globl _self_powered
                            353 	.globl _handle_setupdata
                            354 	.globl _ep_addr
                            355 	.globl _handle_get_status
                            356 	.globl _handle_clear_feature
                            357 	.globl _handle_set_feature
                            358 	.globl _handle_hispeed
                            359 	.globl _handle_get_descriptor
                            360 ;--------------------------------------------------------
                            361 ; special function registers
                            362 ;--------------------------------------------------------
                            363 	.area RSEG    (DATA)
                    0080    364 _IOA	=	0x0080
                    0081    365 _SP	=	0x0081
                    0082    366 _DPL	=	0x0082
                    0083    367 _DPH	=	0x0083
                    0084    368 _DPL1	=	0x0084
                    0085    369 _DPH1	=	0x0085
                    0086    370 _DPS	=	0x0086
                    0087    371 _PCON	=	0x0087
                    0088    372 _TCON	=	0x0088
                    0089    373 _TMOD	=	0x0089
                    008A    374 _TL0	=	0x008a
                    008B    375 _TL1	=	0x008b
                    008C    376 _TH0	=	0x008c
                    008D    377 _TH1	=	0x008d
                    008E    378 _CKCON	=	0x008e
                    0090    379 _IOB	=	0x0090
                    0091    380 _EXIF	=	0x0091
                    0092    381 __XPAGE	=	0x0092
                    0098    382 _SCON0	=	0x0098
                    0099    383 _SBUF0	=	0x0099
                    009A    384 _AUTOPTRH1	=	0x009a
                    009B    385 _AUTOPTRL1	=	0x009b
                    009D    386 _AUTOPTRH2	=	0x009d
                    009E    387 _AUTOPTRL2	=	0x009e
                    00A0    388 _IOC	=	0x00a0
                    00A1    389 _INT2CLR	=	0x00a1
                    00A2    390 _INT4CLR	=	0x00a2
                    00A8    391 _IE	=	0x00a8
                    00AA    392 _EP2468STAT	=	0x00aa
                    00AB    393 _EP24FIFOFLGS	=	0x00ab
                    00AC    394 _EP68FIFOFLGS	=	0x00ac
                    00AF    395 _AUTOPTRSETUP	=	0x00af
                    00B0    396 _IOD	=	0x00b0
                    00B1    397 _IOE	=	0x00b1
                    00B2    398 _OEA	=	0x00b2
                    00B3    399 _OEB	=	0x00b3
                    00B4    400 _OEC	=	0x00b4
                    00B5    401 _OED	=	0x00b5
                    00B6    402 _OEE	=	0x00b6
                    00B8    403 _IP	=	0x00b8
                    00BA    404 _EP01STAT	=	0x00ba
                    00BB    405 _GPIFTRIG	=	0x00bb
                    00BD    406 _GPIFSGLDATH	=	0x00bd
                    00BE    407 _GPIFSGLDATLX	=	0x00be
                    00BF    408 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    409 _SCON1	=	0x00c0
                    00C1    410 _SBUF1	=	0x00c1
                    00C8    411 _T2CON	=	0x00c8
                    00CA    412 _RCAP2L	=	0x00ca
                    00CB    413 _RCAP2H	=	0x00cb
                    00CC    414 _TL2	=	0x00cc
                    00CD    415 _TH2	=	0x00cd
                    00D0    416 _PSW	=	0x00d0
                    00D8    417 _EICON	=	0x00d8
                    00E0    418 _ACC	=	0x00e0
                    00E8    419 _EIE	=	0x00e8
                    00F0    420 _B	=	0x00f0
                    00F8    421 _EIP	=	0x00f8
                            422 ;--------------------------------------------------------
                            423 ; special function bits
                            424 ;--------------------------------------------------------
                            425 	.area RSEG    (DATA)
                    0080    426 _PA0	=	0x0080
                    0081    427 _PA1	=	0x0081
                    0082    428 _PA2	=	0x0082
                    0083    429 _PA3	=	0x0083
                    0084    430 _PA4	=	0x0084
                    0085    431 _PA5	=	0x0085
                    0086    432 _PA6	=	0x0086
                    0087    433 _PA7	=	0x0087
                    0088    434 _IT0	=	0x0088
                    0089    435 _IE0	=	0x0089
                    008A    436 _IT1	=	0x008a
                    008B    437 _IE1	=	0x008b
                    008C    438 _TR0	=	0x008c
                    008D    439 _TF0	=	0x008d
                    008E    440 _TR1	=	0x008e
                    008F    441 _TF1	=	0x008f
                    0090    442 _PB0	=	0x0090
                    0091    443 _PB1	=	0x0091
                    0092    444 _PB2	=	0x0092
                    0093    445 _PB3	=	0x0093
                    0094    446 _PB4	=	0x0094
                    0095    447 _PB5	=	0x0095
                    0096    448 _PB6	=	0x0096
                    0097    449 _PB7	=	0x0097
                    0098    450 _RI	=	0x0098
                    0099    451 _TI	=	0x0099
                    009A    452 _RB8	=	0x009a
                    009B    453 _TB8	=	0x009b
                    009C    454 _REN	=	0x009c
                    009D    455 _SM2	=	0x009d
                    009E    456 _SM1	=	0x009e
                    009F    457 _SM0	=	0x009f
                    00A0    458 _PC0	=	0x00a0
                    00A1    459 _PC1	=	0x00a1
                    00A2    460 _PC2	=	0x00a2
                    00A3    461 _PC3	=	0x00a3
                    00A4    462 _PC4	=	0x00a4
                    00A5    463 _PC5	=	0x00a5
                    00A6    464 _PC6	=	0x00a6
                    00A7    465 _PC7	=	0x00a7
                    00A8    466 _EX0	=	0x00a8
                    00A9    467 _ET0	=	0x00a9
                    00AA    468 _EX1	=	0x00aa
                    00AB    469 _ET1	=	0x00ab
                    00AC    470 _ES0	=	0x00ac
                    00AD    471 _ET2	=	0x00ad
                    00AE    472 _ES1	=	0x00ae
                    00AF    473 _EA	=	0x00af
                    00B0    474 _PD0	=	0x00b0
                    00B1    475 _PD1	=	0x00b1
                    00B2    476 _PD2	=	0x00b2
                    00B3    477 _PD3	=	0x00b3
                    00B4    478 _PD4	=	0x00b4
                    00B5    479 _PD5	=	0x00b5
                    00B6    480 _PD6	=	0x00b6
                    00B7    481 _PD7	=	0x00b7
                    00B8    482 _PX0	=	0x00b8
                    00B9    483 _PT0	=	0x00b9
                    00BA    484 _PX1	=	0x00ba
                    00BB    485 _PT1	=	0x00bb
                    00BC    486 _PS0	=	0x00bc
                    00BD    487 _PT2	=	0x00bd
                    00BE    488 _PS1	=	0x00be
                    00C0    489 _RI1	=	0x00c0
                    00C1    490 _TI1	=	0x00c1
                    00C2    491 _RB81	=	0x00c2
                    00C3    492 _TB81	=	0x00c3
                    00C4    493 _REN1	=	0x00c4
                    00C5    494 _SM21	=	0x00c5
                    00C6    495 _SM11	=	0x00c6
                    00C7    496 _SM01	=	0x00c7
                    00C8    497 _CP_RL2	=	0x00c8
                    00C9    498 _C_T2	=	0x00c9
                    00CA    499 _TR2	=	0x00ca
                    00CB    500 _EXEN2	=	0x00cb
                    00CC    501 _TCLK	=	0x00cc
                    00CD    502 _RCLK	=	0x00cd
                    00CE    503 _EXF2	=	0x00ce
                    00CF    504 _TF2	=	0x00cf
                    00D0    505 _P	=	0x00d0
                    00D1    506 _FL	=	0x00d1
                    00D2    507 _OV	=	0x00d2
                    00D3    508 _RS0	=	0x00d3
                    00D4    509 _RS1	=	0x00d4
                    00D5    510 _F0	=	0x00d5
                    00D6    511 _AC	=	0x00d6
                    00D7    512 _CY	=	0x00d7
                    00DB    513 _INT6	=	0x00db
                    00DC    514 _RESI	=	0x00dc
                    00DD    515 _ERESI	=	0x00dd
                    00DF    516 _SMOD1	=	0x00df
                    00E8    517 _EUSB	=	0x00e8
                    00E9    518 _EI2C	=	0x00e9
                    00EA    519 _EIEX4	=	0x00ea
                    00EB    520 _EIEX5	=	0x00eb
                    00EC    521 _EIEX6	=	0x00ec
                    00F8    522 _PUSB	=	0x00f8
                    00F9    523 _PI2C	=	0x00f9
                    00FA    524 _EIPX4	=	0x00fa
                    00FB    525 _EIPX5	=	0x00fb
                    00FC    526 _EIPX6	=	0x00fc
                            527 ;--------------------------------------------------------
                            528 ; overlayable register banks
                            529 ;--------------------------------------------------------
                            530 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     531 	.ds 8
                            532 ;--------------------------------------------------------
                            533 ; internal ram data
                            534 ;--------------------------------------------------------
                            535 	.area DSEG    (DATA)
   0000                     536 _handle_setupdata_alt_ifc_3_6:
   0000                     537 	.ds 1
   0001                     538 _self_powered::
   0001                     539 	.ds 1
   0002                     540 _remote_wakeup_allowed::
   0002                     541 	.ds 1
   0003                     542 _pDevConfig::
   0003                     543 	.ds 2
   0005                     544 _pOtherConfig::
   0005                     545 	.ds 2
                            546 ;--------------------------------------------------------
                            547 ; overlayable items in internal ram 
                            548 ;--------------------------------------------------------
                            549 	.area	OSEG    (OVR,DATA)
                            550 	.area	OSEG    (OVR,DATA)
                            551 	.area	OSEG    (OVR,DATA)
                            552 ;--------------------------------------------------------
                            553 ; indirectly addressable internal ram data
                            554 ;--------------------------------------------------------
                            555 	.area ISEG    (DATA)
                            556 ;--------------------------------------------------------
                            557 ; absolute internal ram data
                            558 ;--------------------------------------------------------
                            559 	.area IABS    (ABS,DATA)
                            560 	.area IABS    (ABS,DATA)
                            561 ;--------------------------------------------------------
                            562 ; bit data
                            563 ;--------------------------------------------------------
                            564 	.area BSEG    (BIT)
   0000                     565 _handle_hispeed_sloc0_1_0:
   0000                     566 	.ds 1
                            567 ;--------------------------------------------------------
                            568 ; paged external ram data
                            569 ;--------------------------------------------------------
                            570 	.area PSEG    (PAG,XDATA)
                            571 ;--------------------------------------------------------
                            572 ; external ram data
                            573 ;--------------------------------------------------------
                            574 	.area XSEG    (XDATA)
                    E400    575 _GPIF_WAVE_DATA	=	0xe400
                    E480    576 _RES_WAVEDATA_END	=	0xe480
                    E600    577 _CPUCS	=	0xe600
                    E601    578 _IFCONFIG	=	0xe601
                    E602    579 _PINFLAGSAB	=	0xe602
                    E603    580 _PINFLAGSCD	=	0xe603
                    E604    581 _FIFORESET	=	0xe604
                    E605    582 _BREAKPT	=	0xe605
                    E606    583 _BPADDRH	=	0xe606
                    E607    584 _BPADDRL	=	0xe607
                    E608    585 _UART230	=	0xe608
                    E609    586 _FIFOPINPOLAR	=	0xe609
                    E60A    587 _REVID	=	0xe60a
                    E60B    588 _REVCTL	=	0xe60b
                    E610    589 _EP1OUTCFG	=	0xe610
                    E611    590 _EP1INCFG	=	0xe611
                    E612    591 _EP2CFG	=	0xe612
                    E613    592 _EP4CFG	=	0xe613
                    E614    593 _EP6CFG	=	0xe614
                    E615    594 _EP8CFG	=	0xe615
                    E618    595 _EP2FIFOCFG	=	0xe618
                    E619    596 _EP4FIFOCFG	=	0xe619
                    E61A    597 _EP6FIFOCFG	=	0xe61a
                    E61B    598 _EP8FIFOCFG	=	0xe61b
                    E620    599 _EP2AUTOINLENH	=	0xe620
                    E621    600 _EP2AUTOINLENL	=	0xe621
                    E622    601 _EP4AUTOINLENH	=	0xe622
                    E623    602 _EP4AUTOINLENL	=	0xe623
                    E624    603 _EP6AUTOINLENH	=	0xe624
                    E625    604 _EP6AUTOINLENL	=	0xe625
                    E626    605 _EP8AUTOINLENH	=	0xe626
                    E627    606 _EP8AUTOINLENL	=	0xe627
                    E630    607 _EP2FIFOPFH	=	0xe630
                    E631    608 _EP2FIFOPFL	=	0xe631
                    E632    609 _EP4FIFOPFH	=	0xe632
                    E633    610 _EP4FIFOPFL	=	0xe633
                    E634    611 _EP6FIFOPFH	=	0xe634
                    E635    612 _EP6FIFOPFL	=	0xe635
                    E636    613 _EP8FIFOPFH	=	0xe636
                    E637    614 _EP8FIFOPFL	=	0xe637
                    E640    615 _EP2ISOINPKTS	=	0xe640
                    E641    616 _EP4ISOINPKTS	=	0xe641
                    E642    617 _EP6ISOINPKTS	=	0xe642
                    E643    618 _EP8ISOINPKTS	=	0xe643
                    E648    619 _INPKTEND	=	0xe648
                    E649    620 _OUTPKTEND	=	0xe649
                    E650    621 _EP2FIFOIE	=	0xe650
                    E651    622 _EP2FIFOIRQ	=	0xe651
                    E652    623 _EP4FIFOIE	=	0xe652
                    E653    624 _EP4FIFOIRQ	=	0xe653
                    E654    625 _EP6FIFOIE	=	0xe654
                    E655    626 _EP6FIFOIRQ	=	0xe655
                    E656    627 _EP8FIFOIE	=	0xe656
                    E657    628 _EP8FIFOIRQ	=	0xe657
                    E658    629 _IBNIE	=	0xe658
                    E659    630 _IBNIRQ	=	0xe659
                    E65A    631 _NAKIE	=	0xe65a
                    E65B    632 _NAKIRQ	=	0xe65b
                    E65C    633 _USBIE	=	0xe65c
                    E65D    634 _USBIRQ	=	0xe65d
                    E65E    635 _EPIE	=	0xe65e
                    E65F    636 _EPIRQ	=	0xe65f
                    E660    637 _GPIFIE	=	0xe660
                    E661    638 _GPIFIRQ	=	0xe661
                    E662    639 _USBERRIE	=	0xe662
                    E663    640 _USBERRIRQ	=	0xe663
                    E664    641 _ERRCNTLIM	=	0xe664
                    E665    642 _CLRERRCNT	=	0xe665
                    E666    643 _INT2IVEC	=	0xe666
                    E667    644 _INT4IVEC	=	0xe667
                    E668    645 _INTSETUP	=	0xe668
                    E670    646 _PORTACFG	=	0xe670
                    E671    647 _PORTCCFG	=	0xe671
                    E672    648 _PORTECFG	=	0xe672
                    E678    649 _I2CS	=	0xe678
                    E679    650 _I2DAT	=	0xe679
                    E67A    651 _I2CTL	=	0xe67a
                    E67B    652 _XAUTODAT1	=	0xe67b
                    E67C    653 _XAUTODAT2	=	0xe67c
                    E680    654 _USBCS	=	0xe680
                    E681    655 _SUSPEND	=	0xe681
                    E682    656 _WAKEUPCS	=	0xe682
                    E683    657 _TOGCTL	=	0xe683
                    E684    658 _USBFRAMEH	=	0xe684
                    E685    659 _USBFRAMEL	=	0xe685
                    E686    660 _MICROFRAME	=	0xe686
                    E687    661 _FNADDR	=	0xe687
                    E68A    662 _EP0BCH	=	0xe68a
                    E68B    663 _EP0BCL	=	0xe68b
                    E68D    664 _EP1OUTBC	=	0xe68d
                    E68F    665 _EP1INBC	=	0xe68f
                    E690    666 _EP2BCH	=	0xe690
                    E691    667 _EP2BCL	=	0xe691
                    E694    668 _EP4BCH	=	0xe694
                    E695    669 _EP4BCL	=	0xe695
                    E698    670 _EP6BCH	=	0xe698
                    E699    671 _EP6BCL	=	0xe699
                    E69C    672 _EP8BCH	=	0xe69c
                    E69D    673 _EP8BCL	=	0xe69d
                    E6A0    674 _EP0CS	=	0xe6a0
                    E6A1    675 _EP1OUTCS	=	0xe6a1
                    E6A2    676 _EP1INCS	=	0xe6a2
                    E6A3    677 _EP2CS	=	0xe6a3
                    E6A4    678 _EP4CS	=	0xe6a4
                    E6A5    679 _EP6CS	=	0xe6a5
                    E6A6    680 _EP8CS	=	0xe6a6
                    E6A7    681 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    682 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    683 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    684 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    685 _EP2FIFOBCH	=	0xe6ab
                    E6AC    686 _EP2FIFOBCL	=	0xe6ac
                    E6AD    687 _EP4FIFOBCH	=	0xe6ad
                    E6AE    688 _EP4FIFOBCL	=	0xe6ae
                    E6AF    689 _EP6FIFOBCH	=	0xe6af
                    E6B0    690 _EP6FIFOBCL	=	0xe6b0
                    E6B1    691 _EP8FIFOBCH	=	0xe6b1
                    E6B2    692 _EP8FIFOBCL	=	0xe6b2
                    E6B3    693 _SUDPTRH	=	0xe6b3
                    E6B4    694 _SUDPTRL	=	0xe6b4
                    E6B5    695 _SUDPTRCTL	=	0xe6b5
                    E6B8    696 _SETUPDAT	=	0xe6b8
                    E6C0    697 _GPIFWFSELECT	=	0xe6c0
                    E6C1    698 _GPIFIDLECS	=	0xe6c1
                    E6C2    699 _GPIFIDLECTL	=	0xe6c2
                    E6C3    700 _GPIFCTLCFG	=	0xe6c3
                    E6C4    701 _GPIFADRH	=	0xe6c4
                    E6C5    702 _GPIFADRL	=	0xe6c5
                    E6CE    703 _GPIFTCB3	=	0xe6ce
                    E6CF    704 _GPIFTCB2	=	0xe6cf
                    E6D0    705 _GPIFTCB1	=	0xe6d0
                    E6D1    706 _GPIFTCB0	=	0xe6d1
                    E6D2    707 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    708 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    709 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    710 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    711 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    712 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    713 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    714 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    715 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    716 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    717 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    718 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    719 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    720 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    721 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    722 _GPIFREADYCFG	=	0xe6f3
                    E6F4    723 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    724 _GPIFABORT	=	0xe6f5
                    E6C6    725 _FLOWSTATE	=	0xe6c6
                    E6C7    726 _FLOWLOGIC	=	0xe6c7
                    E6C8    727 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    728 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    729 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    730 _FLOWSTB	=	0xe6cb
                    E6CC    731 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    732 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    733 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    734 _UDMACRCH	=	0xe67d
                    E67E    735 _UDMACRCL	=	0xe67e
                    E67F    736 _UDMACRCQUAL	=	0xe67f
                    E740    737 _EP0BUF	=	0xe740
                    E780    738 _EP1OUTBUF	=	0xe780
                    E7C0    739 _EP1INBUF	=	0xe7c0
                    F000    740 _EP2FIFOBUF	=	0xf000
                    F400    741 _EP4FIFOBUF	=	0xf400
                    F800    742 _EP6FIFOBUF	=	0xf800
                    FC00    743 _EP8FIFOBUF	=	0xfc00
                    E628    744 _ECCCFG	=	0xe628
                    E629    745 _ECCRESET	=	0xe629
                    E62A    746 _ECC1B0	=	0xe62a
                    E62B    747 _ECC1B1	=	0xe62b
                    E62C    748 _ECC1B2	=	0xe62c
                    E62D    749 _ECC2B0	=	0xe62d
                    E62E    750 _ECC2B1	=	0xe62e
                    E62F    751 _ECC2B2	=	0xe62f
                    E50D    752 _GPCR2	=	0xe50d
                            753 ;--------------------------------------------------------
                            754 ; absolute external ram data
                            755 ;--------------------------------------------------------
                            756 	.area XABS    (ABS,XDATA)
                            757 ;--------------------------------------------------------
                            758 ; external initialized ram data
                            759 ;--------------------------------------------------------
                            760 	.area XISEG   (XDATA)
                            761 	.area HOME    (CODE)
                            762 	.area GSINIT0 (CODE)
                            763 	.area GSINIT1 (CODE)
                            764 	.area GSINIT2 (CODE)
                            765 	.area GSINIT3 (CODE)
                            766 	.area GSINIT4 (CODE)
                            767 	.area GSINIT5 (CODE)
                            768 	.area GSINIT  (CODE)
                            769 	.area GSFINAL (CODE)
                            770 	.area CSEG    (CODE)
                            771 ;--------------------------------------------------------
                            772 ; global & static initialisations
                            773 ;--------------------------------------------------------
                            774 	.area HOME    (CODE)
                            775 	.area GSINIT  (CODE)
                            776 	.area GSFINAL (CODE)
                            777 	.area GSINIT  (CODE)
                            778 ;	setupdat.c:154: volatile BOOL self_powered=FALSE;
   0000 75*01 00            779 	mov	_self_powered,#0x00
                            780 ;	setupdat.c:155: volatile BOOL remote_wakeup_allowed=FALSE;
   0003 75*02 00            781 	mov	_remote_wakeup_allowed,#0x00
                            782 ;	setupdat.c:277: WORD pDevConfig = (WORD)&fullspd_dscr;
   0006 75*03r00            783 	mov	_pDevConfig,#_fullspd_dscr
   0009 75*04s00            784 	mov	(_pDevConfig + 1),#(_fullspd_dscr >> 8)
                            785 ;	setupdat.c:278: WORD pOtherConfig = (WORD)&highspd_dscr;
   000C 75*05r00            786 	mov	_pOtherConfig,#_highspd_dscr
   000F 75*06s00            787 	mov	(_pOtherConfig + 1),#(_highspd_dscr >> 8)
                            788 ;--------------------------------------------------------
                            789 ; Home
                            790 ;--------------------------------------------------------
                            791 	.area HOME    (CODE)
                            792 	.area HOME    (CODE)
                            793 ;--------------------------------------------------------
                            794 ; code
                            795 ;--------------------------------------------------------
                            796 	.area CSEG    (CODE)
                            797 ;------------------------------------------------------------
                            798 ;Allocation info for local variables in function 'handle_setupdata'
                            799 ;------------------------------------------------------------
                            800 ;alt_ifc                   Allocated with name '_handle_setupdata_alt_ifc_3_6'
                            801 ;------------------------------------------------------------
                            802 ;	setupdat.c:72: void handle_setupdata() {
                            803 ;	-----------------------------------------
                            804 ;	 function handle_setupdata
                            805 ;	-----------------------------------------
   0000                     806 _handle_setupdata:
                    0002    807 	ar2 = 0x02
                    0003    808 	ar3 = 0x03
                    0004    809 	ar4 = 0x04
                    0005    810 	ar5 = 0x05
                    0006    811 	ar6 = 0x06
                    0007    812 	ar7 = 0x07
                    0000    813 	ar0 = 0x00
                    0001    814 	ar1 = 0x01
                            815 ;	setupdat.c:74: switch ( SETUPDAT[1] ) {
   0000 90 E6 B9            816 	mov	dptr,#(_SETUPDAT + 0x0001)
   0003 E0                  817 	movx	a,@dptr
   0004 FA                  818 	mov  r2,a
   0005 24 F4               819 	add	a,#0xff - 0x0B
   0007 50 03               820 	jnc	00136$
   0009 02s01r00            821 	ljmp	00122$
   000C                     822 00136$:
   000C EA                  823 	mov	a,r2
   000D 2A                  824 	add	a,r2
   000E 2A                  825 	add	a,r2
   000F 90s00r13            826 	mov	dptr,#00137$
   0012 73                  827 	jmp	@a+dptr
   0013                     828 00137$:
   0013 02s00r37            829 	ljmp	00101$
   0016 02s00r4C            830 	ljmp	00104$
   0019 02s01r00            831 	ljmp	00122$
   001C 02s00r61            832 	ljmp	00107$
   001F 02s01r00            833 	ljmp	00122$
   0022 02s01r00            834 	ljmp	00122$
   0025 02s00r76            835 	ljmp	00110$
   0028 02s01r00            836 	ljmp	00122$
   002B 02s00r7C            837 	ljmp	00111$
   002E 02s00r94            838 	ljmp	00112$
   0031 02s00rAE            839 	ljmp	00115$
   0034 02s00rE2            840 	ljmp	00119$
                            841 ;	setupdat.c:76: case GET_STATUS:
   0037                     842 00101$:
                            843 ;	setupdat.c:77: if (!handle_get_status())
   0037 12s01r74            844 	lcall	_handle_get_status
   003A E5 82               845 	mov	a,dpl
   003C 60 03               846 	jz	00138$
   003E 02s01r15            847 	ljmp	00125$
   0041                     848 00138$:
                            849 ;	setupdat.c:78: STALLEP0();
   0041 90 E6 A0            850 	mov	dptr,#_EP0CS
   0044 E0                  851 	movx	a,@dptr
   0045 FA                  852 	mov	r2,a
   0046 44 01               853 	orl	a,#0x01
   0048 F0                  854 	movx	@dptr,a
                            855 ;	setupdat.c:79: break;
   0049 02s01r15            856 	ljmp	00125$
                            857 ;	setupdat.c:80: case CLEAR_FEATURE:
   004C                     858 00104$:
                            859 ;	setupdat.c:81: if (!handle_clear_feature()) {
   004C 12s02r00            860 	lcall	_handle_clear_feature
   004F E5 82               861 	mov	a,dpl
   0051 60 03               862 	jz	00139$
   0053 02s01r15            863 	ljmp	00125$
   0056                     864 00139$:
                            865 ;	setupdat.c:82: STALLEP0();
   0056 90 E6 A0            866 	mov	dptr,#_EP0CS
   0059 E0                  867 	movx	a,@dptr
   005A FA                  868 	mov	r2,a
   005B 44 01               869 	orl	a,#0x01
   005D F0                  870 	movx	@dptr,a
                            871 ;	setupdat.c:84: break;
   005E 02s01r15            872 	ljmp	00125$
                            873 ;	setupdat.c:85: case SET_FEATURE:
   0061                     874 00107$:
                            875 ;	setupdat.c:86: if (!handle_set_feature()) {
   0061 12s02r6E            876 	lcall	_handle_set_feature
   0064 E5 82               877 	mov	a,dpl
   0066 60 03               878 	jz	00140$
   0068 02s01r15            879 	ljmp	00125$
   006B                     880 00140$:
                            881 ;	setupdat.c:87: STALLEP0();
   006B 90 E6 A0            882 	mov	dptr,#_EP0CS
   006E E0                  883 	movx	a,@dptr
   006F FA                  884 	mov	r2,a
   0070 44 01               885 	orl	a,#0x01
   0072 F0                  886 	movx	@dptr,a
                            887 ;	setupdat.c:89: break;
   0073 02s01r15            888 	ljmp	00125$
                            889 ;	setupdat.c:90: case GET_DESCRIPTOR:
   0076                     890 00110$:
                            891 ;	setupdat.c:91: handle_get_descriptor();
   0076 12s03r21            892 	lcall	_handle_get_descriptor
                            893 ;	setupdat.c:92: break;
   0079 02s01r15            894 	ljmp	00125$
                            895 ;	setupdat.c:93: case GET_CONFIGURATION:            
   007C                     896 00111$:
                            897 ;	setupdat.c:94: EP0BUF[0] = handle_get_configuration();
   007C 12s00r00            898 	lcall	_handle_get_configuration
   007F AA 82               899 	mov	r2,dpl
   0081 90 E7 40            900 	mov	dptr,#_EP0BUF
   0084 EA                  901 	mov	a,r2
   0085 F0                  902 	movx	@dptr,a
                            903 ;	setupdat.c:95: EP0BCH=0;
   0086 90 E6 8A            904 	mov	dptr,#_EP0BCH
   0089 E4                  905 	clr	a
   008A F0                  906 	movx	@dptr,a
                            907 ;	setupdat.c:96: EP0BCL=1;
   008B 90 E6 8B            908 	mov	dptr,#_EP0BCL
   008E 74 01               909 	mov	a,#0x01
   0090 F0                  910 	movx	@dptr,a
                            911 ;	setupdat.c:97: break;
   0091 02s01r15            912 	ljmp	00125$
                            913 ;	setupdat.c:98: case SET_CONFIGURATION:
   0094                     914 00112$:
                            915 ;	setupdat.c:100: if( !handle_set_configuration(SETUPDAT[2])) {
   0094 90 E6 BA            916 	mov	dptr,#(_SETUPDAT + 0x0002)
   0097 E0                  917 	movx	a,@dptr
   0098 F5 82               918 	mov	dpl,a
   009A 12s00r00            919 	lcall	_handle_set_configuration
   009D E5 82               920 	mov	a,dpl
   009F 60 03               921 	jz	00141$
   00A1 02s01r15            922 	ljmp	00125$
   00A4                     923 00141$:
                            924 ;	setupdat.c:101: STALLEP0();
   00A4 90 E6 A0            925 	mov	dptr,#_EP0CS
   00A7 E0                  926 	movx	a,@dptr
   00A8 FA                  927 	mov	r2,a
   00A9 44 01               928 	orl	a,#0x01
   00AB F0                  929 	movx	@dptr,a
                            930 ;	setupdat.c:103: break;
                            931 ;	setupdat.c:104: case GET_INTERFACE:
   00AC 80 67               932 	sjmp	00125$
   00AE                     933 00115$:
                            934 ;	setupdat.c:107: if (!handle_get_interface(SETUPDAT[4],&alt_ifc)) {
   00AE 90 E6 BC            935 	mov	dptr,#(_SETUPDAT + 0x0004)
   00B1 E0                  936 	movx	a,@dptr
   00B2 FA                  937 	mov	r2,a
   00B3 75*00r00            938 	mov	_handle_get_interface_PARM_2,#_handle_setupdata_alt_ifc_3_6
   00B6 75*01 00            939 	mov	(_handle_get_interface_PARM_2 + 1),#0x00
   00B9 75*02 40            940 	mov	(_handle_get_interface_PARM_2 + 2),#0x40
   00BC 8A 82               941 	mov	dpl,r2
   00BE 12s00r00            942 	lcall	_handle_get_interface
   00C1 E5 82               943 	mov	a,dpl
   00C3 70 0A               944 	jnz	00117$
                            945 ;	setupdat.c:108: STALLEP0();
   00C5 90 E6 A0            946 	mov	dptr,#_EP0CS
   00C8 E0                  947 	movx	a,@dptr
   00C9 FA                  948 	mov	r2,a
   00CA 44 01               949 	orl	a,#0x01
   00CC F0                  950 	movx	@dptr,a
   00CD 80 46               951 	sjmp	00125$
   00CF                     952 00117$:
                            953 ;	setupdat.c:110: EP0BUF[0] = alt_ifc;
   00CF 90 E7 40            954 	mov	dptr,#_EP0BUF
   00D2 E5*00               955 	mov	a,_handle_setupdata_alt_ifc_3_6
   00D4 F0                  956 	movx	@dptr,a
                            957 ;	setupdat.c:111: EP0BCH=0;
   00D5 90 E6 8A            958 	mov	dptr,#_EP0BCH
   00D8 E4                  959 	clr	a
   00D9 F0                  960 	movx	@dptr,a
                            961 ;	setupdat.c:112: EP0BCL=1;
   00DA 90 E6 8B            962 	mov	dptr,#_EP0BCL
   00DD 74 01               963 	mov	a,#0x01
   00DF F0                  964 	movx	@dptr,a
                            965 ;	setupdat.c:115: break;
                            966 ;	setupdat.c:116: case SET_INTERFACE:
   00E0 80 33               967 	sjmp	00125$
   00E2                     968 00119$:
                            969 ;	setupdat.c:118: if ( !handle_set_interface(SETUPDAT[4],SETUPDAT[2])) {
   00E2 90 E6 BC            970 	mov	dptr,#(_SETUPDAT + 0x0004)
   00E5 E0                  971 	movx	a,@dptr
   00E6 FA                  972 	mov	r2,a
   00E7 90 E6 BA            973 	mov	dptr,#(_SETUPDAT + 0x0002)
   00EA E0                  974 	movx	a,@dptr
   00EB F5*00               975 	mov	_handle_set_interface_PARM_2,a
   00ED 8A 82               976 	mov	dpl,r2
   00EF 12s00r00            977 	lcall	_handle_set_interface
   00F2 E5 82               978 	mov	a,dpl
   00F4 70 1F               979 	jnz	00125$
                            980 ;	setupdat.c:119: STALLEP0();
   00F6 90 E6 A0            981 	mov	dptr,#_EP0CS
   00F9 E0                  982 	movx	a,@dptr
   00FA FA                  983 	mov	r2,a
   00FB 44 01               984 	orl	a,#0x01
   00FD F0                  985 	movx	@dptr,a
                            986 ;	setupdat.c:121: break;
                            987 ;	setupdat.c:122: default:
   00FE 80 15               988 	sjmp	00125$
   0100                     989 00122$:
                            990 ;	setupdat.c:123: if (!handle_vendorcommand(SETUPDAT[1])) {
   0100 90 E6 B9            991 	mov	dptr,#(_SETUPDAT + 0x0001)
   0103 E0                  992 	movx	a,@dptr
   0104 F5 82               993 	mov	dpl,a
   0106 12s00r00            994 	lcall	_handle_vendorcommand
   0109 E5 82               995 	mov	a,dpl
   010B 70 08               996 	jnz	00125$
                            997 ;	setupdat.c:125: STALLEP0();
   010D 90 E6 A0            998 	mov	dptr,#_EP0CS
   0110 E0                  999 	movx	a,@dptr
   0111 FA                 1000 	mov	r2,a
   0112 44 01              1001 	orl	a,#0x01
   0114 F0                 1002 	movx	@dptr,a
                           1003 ;	setupdat.c:127: }
   0115                    1004 00125$:
                           1005 ;	setupdat.c:130: EP0CS |= bmHSNAK;
   0115 90 E6 A0           1006 	mov	dptr,#_EP0CS
   0118 E0                 1007 	movx	a,@dptr
   0119 44 80              1008 	orl	a,#0x80
   011B F0                 1009 	movx	@dptr,a
   011C 22                 1010 	ret
                           1011 ;------------------------------------------------------------
                           1012 ;Allocation info for local variables in function 'ep_addr'
                           1013 ;------------------------------------------------------------
                           1014 ;ep                        Allocated to registers r2 
                           1015 ;ep_num                    Allocated to registers r3 
                           1016 ;------------------------------------------------------------
                           1017 ;	setupdat.c:134: xdata BYTE* ep_addr(BYTE ep) { // bit 8 of ep_num is the direction
                           1018 ;	-----------------------------------------
                           1019 ;	 function ep_addr
                           1020 ;	-----------------------------------------
   011D                    1021 _ep_addr:
   011D AA 82              1022 	mov	r2,dpl
                           1023 ;	setupdat.c:135: BYTE ep_num = ep&~0x80; // mask the direction
   011F 74 7F              1024 	mov	a,#0x7F
   0121 5A                 1025 	anl	a,r2
                           1026 ;	setupdat.c:136: switch (ep_num) {
   0122 FB                 1027 	mov  r3,a
   0123 24 F7              1028 	add	a,#0xff - 0x08
   0125 40 49              1029 	jc	00107$
   0127 EB                 1030 	mov	a,r3
   0128 2B                 1031 	add	a,r3
   0129 2B                 1032 	add	a,r3
   012A 90s01r2E           1033 	mov	dptr,#00116$
   012D 73                 1034 	jmp	@a+dptr
   012E                    1035 00116$:
   012E 02s01r49           1036 	ljmp	00101$
   0131 02s01r4D           1037 	ljmp	00102$
   0134 02s01r60           1038 	ljmp	00103$
   0137 02s01r70           1039 	ljmp	00107$
   013A 02s01r64           1040 	ljmp	00104$
   013D 02s01r70           1041 	ljmp	00107$
   0140 02s01r68           1042 	ljmp	00105$
   0143 02s01r70           1043 	ljmp	00107$
   0146 02s01r6C           1044 	ljmp	00106$
                           1045 ;	setupdat.c:137: case 0: return &EP0CS;
   0149                    1046 00101$:
   0149 90 E6 A0           1047 	mov	dptr,#_EP0CS
                           1048 ;	setupdat.c:138: case 1: return ep&0x80? &EP1INCS : &EP1OUTCS;
   014C 22                 1049 	ret
   014D                    1050 00102$:
   014D EA                 1051 	mov	a,r2
   014E 30 E7 06           1052 	jnb	acc.7,00111$
   0151 7A A2              1053 	mov	r2,#_EP1INCS
   0153 7B E6              1054 	mov	r3,#(_EP1INCS >> 8)
   0155 80 04              1055 	sjmp	00112$
   0157                    1056 00111$:
   0157 7A A1              1057 	mov	r2,#_EP1OUTCS
   0159 7B E6              1058 	mov	r3,#(_EP1OUTCS >> 8)
   015B                    1059 00112$:
   015B 8A 82              1060 	mov	dpl,r2
   015D 8B 83              1061 	mov	dph,r3
                           1062 ;	setupdat.c:139: case 2: return &EP2CS;
   015F 22                 1063 	ret
   0160                    1064 00103$:
   0160 90 E6 A3           1065 	mov	dptr,#_EP2CS
                           1066 ;	setupdat.c:140: case 4: return &EP4CS;
   0163 22                 1067 	ret
   0164                    1068 00104$:
   0164 90 E6 A4           1069 	mov	dptr,#_EP4CS
                           1070 ;	setupdat.c:141: case 6: return &EP6CS;
   0167 22                 1071 	ret
   0168                    1072 00105$:
   0168 90 E6 A5           1073 	mov	dptr,#_EP6CS
                           1074 ;	setupdat.c:142: case 8: return &EP8CS;
   016B 22                 1075 	ret
   016C                    1076 00106$:
   016C 90 E6 A6           1077 	mov	dptr,#_EP8CS
                           1078 ;	setupdat.c:143: default: return NULL;
                           1079 ;	setupdat.c:144: }
   016F 22                 1080 	ret
   0170                    1081 00107$:
   0170 90 00 00           1082 	mov	dptr,#0x0000
   0173 22                 1083 	ret
                           1084 ;------------------------------------------------------------
                           1085 ;Allocation info for local variables in function 'handle_get_status'
                           1086 ;------------------------------------------------------------
                           1087 ;pep                       Allocated to registers r2 r3 
                           1088 ;------------------------------------------------------------
                           1089 ;	setupdat.c:157: BOOL handle_get_status() {
                           1090 ;	-----------------------------------------
                           1091 ;	 function handle_get_status
                           1092 ;	-----------------------------------------
   0174                    1093 _handle_get_status:
                           1094 ;	setupdat.c:159: switch ( SETUPDAT[0] ) {
   0174 90 E6 B8           1095 	mov	dptr,#_SETUPDAT
   0177 E0                 1096 	movx	a,@dptr
   0178 FA                 1097 	mov	r2,a
   0179 BA 80 02           1098 	cjne	r2,#0x80,00117$
   017C 80 22              1099 	sjmp	00102$
   017E                    1100 00117$:
   017E BA 81 02           1101 	cjne	r2,#0x81,00118$
   0181 80 08              1102 	sjmp	00101$
   0183                    1103 00118$:
   0183 BA 82 02           1104 	cjne	r2,#0x82,00119$
   0186 80 37              1105 	sjmp	00103$
   0188                    1106 00119$:
   0188 02s01rF8           1107 	ljmp	00106$
                           1108 ;	setupdat.c:162: case GS_INTERFACE: 
   018B                    1109 00101$:
                           1110 ;	setupdat.c:163: EP0BUF[0] = 0;
   018B 90 E7 40           1111 	mov	dptr,#_EP0BUF
                           1112 ;	setupdat.c:164: EP0BUF[1] = 0;
                           1113 ;	setupdat.c:165: EP0BCH=0;
   018E E4                 1114 	clr	a
   018F F0                 1115 	movx	@dptr,a
   0190 90 E7 41           1116 	mov	dptr,#(_EP0BUF + 0x0001)
   0193 F0                 1117 	movx	@dptr,a
   0194 90 E6 8A           1118 	mov	dptr,#_EP0BCH
   0197 F0                 1119 	movx	@dptr,a
                           1120 ;	setupdat.c:166: EP0BCL=2;
   0198 90 E6 8B           1121 	mov	dptr,#_EP0BCL
   019B 74 02              1122 	mov	a,#0x02
   019D F0                 1123 	movx	@dptr,a
                           1124 ;	setupdat.c:167: break;
                           1125 ;	setupdat.c:168: case GS_DEVICE:
   019E 80 5C              1126 	sjmp	00107$
   01A0                    1127 00102$:
                           1128 ;	setupdat.c:172: EP0BUF[0] = (remote_wakeup_allowed << 1) | self_powered;
   01A0 E5*02              1129 	mov	a,_remote_wakeup_allowed
   01A2 25 E0              1130 	add	a,acc
   01A4 FA                 1131 	mov	r2,a
   01A5 E5*01              1132 	mov	a,_self_powered
   01A7 42 02              1133 	orl	ar2,a
   01A9 90 E7 40           1134 	mov	dptr,#_EP0BUF
   01AC EA                 1135 	mov	a,r2
   01AD F0                 1136 	movx	@dptr,a
                           1137 ;	setupdat.c:174: EP0BUF[1] = 0;
   01AE 90 E7 41           1138 	mov	dptr,#(_EP0BUF + 0x0001)
                           1139 ;	setupdat.c:175: EP0BCH = 0;
   01B1 E4                 1140 	clr	a
   01B2 F0                 1141 	movx	@dptr,a
   01B3 90 E6 8A           1142 	mov	dptr,#_EP0BCH
   01B6 F0                 1143 	movx	@dptr,a
                           1144 ;	setupdat.c:176: EP0BCL = 2;
   01B7 90 E6 8B           1145 	mov	dptr,#_EP0BCL
   01BA 74 02              1146 	mov	a,#0x02
   01BC F0                 1147 	movx	@dptr,a
                           1148 ;	setupdat.c:177: break;
                           1149 ;	setupdat.c:178: case GS_ENDPOINT:
   01BD 80 3D              1150 	sjmp	00107$
   01BF                    1151 00103$:
                           1152 ;	setupdat.c:180: xdata BYTE* pep=ep_addr(SETUPDAT[4]);
   01BF 90 E6 BC           1153 	mov	dptr,#(_SETUPDAT + 0x0004)
   01C2 E0                 1154 	movx	a,@dptr
   01C3 F5 82              1155 	mov	dpl,a
   01C5 12s01r1D           1156 	lcall	_ep_addr
   01C8 AA 82              1157 	mov	r2,dpl
   01CA AB 83              1158 	mov	r3,dph
                           1159 ;	setupdat.c:181: if ( !pep ) return FALSE;
   01CC EA                 1160 	mov	a,r2
   01CD 4B                 1161 	orl	a,r3
   01CE 70 03              1162 	jnz	00105$
   01D0 F5 82              1163 	mov	dpl,a
   01D2 22                 1164 	ret
   01D3                    1165 00105$:
                           1166 ;	setupdat.c:183: EP0BUF[0] = *pep & bmEPSTALL ? 1 : 0;
   01D3 8A 82              1167 	mov	dpl,r2
   01D5 8B 83              1168 	mov	dph,r3
   01D7 E0                 1169 	movx	a,@dptr
   01D8 FA                 1170 	mov	r2,a
   01D9 30 E0 04           1171 	jnb	acc.0,00110$
   01DC 7A 01              1172 	mov	r2,#0x01
   01DE 80 02              1173 	sjmp	00111$
   01E0                    1174 00110$:
   01E0 7A 00              1175 	mov	r2,#0x00
   01E2                    1176 00111$:
   01E2 90 E7 40           1177 	mov	dptr,#_EP0BUF
   01E5 EA                 1178 	mov	a,r2
   01E6 F0                 1179 	movx	@dptr,a
                           1180 ;	setupdat.c:184: EP0BUF[1] = 0;
   01E7 90 E7 41           1181 	mov	dptr,#(_EP0BUF + 0x0001)
                           1182 ;	setupdat.c:185: EP0BCH=0;
   01EA E4                 1183 	clr	a
   01EB F0                 1184 	movx	@dptr,a
   01EC 90 E6 8A           1185 	mov	dptr,#_EP0BCH
   01EF F0                 1186 	movx	@dptr,a
                           1187 ;	setupdat.c:186: EP0BCL=2;
   01F0 90 E6 8B           1188 	mov	dptr,#_EP0BCL
   01F3 74 02              1189 	mov	a,#0x02
   01F5 F0                 1190 	movx	@dptr,a
                           1191 ;	setupdat.c:188: break;
                           1192 ;	setupdat.c:189: default:
   01F6 80 04              1193 	sjmp	00107$
   01F8                    1194 00106$:
                           1195 ;	setupdat.c:191: return FALSE;
   01F8 75 82 00           1196 	mov	dpl,#0x00
                           1197 ;	setupdat.c:194: }
                           1198 ;	setupdat.c:195: return TRUE;
   01FB 22                 1199 	ret
   01FC                    1200 00107$:
   01FC 75 82 01           1201 	mov	dpl,#0x01
   01FF 22                 1202 	ret
                           1203 ;------------------------------------------------------------
                           1204 ;Allocation info for local variables in function 'handle_clear_feature'
                           1205 ;------------------------------------------------------------
                           1206 ;pep                       Allocated to registers r2 r3 
                           1207 ;------------------------------------------------------------
                           1208 ;	setupdat.c:202: BOOL handle_clear_feature() {
                           1209 ;	-----------------------------------------
                           1210 ;	 function handle_clear_feature
                           1211 ;	-----------------------------------------
   0200                    1212 _handle_clear_feature:
                           1213 ;	setupdat.c:204: switch ( SETUPDAT[0] ) {
   0200 90 E6 B8           1214 	mov	dptr,#_SETUPDAT
   0203 E0                 1215 	movx	a,@dptr
   0204 FA                 1216 	mov	r2,a
   0205 60 05              1217 	jz	00101$
                           1218 ;	setupdat.c:205: case GF_DEVICE:
   0207 BA 02 57           1219 	cjne	r2,#0x02,00108$
   020A 80 11              1220 	sjmp	00104$
   020C                    1221 00101$:
                           1222 ;	setupdat.c:206: if (SETUPDAT[2] == 1) {
   020C 90 E6 BA           1223 	mov	dptr,#(_SETUPDAT + 0x0002)
   020F E0                 1224 	movx	a,@dptr
   0210 FA                 1225 	mov	r2,a
   0211 BA 01 05           1226 	cjne	r2,#0x01,00103$
                           1227 ;	setupdat.c:207: remote_wakeup_allowed=FALSE;
   0214 75*02 00           1228 	mov	_remote_wakeup_allowed,#0x00
                           1229 ;	setupdat.c:208: break;
   0217 80 51              1230 	sjmp	00109$
   0219                    1231 00103$:
                           1232 ;	setupdat.c:210: return FALSE;
   0219 75 82 00           1233 	mov	dpl,#0x00
                           1234 ;	setupdat.c:211: case GF_ENDPOINT:
   021C 22                 1235 	ret
   021D                    1236 00104$:
                           1237 ;	setupdat.c:212: if (SETUPDAT[2] == 0) { // ep stall feature
   021D 90 E6 BA           1238 	mov	dptr,#(_SETUPDAT + 0x0002)
   0220 E0                 1239 	movx	a,@dptr
   0221 70 3A              1240 	jnz	00106$
                           1241 ;	setupdat.c:213: xdata BYTE* pep=ep_addr(SETUPDAT[4]);
   0223 90 E6 BC           1242 	mov	dptr,#(_SETUPDAT + 0x0004)
   0226 E0                 1243 	movx	a,@dptr
   0227 F5 82              1244 	mov	dpl,a
   0229 12s01r1D           1245 	lcall	_ep_addr
                           1246 ;	setupdat.c:215: *pep &= ~bmEPSTALL;    
   022C AA 82              1247 	mov	r2,dpl
   022E AB 83              1248 	mov  r3,dph
   0230 E0                 1249 	movx	a,@dptr
   0231 FC                 1250 	mov	r4,a
   0232 53 04 FE           1251 	anl	ar4,#0xFE
   0235 8A 82              1252 	mov	dpl,r2
   0237 8B 83              1253 	mov	dph,r3
   0239 EC                 1254 	mov	a,r4
   023A F0                 1255 	movx	@dptr,a
                           1256 ;	setupdat.c:216: RESETTOGGLE(SETUPDAT[4]);    
   023B 90 E6 BC           1257 	mov	dptr,#(_SETUPDAT + 0x0004)
   023E E0                 1258 	movx	a,@dptr
   023F FA                 1259 	mov	r2,a
   0240 53 02 0F           1260 	anl	ar2,#0x0F
   0243 90 E6 BC           1261 	mov	dptr,#(_SETUPDAT + 0x0004)
   0246 E0                 1262 	movx	a,@dptr
   0247 54 80              1263 	anl	a,#0x80
   0249 C4                 1264 	swap	a
   024A 23                 1265 	rl	a
   024B 54 1F              1266 	anl	a,#0x1f
   024D FB                 1267 	mov	r3,a
   024E 90 E6 83           1268 	mov	dptr,#_TOGCTL
   0251 2A                 1269 	add	a,r2
   0252 F0                 1270 	movx	@dptr,a
   0253 90 E6 83           1271 	mov	dptr,#_TOGCTL
   0256 E0                 1272 	movx	a,@dptr
   0257 FA                 1273 	mov	r2,a
   0258 44 20              1274 	orl	a,#0x20
   025A F0                 1275 	movx	@dptr,a
   025B 80 0D              1276 	sjmp	00109$
   025D                    1277 00106$:
                           1278 ;	setupdat.c:219: return FALSE;
   025D 75 82 00           1279 	mov	dpl,#0x00
                           1280 ;	setupdat.c:223: default:
   0260 22                 1281 	ret
   0261                    1282 00108$:
                           1283 ;	setupdat.c:224: return handle_vendorcommand(SETUPDAT[1]);
   0261 90 E6 B9           1284 	mov	dptr,#(_SETUPDAT + 0x0001)
   0264 E0                 1285 	movx	a,@dptr
   0265 F5 82              1286 	mov	dpl,a
                           1287 ;	setupdat.c:225: }
                           1288 ;	setupdat.c:226: return TRUE;
   0267 02s00r00           1289 	ljmp	_handle_vendorcommand
   026A                    1290 00109$:
   026A 75 82 01           1291 	mov	dpl,#0x01
   026D 22                 1292 	ret
                           1293 ;------------------------------------------------------------
                           1294 ;Allocation info for local variables in function 'handle_set_feature'
                           1295 ;------------------------------------------------------------
                           1296 ;pep                       Allocated to registers r2 r3 
                           1297 ;------------------------------------------------------------
                           1298 ;	setupdat.c:229: BOOL handle_set_feature() {
                           1299 ;	-----------------------------------------
                           1300 ;	 function handle_set_feature
                           1301 ;	-----------------------------------------
   026E                    1302 _handle_set_feature:
                           1303 ;	setupdat.c:231: switch ( SETUPDAT[0] ) {
   026E 90 E6 B8           1304 	mov	dptr,#_SETUPDAT
   0271 E0                 1305 	movx	a,@dptr
   0272 FA                 1306 	mov	r2,a
   0273 60 08              1307 	jz	00101$
   0275 BA 02 02           1308 	cjne	r2,#0x02,00123$
   0278 80 1F              1309 	sjmp	00106$
   027A                    1310 00123$:
   027A 02s02rE9           1311 	ljmp	00112$
                           1312 ;	setupdat.c:232: case GF_DEVICE:
   027D                    1313 00101$:
                           1314 ;	setupdat.c:233: if (SETUPDAT[2] == 2) break; // this is TEST_MODE and we simply need to return the handshake
   027D 90 E6 BA           1315 	mov	dptr,#(_SETUPDAT + 0x0002)
   0280 E0                 1316 	movx	a,@dptr
   0281 FA                 1317 	mov	r2,a
   0282 BA 02 03           1318 	cjne	r2,#0x02,00124$
   0285 02s02rF2           1319 	ljmp	00113$
   0288                    1320 00124$:
                           1321 ;	setupdat.c:234: if (SETUPDAT[2] == 1) {
   0288 90 E6 BA           1322 	mov	dptr,#(_SETUPDAT + 0x0002)
   028B E0                 1323 	movx	a,@dptr
   028C FA                 1324 	mov	r2,a
   028D BA 01 05           1325 	cjne	r2,#0x01,00105$
                           1326 ;	setupdat.c:235: remote_wakeup_allowed=TRUE; 
   0290 75*02 01           1327 	mov	_remote_wakeup_allowed,#0x01
                           1328 ;	setupdat.c:236: break;
   0293 80 5D              1329 	sjmp	00113$
   0295                    1330 00105$:
                           1331 ;	setupdat.c:238: return FALSE;
   0295 75 82 00           1332 	mov	dpl,#0x00
                           1333 ;	setupdat.c:239: case GF_ENDPOINT:
   0298 22                 1334 	ret
   0299                    1335 00106$:
                           1336 ;	setupdat.c:240: if ( SETUPDAT[2] == 0 ) { // ep stall feature
   0299 90 E6 BA           1337 	mov	dptr,#(_SETUPDAT + 0x0002)
   029C E0                 1338 	movx	a,@dptr
   029D 70 46              1339 	jnz	00110$
                           1340 ;	setupdat.c:243: xdata BYTE* pep = ep_addr(SETUPDAT[4]);
   029F 90 E6 BC           1341 	mov	dptr,#(_SETUPDAT + 0x0004)
   02A2 E0                 1342 	movx	a,@dptr
   02A3 F5 82              1343 	mov	dpl,a
   02A5 12s01r1D           1344 	lcall	_ep_addr
   02A8 AA 82              1345 	mov	r2,dpl
   02AA AB 83              1346 	mov	r3,dph
                           1347 ;	setupdat.c:245: if (!pep) {            
   02AC EA                 1348 	mov	a,r2
   02AD 4B                 1349 	orl	a,r3
                           1350 ;	setupdat.c:246: return FALSE;
   02AE 70 03              1351 	jnz	00108$
   02B0 F5 82              1352 	mov	dpl,a
   02B2 22                 1353 	ret
   02B3                    1354 00108$:
                           1355 ;	setupdat.c:249: *pep |= bmEPSTALL;
   02B3 8A 82              1356 	mov	dpl,r2
   02B5 8B 83              1357 	mov	dph,r3
   02B7 E0                 1358 	movx	a,@dptr
   02B8 FC                 1359 	mov	r4,a
   02B9 43 04 01           1360 	orl	ar4,#0x01
   02BC 8A 82              1361 	mov	dpl,r2
   02BE 8B 83              1362 	mov	dph,r3
   02C0 EC                 1363 	mov	a,r4
   02C1 F0                 1364 	movx	@dptr,a
                           1365 ;	setupdat.c:252: RESETTOGGLE(SETUPDAT[4]);
   02C2 90 E6 BC           1366 	mov	dptr,#(_SETUPDAT + 0x0004)
   02C5 E0                 1367 	movx	a,@dptr
   02C6 FA                 1368 	mov	r2,a
   02C7 53 02 0F           1369 	anl	ar2,#0x0F
   02CA 90 E6 BC           1370 	mov	dptr,#(_SETUPDAT + 0x0004)
   02CD E0                 1371 	movx	a,@dptr
   02CE 54 80              1372 	anl	a,#0x80
   02D0 C4                 1373 	swap	a
   02D1 23                 1374 	rl	a
   02D2 54 1F              1375 	anl	a,#0x1f
   02D4 FB                 1376 	mov	r3,a
   02D5 90 E6 83           1377 	mov	dptr,#_TOGCTL
   02D8 EB                 1378 	mov	a,r3
   02D9 2A                 1379 	add	a,r2
   02DA F0                 1380 	movx	@dptr,a
   02DB 90 E6 83           1381 	mov	dptr,#_TOGCTL
   02DE E0                 1382 	movx	a,@dptr
   02DF FA                 1383 	mov	r2,a
   02E0 44 20              1384 	orl	a,#0x20
   02E2 F0                 1385 	movx	@dptr,a
   02E3 80 0D              1386 	sjmp	00113$
   02E5                    1387 00110$:
                           1388 ;	setupdat.c:259: return FALSE;
   02E5 75 82 00           1389 	mov	dpl,#0x00
                           1390 ;	setupdat.c:262: default:
   02E8 22                 1391 	ret
   02E9                    1392 00112$:
                           1393 ;	setupdat.c:263: return handle_vendorcommand(SETUPDAT[1]);
   02E9 90 E6 B9           1394 	mov	dptr,#(_SETUPDAT + 0x0001)
   02EC E0                 1395 	movx	a,@dptr
   02ED F5 82              1396 	mov	dpl,a
                           1397 ;	setupdat.c:264: }
                           1398 ;	setupdat.c:265: return TRUE;
   02EF 02s00r00           1399 	ljmp	_handle_vendorcommand
   02F2                    1400 00113$:
   02F2 75 82 01           1401 	mov	dpl,#0x01
   02F5 22                 1402 	ret
                           1403 ;------------------------------------------------------------
                           1404 ;Allocation info for local variables in function 'handle_hispeed'
                           1405 ;------------------------------------------------------------
                           1406 ;highspeed                 Allocated to registers r2 
                           1407 ;------------------------------------------------------------
                           1408 ;	setupdat.c:280: void handle_hispeed(BOOL highspeed) {
                           1409 ;	-----------------------------------------
                           1410 ;	 function handle_hispeed
                           1411 ;	-----------------------------------------
   02F6                    1412 _handle_hispeed:
   02F6 AA 82              1413 	mov	r2,dpl
                           1414 ;	setupdat.c:290: }
   02F8 D2*00              1415 	setb	_handle_hispeed_sloc0_1_0
   02FA 10 AF 02           1416 	jbc	ea,00107$
   02FD C2*00              1417 	clr	_handle_hispeed_sloc0_1_0
   02FF                    1418 00107$:
                           1419 ;	setupdat.c:283: if (highspeed) {
   02FF EA                 1420 	mov	a,r2
   0300 60 0E              1421 	jz	00102$
                           1422 ;	setupdat.c:284: pDevConfig=(WORD)&highspd_dscr;
   0302 75*03r00           1423 	mov	_pDevConfig,#_highspd_dscr
   0305 75*04s00           1424 	mov	(_pDevConfig + 1),#(_highspd_dscr >> 8)
                           1425 ;	setupdat.c:285: pOtherConfig=(WORD)&fullspd_dscr;
   0308 75*05r00           1426 	mov	_pOtherConfig,#_fullspd_dscr
   030B 75*06s00           1427 	mov	(_pOtherConfig + 1),#(_fullspd_dscr >> 8)
   030E 80 0C              1428 	sjmp	00103$
   0310                    1429 00102$:
                           1430 ;	setupdat.c:287: pDevConfig=(WORD)&fullspd_dscr;
   0310 75*03r00           1431 	mov	_pDevConfig,#_fullspd_dscr
   0313 75*04s00           1432 	mov	(_pDevConfig + 1),#(_fullspd_dscr >> 8)
                           1433 ;	setupdat.c:288: pOtherConfig=(WORD)&highspd_dscr;
   0316 75*05r00           1434 	mov	_pOtherConfig,#_highspd_dscr
   0319 75*06s00           1435 	mov	(_pOtherConfig + 1),#(_highspd_dscr >> 8)
   031C                    1436 00103$:
   031C A2*00              1437 	mov	c,_handle_hispeed_sloc0_1_0
   031E 92 AF              1438 	mov	ea,c
   0320 22                 1439 	ret
                           1440 ;------------------------------------------------------------
                           1441 ;Allocation info for local variables in function 'handle_get_descriptor'
                           1442 ;------------------------------------------------------------
                           1443 ;pStr                      Allocated to registers r2 r3 r4 
                           1444 ;idx                       Allocated to registers r5 
                           1445 ;cur                       Allocated to registers r6 
                           1446 ;------------------------------------------------------------
                           1447 ;	setupdat.c:301: void handle_get_descriptor() {
                           1448 ;	-----------------------------------------
                           1449 ;	 function handle_get_descriptor
                           1450 ;	-----------------------------------------
   0321                    1451 _handle_get_descriptor:
                           1452 ;	setupdat.c:304: switch ( SETUPDAT[3] ) {
   0321 90 E6 BB           1453 	mov	dptr,#(_SETUPDAT + 0x0003)
   0324 E0                 1454 	movx	a,@dptr
   0325 FA                 1455 	mov	r2,a
   0326 BA 01 02           1456 	cjne	r2,#0x01,00132$
   0329 80 19              1457 	sjmp	00101$
   032B                    1458 00132$:
   032B BA 02 02           1459 	cjne	r2,#0x02,00133$
   032E 80 27              1460 	sjmp	00102$
   0330                    1461 00133$:
   0330 BA 03 02           1462 	cjne	r2,#0x03,00134$
   0333 80 30              1463 	sjmp	00103$
   0335                    1464 00134$:
   0335 BA 06 03           1465 	cjne	r2,#0x06,00135$
   0338 02s03rC9           1466 	ljmp	00115$
   033B                    1467 00135$:
   033B BA 07 03           1468 	cjne	r2,#0x07,00136$
   033E 02s03rDC           1469 	ljmp	00116$
   0341                    1470 00136$:
   0341 02s03rEA           1471 	ljmp	00117$
                           1472 ;	setupdat.c:305: case DSCR_DEVICE_TYPE:
   0344                    1473 00101$:
                           1474 ;	setupdat.c:307: SUDPTRH = MSB((WORD)&dev_dscr);
   0344 7Ar00              1475 	mov	r2,#_dev_dscr
   0346 7Bs00              1476 	mov	r3,#(_dev_dscr >> 8)
   0348 90 E6 B3           1477 	mov	dptr,#_SUDPTRH
   034B EB                 1478 	mov	a,r3
   034C F0                 1479 	movx	@dptr,a
                           1480 ;	setupdat.c:308: SUDPTRL = LSB((WORD)&dev_dscr);
   034D 7Ar00              1481 	mov	r2,#_dev_dscr
   034F 7Bs00              1482 	mov	r3,#(_dev_dscr >> 8)
   0351 90 E6 B4           1483 	mov	dptr,#_SUDPTRL
   0354 EA                 1484 	mov	a,r2
   0355 F0                 1485 	movx	@dptr,a
                           1486 ;	setupdat.c:309: break;
   0356 22                 1487 	ret
                           1488 ;	setupdat.c:310: case DSCR_CONFIG_TYPE:
   0357                    1489 00102$:
                           1490 ;	setupdat.c:313: SUDPTRH = MSB(pDevConfig);
   0357 90 E6 B3           1491 	mov	dptr,#_SUDPTRH
   035A E5*04              1492 	mov	a,(_pDevConfig + 1)
   035C F0                 1493 	movx	@dptr,a
                           1494 ;	setupdat.c:314: SUDPTRL = LSB(pDevConfig);
   035D AA*03              1495 	mov	r2,_pDevConfig
   035F 90 E6 B4           1496 	mov	dptr,#_SUDPTRL
   0362 EA                 1497 	mov	a,r2
   0363 F0                 1498 	movx	@dptr,a
                           1499 ;	setupdat.c:315: break;        
   0364 22                 1500 	ret
                           1501 ;	setupdat.c:316: case DSCR_STRING_TYPE:
   0365                    1502 00103$:
                           1503 ;	setupdat.c:319: STRING_DSCR* pStr = (STRING_DSCR*)&dev_strings;
   0365 7Ar00              1504 	mov	r2,#_dev_strings
   0367 7Bs00              1505 	mov	r3,#(_dev_strings >> 8)
   0369 7C 80              1506 	mov	r4,#0x80
                           1507 ;	setupdat.c:321: BYTE idx = SETUPDAT[2];
   036B 90 E6 BA           1508 	mov	dptr,#(_SETUPDAT + 0x0002)
   036E E0                 1509 	movx	a,@dptr
   036F FD                 1510 	mov	r5,a
                           1511 ;	setupdat.c:323: do {
   0370 7E 00              1512 	mov	r6,#0x00
   0372                    1513 00109$:
                           1514 ;	setupdat.c:324: if (idx==cur++) break;
   0372 8E 07              1515 	mov	ar7,r6
   0374 0E                 1516 	inc	r6
   0375 ED                 1517 	mov	a,r5
   0376 B5 07 02           1518 	cjne	a,ar7,00137$
   0379 80 36              1519 	sjmp	00111$
   037B                    1520 00137$:
                           1521 ;	setupdat.c:327: pStr = (STRING_DSCR*)((BYTE*)pStr + pStr->dsc_len);
   037B 8A 82              1522 	mov	dpl,r2
   037D 8B 83              1523 	mov	dph,r3
   037F 8C F0              1524 	mov	b,r4
   0381 12s00r00           1525 	lcall	__gptrget
   0384 2A                 1526 	add	a,r2
   0385 FA                 1527 	mov	r2,a
   0386 E4                 1528 	clr	a
   0387 3B                 1529 	addc	a,r3
   0388 FB                 1530 	mov	r3,a
                           1531 ;	setupdat.c:329: if (pStr->dsc_type != DSCR_STRING_TYPE) pStr=NULL;
   0389 74 01              1532 	mov	a,#0x01
   038B 2A                 1533 	add	a,r2
   038C FF                 1534 	mov	r7,a
   038D E4                 1535 	clr	a
   038E 3B                 1536 	addc	a,r3
   038F F8                 1537 	mov	r0,a
   0390 8C 01              1538 	mov	ar1,r4
   0392 8F 82              1539 	mov	dpl,r7
   0394 88 83              1540 	mov	dph,r0
   0396 89 F0              1541 	mov	b,r1
   0398 12s00r00           1542 	lcall	__gptrget
   039B FF                 1543 	mov	r7,a
   039C BF 03 02           1544 	cjne	r7,#0x03,00138$
   039F 80 06              1545 	sjmp	00110$
   03A1                    1546 00138$:
   03A1 7A 00              1547 	mov	r2,#0x00
   03A3 7B 00              1548 	mov	r3,#0x00
   03A5 7C 00              1549 	mov	r4,#0x00
   03A7                    1550 00110$:
                           1551 ;	setupdat.c:330: } while ( pStr && cur<=idx);
   03A7 EA                 1552 	mov	a,r2
   03A8 4B                 1553 	orl	a,r3
   03A9 4C                 1554 	orl	a,r4
   03AA 60 05              1555 	jz	00111$
   03AC C3                 1556 	clr	c
   03AD ED                 1557 	mov	a,r5
   03AE 9E                 1558 	subb	a,r6
   03AF 50 C1              1559 	jnc	00109$
   03B1                    1560 00111$:
                           1561 ;	setupdat.c:332: if (pStr) {
   03B1 EA                 1562 	mov	a,r2
   03B2 4B                 1563 	orl	a,r3
   03B3 4C                 1564 	orl	a,r4
   03B4 60 0B              1565 	jz	00113$
                           1566 ;	setupdat.c:339: SUDPTRH = MSB((WORD)pStr);
   03B6 90 E6 B3           1567 	mov	dptr,#_SUDPTRH
   03B9 EB                 1568 	mov	a,r3
   03BA F0                 1569 	movx	@dptr,a
                           1570 ;	setupdat.c:340: SUDPTRL = LSB((WORD)pStr);
   03BB 90 E6 B4           1571 	mov	dptr,#_SUDPTRL
   03BE EA                 1572 	mov	a,r2
   03BF F0                 1573 	movx	@dptr,a
   03C0 22                 1574 	ret
   03C1                    1575 00113$:
                           1576 ;	setupdat.c:343: } else {STALLEP0();}
   03C1 90 E6 A0           1577 	mov	dptr,#_EP0CS
   03C4 E0                 1578 	movx	a,@dptr
   03C5 44 01              1579 	orl	a,#0x01
   03C7 F0                 1580 	movx	@dptr,a
                           1581 ;	setupdat.c:347: break;
                           1582 ;	setupdat.c:348: case DSCR_DEVQUAL_TYPE:
   03C8 22                 1583 	ret
   03C9                    1584 00115$:
                           1585 ;	setupdat.c:351: SUDPTRH = MSB((WORD)&dev_qual_dscr);
   03C9 7Ar00              1586 	mov	r2,#_dev_qual_dscr
   03CB 7Bs00              1587 	mov	r3,#(_dev_qual_dscr >> 8)
   03CD 90 E6 B3           1588 	mov	dptr,#_SUDPTRH
   03D0 EB                 1589 	mov	a,r3
   03D1 F0                 1590 	movx	@dptr,a
                           1591 ;	setupdat.c:352: SUDPTRL = LSB((WORD)&dev_qual_dscr);
   03D2 7Ar00              1592 	mov	r2,#_dev_qual_dscr
   03D4 7Bs00              1593 	mov	r3,#(_dev_qual_dscr >> 8)
   03D6 90 E6 B4           1594 	mov	dptr,#_SUDPTRL
   03D9 EA                 1595 	mov	a,r2
   03DA F0                 1596 	movx	@dptr,a
                           1597 ;	setupdat.c:353: break;
                           1598 ;	setupdat.c:354: case DSCR_OTHERSPD_TYPE:
   03DB 22                 1599 	ret
   03DC                    1600 00116$:
                           1601 ;	setupdat.c:356: SUDPTRH = MSB(pOtherConfig);
   03DC 90 E6 B3           1602 	mov	dptr,#_SUDPTRH
   03DF E5*06              1603 	mov	a,(_pOtherConfig + 1)
   03E1 F0                 1604 	movx	@dptr,a
                           1605 ;	setupdat.c:357: SUDPTRL = LSB(pOtherConfig);
   03E2 AA*05              1606 	mov	r2,_pOtherConfig
   03E4 90 E6 B4           1607 	mov	dptr,#_SUDPTRL
   03E7 EA                 1608 	mov	a,r2
   03E8 F0                 1609 	movx	@dptr,a
                           1610 ;	setupdat.c:358: break;
                           1611 ;	setupdat.c:359: default:
   03E9 22                 1612 	ret
   03EA                    1613 00117$:
                           1614 ;	setupdat.c:361: STALLEP0();
   03EA 90 E6 A0           1615 	mov	dptr,#_EP0CS
   03ED E0                 1616 	movx	a,@dptr
   03EE 44 01              1617 	orl	a,#0x01
   03F0 F0                 1618 	movx	@dptr,a
                           1619 ;	setupdat.c:362: }
   03F1 22                 1620 	ret
                           1621 	.area CSEG    (CODE)
                           1622 	.area CONST   (CODE)
                           1623 	.area XINIT   (CODE)
                           1624 	.area CABS    (ABS,CODE)
