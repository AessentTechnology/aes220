                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Thu Feb 28 13:14:42 2013
                              5 ;--------------------------------------------------------
                              6 	.module i2c
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _eeprom_write_PARM_4
                             13 	.globl _eeprom_write_PARM_3
                             14 	.globl _eeprom_write_PARM_2
                             15 	.globl _EIPX6
                             16 	.globl _EIPX5
                             17 	.globl _EIPX4
                             18 	.globl _PI2C
                             19 	.globl _PUSB
                             20 	.globl _EIEX6
                             21 	.globl _EIEX5
                             22 	.globl _EIEX4
                             23 	.globl _EI2C
                             24 	.globl _EUSB
                             25 	.globl _SMOD1
                             26 	.globl _ERESI
                             27 	.globl _RESI
                             28 	.globl _INT6
                             29 	.globl _CY
                             30 	.globl _AC
                             31 	.globl _F0
                             32 	.globl _RS1
                             33 	.globl _RS0
                             34 	.globl _OV
                             35 	.globl _FL
                             36 	.globl _P
                             37 	.globl _TF2
                             38 	.globl _EXF2
                             39 	.globl _RCLK
                             40 	.globl _TCLK
                             41 	.globl _EXEN2
                             42 	.globl _TR2
                             43 	.globl _C_T2
                             44 	.globl _CP_RL2
                             45 	.globl _SM01
                             46 	.globl _SM11
                             47 	.globl _SM21
                             48 	.globl _REN1
                             49 	.globl _TB81
                             50 	.globl _RB81
                             51 	.globl _TI1
                             52 	.globl _RI1
                             53 	.globl _PS1
                             54 	.globl _PT2
                             55 	.globl _PS0
                             56 	.globl _PT1
                             57 	.globl _PX1
                             58 	.globl _PT0
                             59 	.globl _PX0
                             60 	.globl _PD7
                             61 	.globl _PD6
                             62 	.globl _PD5
                             63 	.globl _PD4
                             64 	.globl _PD3
                             65 	.globl _PD2
                             66 	.globl _PD1
                             67 	.globl _PD0
                             68 	.globl _EA
                             69 	.globl _ES1
                             70 	.globl _ET2
                             71 	.globl _ES0
                             72 	.globl _ET1
                             73 	.globl _EX1
                             74 	.globl _ET0
                             75 	.globl _EX0
                             76 	.globl _PC7
                             77 	.globl _PC6
                             78 	.globl _PC5
                             79 	.globl _PC4
                             80 	.globl _PC3
                             81 	.globl _PC2
                             82 	.globl _PC1
                             83 	.globl _PC0
                             84 	.globl _SM0
                             85 	.globl _SM1
                             86 	.globl _SM2
                             87 	.globl _REN
                             88 	.globl _TB8
                             89 	.globl _RB8
                             90 	.globl _TI
                             91 	.globl _RI
                             92 	.globl _PB7
                             93 	.globl _PB6
                             94 	.globl _PB5
                             95 	.globl _PB4
                             96 	.globl _PB3
                             97 	.globl _PB2
                             98 	.globl _PB1
                             99 	.globl _PB0
                            100 	.globl _TF1
                            101 	.globl _TR1
                            102 	.globl _TF0
                            103 	.globl _TR0
                            104 	.globl _IE1
                            105 	.globl _IT1
                            106 	.globl _IE0
                            107 	.globl _IT0
                            108 	.globl _PA7
                            109 	.globl _PA6
                            110 	.globl _PA5
                            111 	.globl _PA4
                            112 	.globl _PA3
                            113 	.globl _PA2
                            114 	.globl _PA1
                            115 	.globl _PA0
                            116 	.globl _EIP
                            117 	.globl _B
                            118 	.globl _EIE
                            119 	.globl _ACC
                            120 	.globl _EICON
                            121 	.globl _PSW
                            122 	.globl _TH2
                            123 	.globl _TL2
                            124 	.globl _RCAP2H
                            125 	.globl _RCAP2L
                            126 	.globl _T2CON
                            127 	.globl _SBUF1
                            128 	.globl _SCON1
                            129 	.globl _GPIFSGLDATLNOX
                            130 	.globl _GPIFSGLDATLX
                            131 	.globl _GPIFSGLDATH
                            132 	.globl _GPIFTRIG
                            133 	.globl _EP01STAT
                            134 	.globl _IP
                            135 	.globl _OEE
                            136 	.globl _OED
                            137 	.globl _OEC
                            138 	.globl _OEB
                            139 	.globl _OEA
                            140 	.globl _IOE
                            141 	.globl _IOD
                            142 	.globl _AUTOPTRSETUP
                            143 	.globl _EP68FIFOFLGS
                            144 	.globl _EP24FIFOFLGS
                            145 	.globl _EP2468STAT
                            146 	.globl _IE
                            147 	.globl _INT4CLR
                            148 	.globl _INT2CLR
                            149 	.globl _IOC
                            150 	.globl _AUTOPTRL2
                            151 	.globl _AUTOPTRH2
                            152 	.globl _AUTOPTRL1
                            153 	.globl _AUTOPTRH1
                            154 	.globl _SBUF0
                            155 	.globl _SCON0
                            156 	.globl __XPAGE
                            157 	.globl _EXIF
                            158 	.globl _IOB
                            159 	.globl _CKCON
                            160 	.globl _TH1
                            161 	.globl _TH0
                            162 	.globl _TL1
                            163 	.globl _TL0
                            164 	.globl _TMOD
                            165 	.globl _TCON
                            166 	.globl _PCON
                            167 	.globl _DPS
                            168 	.globl _DPH1
                            169 	.globl _DPL1
                            170 	.globl _DPH
                            171 	.globl _DPL
                            172 	.globl _SP
                            173 	.globl _IOA
                            174 	.globl _cancel_i2c_trans
                            175 	.globl _GPCR2
                            176 	.globl _ECC2B2
                            177 	.globl _ECC2B1
                            178 	.globl _ECC2B0
                            179 	.globl _ECC1B2
                            180 	.globl _ECC1B1
                            181 	.globl _ECC1B0
                            182 	.globl _ECCRESET
                            183 	.globl _ECCCFG
                            184 	.globl _EP8FIFOBUF
                            185 	.globl _EP6FIFOBUF
                            186 	.globl _EP4FIFOBUF
                            187 	.globl _EP2FIFOBUF
                            188 	.globl _EP1INBUF
                            189 	.globl _EP1OUTBUF
                            190 	.globl _EP0BUF
                            191 	.globl _UDMACRCQUAL
                            192 	.globl _UDMACRCL
                            193 	.globl _UDMACRCH
                            194 	.globl _GPIFHOLDAMOUNT
                            195 	.globl _FLOWSTBHPERIOD
                            196 	.globl _FLOWSTBEDGE
                            197 	.globl _FLOWSTB
                            198 	.globl _FLOWHOLDOFF
                            199 	.globl _FLOWEQ1CTL
                            200 	.globl _FLOWEQ0CTL
                            201 	.globl _FLOWLOGIC
                            202 	.globl _FLOWSTATE
                            203 	.globl _GPIFABORT
                            204 	.globl _GPIFREADYSTAT
                            205 	.globl _GPIFREADYCFG
                            206 	.globl _XGPIFSGLDATLNOX
                            207 	.globl _XGPIFSGLDATLX
                            208 	.globl _XGPIFSGLDATH
                            209 	.globl _EP8GPIFTRIG
                            210 	.globl _EP8GPIFPFSTOP
                            211 	.globl _EP8GPIFFLGSEL
                            212 	.globl _EP6GPIFTRIG
                            213 	.globl _EP6GPIFPFSTOP
                            214 	.globl _EP6GPIFFLGSEL
                            215 	.globl _EP4GPIFTRIG
                            216 	.globl _EP4GPIFPFSTOP
                            217 	.globl _EP4GPIFFLGSEL
                            218 	.globl _EP2GPIFTRIG
                            219 	.globl _EP2GPIFPFSTOP
                            220 	.globl _EP2GPIFFLGSEL
                            221 	.globl _GPIFTCB0
                            222 	.globl _GPIFTCB1
                            223 	.globl _GPIFTCB2
                            224 	.globl _GPIFTCB3
                            225 	.globl _GPIFADRL
                            226 	.globl _GPIFADRH
                            227 	.globl _GPIFCTLCFG
                            228 	.globl _GPIFIDLECTL
                            229 	.globl _GPIFIDLECS
                            230 	.globl _GPIFWFSELECT
                            231 	.globl _SETUPDAT
                            232 	.globl _SUDPTRCTL
                            233 	.globl _SUDPTRL
                            234 	.globl _SUDPTRH
                            235 	.globl _EP8FIFOBCL
                            236 	.globl _EP8FIFOBCH
                            237 	.globl _EP6FIFOBCL
                            238 	.globl _EP6FIFOBCH
                            239 	.globl _EP4FIFOBCL
                            240 	.globl _EP4FIFOBCH
                            241 	.globl _EP2FIFOBCL
                            242 	.globl _EP2FIFOBCH
                            243 	.globl _EP8FIFOFLGS
                            244 	.globl _EP6FIFOFLGS
                            245 	.globl _EP4FIFOFLGS
                            246 	.globl _EP2FIFOFLGS
                            247 	.globl _EP8CS
                            248 	.globl _EP6CS
                            249 	.globl _EP4CS
                            250 	.globl _EP2CS
                            251 	.globl _EP1INCS
                            252 	.globl _EP1OUTCS
                            253 	.globl _EP0CS
                            254 	.globl _EP8BCL
                            255 	.globl _EP8BCH
                            256 	.globl _EP6BCL
                            257 	.globl _EP6BCH
                            258 	.globl _EP4BCL
                            259 	.globl _EP4BCH
                            260 	.globl _EP2BCL
                            261 	.globl _EP2BCH
                            262 	.globl _EP1INBC
                            263 	.globl _EP1OUTBC
                            264 	.globl _EP0BCL
                            265 	.globl _EP0BCH
                            266 	.globl _FNADDR
                            267 	.globl _MICROFRAME
                            268 	.globl _USBFRAMEL
                            269 	.globl _USBFRAMEH
                            270 	.globl _TOGCTL
                            271 	.globl _WAKEUPCS
                            272 	.globl _SUSPEND
                            273 	.globl _USBCS
                            274 	.globl _XAUTODAT2
                            275 	.globl _XAUTODAT1
                            276 	.globl _I2CTL
                            277 	.globl _I2DAT
                            278 	.globl _I2CS
                            279 	.globl _PORTECFG
                            280 	.globl _PORTCCFG
                            281 	.globl _PORTACFG
                            282 	.globl _INTSETUP
                            283 	.globl _INT4IVEC
                            284 	.globl _INT2IVEC
                            285 	.globl _CLRERRCNT
                            286 	.globl _ERRCNTLIM
                            287 	.globl _USBERRIRQ
                            288 	.globl _USBERRIE
                            289 	.globl _GPIFIRQ
                            290 	.globl _GPIFIE
                            291 	.globl _EPIRQ
                            292 	.globl _EPIE
                            293 	.globl _USBIRQ
                            294 	.globl _USBIE
                            295 	.globl _NAKIRQ
                            296 	.globl _NAKIE
                            297 	.globl _IBNIRQ
                            298 	.globl _IBNIE
                            299 	.globl _EP8FIFOIRQ
                            300 	.globl _EP8FIFOIE
                            301 	.globl _EP6FIFOIRQ
                            302 	.globl _EP6FIFOIE
                            303 	.globl _EP4FIFOIRQ
                            304 	.globl _EP4FIFOIE
                            305 	.globl _EP2FIFOIRQ
                            306 	.globl _EP2FIFOIE
                            307 	.globl _OUTPKTEND
                            308 	.globl _INPKTEND
                            309 	.globl _EP8ISOINPKTS
                            310 	.globl _EP6ISOINPKTS
                            311 	.globl _EP4ISOINPKTS
                            312 	.globl _EP2ISOINPKTS
                            313 	.globl _EP8FIFOPFL
                            314 	.globl _EP8FIFOPFH
                            315 	.globl _EP6FIFOPFL
                            316 	.globl _EP6FIFOPFH
                            317 	.globl _EP4FIFOPFL
                            318 	.globl _EP4FIFOPFH
                            319 	.globl _EP2FIFOPFL
                            320 	.globl _EP2FIFOPFH
                            321 	.globl _EP8AUTOINLENL
                            322 	.globl _EP8AUTOINLENH
                            323 	.globl _EP6AUTOINLENL
                            324 	.globl _EP6AUTOINLENH
                            325 	.globl _EP4AUTOINLENL
                            326 	.globl _EP4AUTOINLENH
                            327 	.globl _EP2AUTOINLENL
                            328 	.globl _EP2AUTOINLENH
                            329 	.globl _EP8FIFOCFG
                            330 	.globl _EP6FIFOCFG
                            331 	.globl _EP4FIFOCFG
                            332 	.globl _EP2FIFOCFG
                            333 	.globl _EP8CFG
                            334 	.globl _EP6CFG
                            335 	.globl _EP4CFG
                            336 	.globl _EP2CFG
                            337 	.globl _EP1INCFG
                            338 	.globl _EP1OUTCFG
                            339 	.globl _REVCTL
                            340 	.globl _REVID
                            341 	.globl _FIFOPINPOLAR
                            342 	.globl _UART230
                            343 	.globl _BPADDRL
                            344 	.globl _BPADDRH
                            345 	.globl _BREAKPT
                            346 	.globl _FIFORESET
                            347 	.globl _PINFLAGSCD
                            348 	.globl _PINFLAGSAB
                            349 	.globl _IFCONFIG
                            350 	.globl _CPUCS
                            351 	.globl _RES_WAVEDATA_END
                            352 	.globl _GPIF_WAVE_DATA
                            353 	.globl _eeprom_read_PARM_4
                            354 	.globl _eeprom_read_PARM_3
                            355 	.globl _eeprom_read_PARM_2
                            356 	.globl _i2c_read_PARM_3
                            357 	.globl _i2c_read_PARM_2
                            358 	.globl _i2c_write_PARM_5
                            359 	.globl _i2c_write_PARM_4
                            360 	.globl _i2c_write_PARM_3
                            361 	.globl _i2c_write_PARM_2
                            362 	.globl _i2c_write
                            363 	.globl _i2c_read
                            364 	.globl _eeprom_write
                            365 	.globl _eeprom_read
                            366 ;--------------------------------------------------------
                            367 ; special function registers
                            368 ;--------------------------------------------------------
                            369 	.area RSEG    (DATA)
                    0080    370 _IOA	=	0x0080
                    0081    371 _SP	=	0x0081
                    0082    372 _DPL	=	0x0082
                    0083    373 _DPH	=	0x0083
                    0084    374 _DPL1	=	0x0084
                    0085    375 _DPH1	=	0x0085
                    0086    376 _DPS	=	0x0086
                    0087    377 _PCON	=	0x0087
                    0088    378 _TCON	=	0x0088
                    0089    379 _TMOD	=	0x0089
                    008A    380 _TL0	=	0x008a
                    008B    381 _TL1	=	0x008b
                    008C    382 _TH0	=	0x008c
                    008D    383 _TH1	=	0x008d
                    008E    384 _CKCON	=	0x008e
                    0090    385 _IOB	=	0x0090
                    0091    386 _EXIF	=	0x0091
                    0092    387 __XPAGE	=	0x0092
                    0098    388 _SCON0	=	0x0098
                    0099    389 _SBUF0	=	0x0099
                    009A    390 _AUTOPTRH1	=	0x009a
                    009B    391 _AUTOPTRL1	=	0x009b
                    009D    392 _AUTOPTRH2	=	0x009d
                    009E    393 _AUTOPTRL2	=	0x009e
                    00A0    394 _IOC	=	0x00a0
                    00A1    395 _INT2CLR	=	0x00a1
                    00A2    396 _INT4CLR	=	0x00a2
                    00A8    397 _IE	=	0x00a8
                    00AA    398 _EP2468STAT	=	0x00aa
                    00AB    399 _EP24FIFOFLGS	=	0x00ab
                    00AC    400 _EP68FIFOFLGS	=	0x00ac
                    00AF    401 _AUTOPTRSETUP	=	0x00af
                    00B0    402 _IOD	=	0x00b0
                    00B1    403 _IOE	=	0x00b1
                    00B2    404 _OEA	=	0x00b2
                    00B3    405 _OEB	=	0x00b3
                    00B4    406 _OEC	=	0x00b4
                    00B5    407 _OED	=	0x00b5
                    00B6    408 _OEE	=	0x00b6
                    00B8    409 _IP	=	0x00b8
                    00BA    410 _EP01STAT	=	0x00ba
                    00BB    411 _GPIFTRIG	=	0x00bb
                    00BD    412 _GPIFSGLDATH	=	0x00bd
                    00BE    413 _GPIFSGLDATLX	=	0x00be
                    00BF    414 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    415 _SCON1	=	0x00c0
                    00C1    416 _SBUF1	=	0x00c1
                    00C8    417 _T2CON	=	0x00c8
                    00CA    418 _RCAP2L	=	0x00ca
                    00CB    419 _RCAP2H	=	0x00cb
                    00CC    420 _TL2	=	0x00cc
                    00CD    421 _TH2	=	0x00cd
                    00D0    422 _PSW	=	0x00d0
                    00D8    423 _EICON	=	0x00d8
                    00E0    424 _ACC	=	0x00e0
                    00E8    425 _EIE	=	0x00e8
                    00F0    426 _B	=	0x00f0
                    00F8    427 _EIP	=	0x00f8
                            428 ;--------------------------------------------------------
                            429 ; special function bits
                            430 ;--------------------------------------------------------
                            431 	.area RSEG    (DATA)
                    0080    432 _PA0	=	0x0080
                    0081    433 _PA1	=	0x0081
                    0082    434 _PA2	=	0x0082
                    0083    435 _PA3	=	0x0083
                    0084    436 _PA4	=	0x0084
                    0085    437 _PA5	=	0x0085
                    0086    438 _PA6	=	0x0086
                    0087    439 _PA7	=	0x0087
                    0088    440 _IT0	=	0x0088
                    0089    441 _IE0	=	0x0089
                    008A    442 _IT1	=	0x008a
                    008B    443 _IE1	=	0x008b
                    008C    444 _TR0	=	0x008c
                    008D    445 _TF0	=	0x008d
                    008E    446 _TR1	=	0x008e
                    008F    447 _TF1	=	0x008f
                    0090    448 _PB0	=	0x0090
                    0091    449 _PB1	=	0x0091
                    0092    450 _PB2	=	0x0092
                    0093    451 _PB3	=	0x0093
                    0094    452 _PB4	=	0x0094
                    0095    453 _PB5	=	0x0095
                    0096    454 _PB6	=	0x0096
                    0097    455 _PB7	=	0x0097
                    0098    456 _RI	=	0x0098
                    0099    457 _TI	=	0x0099
                    009A    458 _RB8	=	0x009a
                    009B    459 _TB8	=	0x009b
                    009C    460 _REN	=	0x009c
                    009D    461 _SM2	=	0x009d
                    009E    462 _SM1	=	0x009e
                    009F    463 _SM0	=	0x009f
                    00A0    464 _PC0	=	0x00a0
                    00A1    465 _PC1	=	0x00a1
                    00A2    466 _PC2	=	0x00a2
                    00A3    467 _PC3	=	0x00a3
                    00A4    468 _PC4	=	0x00a4
                    00A5    469 _PC5	=	0x00a5
                    00A6    470 _PC6	=	0x00a6
                    00A7    471 _PC7	=	0x00a7
                    00A8    472 _EX0	=	0x00a8
                    00A9    473 _ET0	=	0x00a9
                    00AA    474 _EX1	=	0x00aa
                    00AB    475 _ET1	=	0x00ab
                    00AC    476 _ES0	=	0x00ac
                    00AD    477 _ET2	=	0x00ad
                    00AE    478 _ES1	=	0x00ae
                    00AF    479 _EA	=	0x00af
                    00B0    480 _PD0	=	0x00b0
                    00B1    481 _PD1	=	0x00b1
                    00B2    482 _PD2	=	0x00b2
                    00B3    483 _PD3	=	0x00b3
                    00B4    484 _PD4	=	0x00b4
                    00B5    485 _PD5	=	0x00b5
                    00B6    486 _PD6	=	0x00b6
                    00B7    487 _PD7	=	0x00b7
                    00B8    488 _PX0	=	0x00b8
                    00B9    489 _PT0	=	0x00b9
                    00BA    490 _PX1	=	0x00ba
                    00BB    491 _PT1	=	0x00bb
                    00BC    492 _PS0	=	0x00bc
                    00BD    493 _PT2	=	0x00bd
                    00BE    494 _PS1	=	0x00be
                    00C0    495 _RI1	=	0x00c0
                    00C1    496 _TI1	=	0x00c1
                    00C2    497 _RB81	=	0x00c2
                    00C3    498 _TB81	=	0x00c3
                    00C4    499 _REN1	=	0x00c4
                    00C5    500 _SM21	=	0x00c5
                    00C6    501 _SM11	=	0x00c6
                    00C7    502 _SM01	=	0x00c7
                    00C8    503 _CP_RL2	=	0x00c8
                    00C9    504 _C_T2	=	0x00c9
                    00CA    505 _TR2	=	0x00ca
                    00CB    506 _EXEN2	=	0x00cb
                    00CC    507 _TCLK	=	0x00cc
                    00CD    508 _RCLK	=	0x00cd
                    00CE    509 _EXF2	=	0x00ce
                    00CF    510 _TF2	=	0x00cf
                    00D0    511 _P	=	0x00d0
                    00D1    512 _FL	=	0x00d1
                    00D2    513 _OV	=	0x00d2
                    00D3    514 _RS0	=	0x00d3
                    00D4    515 _RS1	=	0x00d4
                    00D5    516 _F0	=	0x00d5
                    00D6    517 _AC	=	0x00d6
                    00D7    518 _CY	=	0x00d7
                    00DB    519 _INT6	=	0x00db
                    00DC    520 _RESI	=	0x00dc
                    00DD    521 _ERESI	=	0x00dd
                    00DF    522 _SMOD1	=	0x00df
                    00E8    523 _EUSB	=	0x00e8
                    00E9    524 _EI2C	=	0x00e9
                    00EA    525 _EIEX4	=	0x00ea
                    00EB    526 _EIEX5	=	0x00eb
                    00EC    527 _EIEX6	=	0x00ec
                    00F8    528 _PUSB	=	0x00f8
                    00F9    529 _PI2C	=	0x00f9
                    00FA    530 _EIPX4	=	0x00fa
                    00FB    531 _EIPX5	=	0x00fb
                    00FC    532 _EIPX6	=	0x00fc
                            533 ;--------------------------------------------------------
                            534 ; overlayable register banks
                            535 ;--------------------------------------------------------
                            536 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     537 	.ds 8
                            538 ;--------------------------------------------------------
                            539 ; internal ram data
                            540 ;--------------------------------------------------------
                            541 	.area DSEG    (DATA)
   0000                     542 _i2c_write_PARM_2:
   0000                     543 	.ds 2
   0002                     544 _i2c_write_PARM_3:
   0002                     545 	.ds 3
   0005                     546 _i2c_write_PARM_4:
   0005                     547 	.ds 2
   0007                     548 _i2c_write_PARM_5:
   0007                     549 	.ds 3
   000A                     550 _i2c_write_total_bytes_1_1:
   000A                     551 	.ds 2
   000C                     552 _i2c_write_retry_count_1_1:
   000C                     553 	.ds 1
   000D                     554 _i2c_read_PARM_2:
   000D                     555 	.ds 2
   000F                     556 _i2c_read_PARM_3:
   000F                     557 	.ds 3
   0012                     558 _i2c_read_cur_byte_1_1:
   0012                     559 	.ds 2
   0014                     560 _eeprom_read_PARM_2:
   0014                     561 	.ds 2
   0016                     562 _eeprom_read_PARM_3:
   0016                     563 	.ds 2
   0018                     564 _eeprom_read_PARM_4:
   0018                     565 	.ds 3
   001B                     566 _eeprom_read_eeprom_addr_1_1:
   001B                     567 	.ds 2
                            568 ;--------------------------------------------------------
                            569 ; overlayable items in internal ram 
                            570 ;--------------------------------------------------------
                            571 	.area	OSEG    (OVR,DATA)
   0000                     572 _eeprom_write_PARM_2::
   0000                     573 	.ds 2
   0002                     574 _eeprom_write_PARM_3::
   0002                     575 	.ds 2
   0004                     576 _eeprom_write_PARM_4::
   0004                     577 	.ds 3
                            578 ;--------------------------------------------------------
                            579 ; indirectly addressable internal ram data
                            580 ;--------------------------------------------------------
                            581 	.area ISEG    (DATA)
                            582 ;--------------------------------------------------------
                            583 ; absolute internal ram data
                            584 ;--------------------------------------------------------
                            585 	.area IABS    (ABS,DATA)
                            586 	.area IABS    (ABS,DATA)
                            587 ;--------------------------------------------------------
                            588 ; bit data
                            589 ;--------------------------------------------------------
                            590 	.area BSEG    (BIT)
                            591 ;--------------------------------------------------------
                            592 ; paged external ram data
                            593 ;--------------------------------------------------------
                            594 	.area PSEG    (PAG,XDATA)
                            595 ;--------------------------------------------------------
                            596 ; external ram data
                            597 ;--------------------------------------------------------
                            598 	.area XSEG    (XDATA)
                    E400    599 _GPIF_WAVE_DATA	=	0xe400
                    E480    600 _RES_WAVEDATA_END	=	0xe480
                    E600    601 _CPUCS	=	0xe600
                    E601    602 _IFCONFIG	=	0xe601
                    E602    603 _PINFLAGSAB	=	0xe602
                    E603    604 _PINFLAGSCD	=	0xe603
                    E604    605 _FIFORESET	=	0xe604
                    E605    606 _BREAKPT	=	0xe605
                    E606    607 _BPADDRH	=	0xe606
                    E607    608 _BPADDRL	=	0xe607
                    E608    609 _UART230	=	0xe608
                    E609    610 _FIFOPINPOLAR	=	0xe609
                    E60A    611 _REVID	=	0xe60a
                    E60B    612 _REVCTL	=	0xe60b
                    E610    613 _EP1OUTCFG	=	0xe610
                    E611    614 _EP1INCFG	=	0xe611
                    E612    615 _EP2CFG	=	0xe612
                    E613    616 _EP4CFG	=	0xe613
                    E614    617 _EP6CFG	=	0xe614
                    E615    618 _EP8CFG	=	0xe615
                    E618    619 _EP2FIFOCFG	=	0xe618
                    E619    620 _EP4FIFOCFG	=	0xe619
                    E61A    621 _EP6FIFOCFG	=	0xe61a
                    E61B    622 _EP8FIFOCFG	=	0xe61b
                    E620    623 _EP2AUTOINLENH	=	0xe620
                    E621    624 _EP2AUTOINLENL	=	0xe621
                    E622    625 _EP4AUTOINLENH	=	0xe622
                    E623    626 _EP4AUTOINLENL	=	0xe623
                    E624    627 _EP6AUTOINLENH	=	0xe624
                    E625    628 _EP6AUTOINLENL	=	0xe625
                    E626    629 _EP8AUTOINLENH	=	0xe626
                    E627    630 _EP8AUTOINLENL	=	0xe627
                    E630    631 _EP2FIFOPFH	=	0xe630
                    E631    632 _EP2FIFOPFL	=	0xe631
                    E632    633 _EP4FIFOPFH	=	0xe632
                    E633    634 _EP4FIFOPFL	=	0xe633
                    E634    635 _EP6FIFOPFH	=	0xe634
                    E635    636 _EP6FIFOPFL	=	0xe635
                    E636    637 _EP8FIFOPFH	=	0xe636
                    E637    638 _EP8FIFOPFL	=	0xe637
                    E640    639 _EP2ISOINPKTS	=	0xe640
                    E641    640 _EP4ISOINPKTS	=	0xe641
                    E642    641 _EP6ISOINPKTS	=	0xe642
                    E643    642 _EP8ISOINPKTS	=	0xe643
                    E648    643 _INPKTEND	=	0xe648
                    E649    644 _OUTPKTEND	=	0xe649
                    E650    645 _EP2FIFOIE	=	0xe650
                    E651    646 _EP2FIFOIRQ	=	0xe651
                    E652    647 _EP4FIFOIE	=	0xe652
                    E653    648 _EP4FIFOIRQ	=	0xe653
                    E654    649 _EP6FIFOIE	=	0xe654
                    E655    650 _EP6FIFOIRQ	=	0xe655
                    E656    651 _EP8FIFOIE	=	0xe656
                    E657    652 _EP8FIFOIRQ	=	0xe657
                    E658    653 _IBNIE	=	0xe658
                    E659    654 _IBNIRQ	=	0xe659
                    E65A    655 _NAKIE	=	0xe65a
                    E65B    656 _NAKIRQ	=	0xe65b
                    E65C    657 _USBIE	=	0xe65c
                    E65D    658 _USBIRQ	=	0xe65d
                    E65E    659 _EPIE	=	0xe65e
                    E65F    660 _EPIRQ	=	0xe65f
                    E660    661 _GPIFIE	=	0xe660
                    E661    662 _GPIFIRQ	=	0xe661
                    E662    663 _USBERRIE	=	0xe662
                    E663    664 _USBERRIRQ	=	0xe663
                    E664    665 _ERRCNTLIM	=	0xe664
                    E665    666 _CLRERRCNT	=	0xe665
                    E666    667 _INT2IVEC	=	0xe666
                    E667    668 _INT4IVEC	=	0xe667
                    E668    669 _INTSETUP	=	0xe668
                    E670    670 _PORTACFG	=	0xe670
                    E671    671 _PORTCCFG	=	0xe671
                    E672    672 _PORTECFG	=	0xe672
                    E678    673 _I2CS	=	0xe678
                    E679    674 _I2DAT	=	0xe679
                    E67A    675 _I2CTL	=	0xe67a
                    E67B    676 _XAUTODAT1	=	0xe67b
                    E67C    677 _XAUTODAT2	=	0xe67c
                    E680    678 _USBCS	=	0xe680
                    E681    679 _SUSPEND	=	0xe681
                    E682    680 _WAKEUPCS	=	0xe682
                    E683    681 _TOGCTL	=	0xe683
                    E684    682 _USBFRAMEH	=	0xe684
                    E685    683 _USBFRAMEL	=	0xe685
                    E686    684 _MICROFRAME	=	0xe686
                    E687    685 _FNADDR	=	0xe687
                    E68A    686 _EP0BCH	=	0xe68a
                    E68B    687 _EP0BCL	=	0xe68b
                    E68D    688 _EP1OUTBC	=	0xe68d
                    E68F    689 _EP1INBC	=	0xe68f
                    E690    690 _EP2BCH	=	0xe690
                    E691    691 _EP2BCL	=	0xe691
                    E694    692 _EP4BCH	=	0xe694
                    E695    693 _EP4BCL	=	0xe695
                    E698    694 _EP6BCH	=	0xe698
                    E699    695 _EP6BCL	=	0xe699
                    E69C    696 _EP8BCH	=	0xe69c
                    E69D    697 _EP8BCL	=	0xe69d
                    E6A0    698 _EP0CS	=	0xe6a0
                    E6A1    699 _EP1OUTCS	=	0xe6a1
                    E6A2    700 _EP1INCS	=	0xe6a2
                    E6A3    701 _EP2CS	=	0xe6a3
                    E6A4    702 _EP4CS	=	0xe6a4
                    E6A5    703 _EP6CS	=	0xe6a5
                    E6A6    704 _EP8CS	=	0xe6a6
                    E6A7    705 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    706 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    707 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    708 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    709 _EP2FIFOBCH	=	0xe6ab
                    E6AC    710 _EP2FIFOBCL	=	0xe6ac
                    E6AD    711 _EP4FIFOBCH	=	0xe6ad
                    E6AE    712 _EP4FIFOBCL	=	0xe6ae
                    E6AF    713 _EP6FIFOBCH	=	0xe6af
                    E6B0    714 _EP6FIFOBCL	=	0xe6b0
                    E6B1    715 _EP8FIFOBCH	=	0xe6b1
                    E6B2    716 _EP8FIFOBCL	=	0xe6b2
                    E6B3    717 _SUDPTRH	=	0xe6b3
                    E6B4    718 _SUDPTRL	=	0xe6b4
                    E6B5    719 _SUDPTRCTL	=	0xe6b5
                    E6B8    720 _SETUPDAT	=	0xe6b8
                    E6C0    721 _GPIFWFSELECT	=	0xe6c0
                    E6C1    722 _GPIFIDLECS	=	0xe6c1
                    E6C2    723 _GPIFIDLECTL	=	0xe6c2
                    E6C3    724 _GPIFCTLCFG	=	0xe6c3
                    E6C4    725 _GPIFADRH	=	0xe6c4
                    E6C5    726 _GPIFADRL	=	0xe6c5
                    E6CE    727 _GPIFTCB3	=	0xe6ce
                    E6CF    728 _GPIFTCB2	=	0xe6cf
                    E6D0    729 _GPIFTCB1	=	0xe6d0
                    E6D1    730 _GPIFTCB0	=	0xe6d1
                    E6D2    731 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    732 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    733 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    734 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    735 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    736 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    737 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    738 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    739 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    740 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    741 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    742 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    743 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    744 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    745 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    746 _GPIFREADYCFG	=	0xe6f3
                    E6F4    747 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    748 _GPIFABORT	=	0xe6f5
                    E6C6    749 _FLOWSTATE	=	0xe6c6
                    E6C7    750 _FLOWLOGIC	=	0xe6c7
                    E6C8    751 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    752 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    753 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    754 _FLOWSTB	=	0xe6cb
                    E6CC    755 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    756 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    757 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    758 _UDMACRCH	=	0xe67d
                    E67E    759 _UDMACRCL	=	0xe67e
                    E67F    760 _UDMACRCQUAL	=	0xe67f
                    E740    761 _EP0BUF	=	0xe740
                    E780    762 _EP1OUTBUF	=	0xe780
                    E7C0    763 _EP1INBUF	=	0xe7c0
                    F000    764 _EP2FIFOBUF	=	0xf000
                    F400    765 _EP4FIFOBUF	=	0xf400
                    F800    766 _EP6FIFOBUF	=	0xf800
                    FC00    767 _EP8FIFOBUF	=	0xfc00
                    E628    768 _ECCCFG	=	0xe628
                    E629    769 _ECCRESET	=	0xe629
                    E62A    770 _ECC1B0	=	0xe62a
                    E62B    771 _ECC1B1	=	0xe62b
                    E62C    772 _ECC1B2	=	0xe62c
                    E62D    773 _ECC2B0	=	0xe62d
                    E62E    774 _ECC2B1	=	0xe62e
                    E62F    775 _ECC2B2	=	0xe62f
                    E50D    776 _GPCR2	=	0xe50d
   0000                     777 _cancel_i2c_trans::
   0000                     778 	.ds 1
                            779 ;--------------------------------------------------------
                            780 ; absolute external ram data
                            781 ;--------------------------------------------------------
                            782 	.area XABS    (ABS,XDATA)
                            783 ;--------------------------------------------------------
                            784 ; external initialized ram data
                            785 ;--------------------------------------------------------
                            786 	.area XISEG   (XDATA)
                            787 	.area HOME    (CODE)
                            788 	.area GSINIT0 (CODE)
                            789 	.area GSINIT1 (CODE)
                            790 	.area GSINIT2 (CODE)
                            791 	.area GSINIT3 (CODE)
                            792 	.area GSINIT4 (CODE)
                            793 	.area GSINIT5 (CODE)
                            794 	.area GSINIT  (CODE)
                            795 	.area GSFINAL (CODE)
                            796 	.area CSEG    (CODE)
                            797 ;--------------------------------------------------------
                            798 ; global & static initialisations
                            799 ;--------------------------------------------------------
                            800 	.area HOME    (CODE)
                            801 	.area GSINIT  (CODE)
                            802 	.area GSFINAL (CODE)
                            803 	.area GSINIT  (CODE)
                            804 ;--------------------------------------------------------
                            805 ; Home
                            806 ;--------------------------------------------------------
                            807 	.area HOME    (CODE)
                            808 	.area HOME    (CODE)
                            809 ;--------------------------------------------------------
                            810 ; code
                            811 ;--------------------------------------------------------
                            812 	.area CSEG    (CODE)
                            813 ;------------------------------------------------------------
                            814 ;Allocation info for local variables in function 'i2c_write'
                            815 ;------------------------------------------------------------
                            816 ;len                       Allocated with name '_i2c_write_PARM_2'
                            817 ;addr_buf                  Allocated with name '_i2c_write_PARM_3'
                            818 ;len2                      Allocated with name '_i2c_write_PARM_4'
                            819 ;data_buf                  Allocated with name '_i2c_write_PARM_5'
                            820 ;addr                      Allocated to registers r2 
                            821 ;cur_byte                  Allocated to registers r6 r7 
                            822 ;total_bytes               Allocated with name '_i2c_write_total_bytes_1_1'
                            823 ;retry_count               Allocated with name '_i2c_write_retry_count_1_1'
                            824 ;------------------------------------------------------------
                            825 ;	i2c.c:51: BOOL i2c_write ( BYTE addr, WORD len, BYTE *addr_buf, WORD len2, BYTE* data_buf ) {
                            826 ;	-----------------------------------------
                            827 ;	 function i2c_write
                            828 ;	-----------------------------------------
   0000                     829 _i2c_write:
                    0002    830 	ar2 = 0x02
                    0003    831 	ar3 = 0x03
                    0004    832 	ar4 = 0x04
                    0005    833 	ar5 = 0x05
                    0006    834 	ar6 = 0x06
                    0007    835 	ar7 = 0x07
                    0000    836 	ar0 = 0x00
                    0001    837 	ar1 = 0x01
   0000 AA 82               838 	mov	r2,dpl
                            839 ;	i2c.c:54: WORD total_bytes = len+len2; // NOTE overflow error?
   0002 E5*05               840 	mov	a,_i2c_write_PARM_4
   0004 25*00               841 	add	a,_i2c_write_PARM_2
   0006 F5*0A               842 	mov	_i2c_write_total_bytes_1_1,a
   0008 E5*06               843 	mov	a,(_i2c_write_PARM_4 + 1)
   000A 35*01               844 	addc	a,(_i2c_write_PARM_2 + 1)
   000C F5*0B               845 	mov	(_i2c_write_total_bytes_1_1 + 1),a
                            846 ;	i2c.c:56: cancel_i2c_trans=FALSE;
   000E 90s00r00            847 	mov	dptr,#_cancel_i2c_trans
   0011 E4                  848 	clr	a
   0012 F0                  849 	movx	@dptr,a
                            850 ;	i2c.c:60: step1:
   0013 EA                  851 	mov	a,r2
   0014 2A                  852 	add	a,r2
   0015 FA                  853 	mov	r2,a
   0016 75*0C 02            854 	mov	_i2c_write_retry_count_1_1,#0x02
   0019                     855 00101$:
                            856 ;	i2c.c:61: CHECK_I2C_CANCEL();
   0019 90s00r00            857 	mov	dptr,#_cancel_i2c_trans
   001C E0                  858 	movx	a,@dptr
   001D FE                  859 	mov	r6,a
   001E 60 04               860 	jz	00103$
   0020 75 82 00            861 	mov	dpl,#0x00
   0023 22                  862 	ret
   0024                     863 00103$:
                            864 ;	i2c.c:63: I2CS |= bmSTART;
   0024 90 E6 78            865 	mov	dptr,#_I2CS
   0027 E0                  866 	movx	a,@dptr
   0028 44 80               867 	orl	a,#0x80
   002A F0                  868 	movx	@dptr,a
                            869 ;	i2c.c:64: if ( I2CS & bmBERR ) {
   002B 90 E6 78            870 	mov	dptr,#_I2CS
   002E E0                  871 	movx	a,@dptr
   002F FE                  872 	mov	r6,a
   0030 30 E2 0C            873 	jnb	acc.2,00105$
                            874 ;	i2c.c:66: delay(10); // way too long probably
   0033 90 00 0A            875 	mov	dptr,#0x000A
   0036 C0 02               876 	push	ar2
   0038 12s00r00            877 	lcall	_delay
   003B D0 02               878 	pop	ar2
                            879 ;	i2c.c:67: goto step1;
   003D 80 DA               880 	sjmp	00101$
   003F                     881 00105$:
                            882 ;	i2c.c:72: I2DAT = addr << 1;
   003F 90 E6 79            883 	mov	dptr,#_I2DAT
   0042 EA                  884 	mov	a,r2
   0043 F0                  885 	movx	@dptr,a
                            886 ;	i2c.c:75: while ( !(I2CS & bmDONE) && !cancel_i2c_trans);
   0044                     887 00107$:
   0044 90 E6 78            888 	mov	dptr,#_I2CS
   0047 E0                  889 	movx	a,@dptr
   0048 FE                  890 	mov	r6,a
   0049 20 E0 07            891 	jb	acc.0,00109$
   004C 90s00r00            892 	mov	dptr,#_cancel_i2c_trans
   004F E0                  893 	movx	a,@dptr
   0050 FE                  894 	mov	r6,a
   0051 60 F1               895 	jz	00107$
   0053                     896 00109$:
                            897 ;	i2c.c:76: CHECK_I2C_CANCEL();
   0053 90s00r00            898 	mov	dptr,#_cancel_i2c_trans
   0056 E0                  899 	movx	a,@dptr
   0057 FE                  900 	mov	r6,a
   0058 60 04               901 	jz	00111$
   005A 75 82 00            902 	mov	dpl,#0x00
   005D 22                  903 	ret
   005E                     904 00111$:
                            905 ;	i2c.c:77: if (I2CS&bmBERR) {
   005E 90 E6 78            906 	mov	dptr,#_I2CS
   0061 E0                  907 	movx	a,@dptr
   0062 FE                  908 	mov	r6,a
   0063 20 E2 B3            909 	jb	acc.2,00101$
                            910 ;	i2c.c:84: if ( !(I2CS & bmACK) ) {
   0066 90 E6 78            911 	mov	dptr,#_I2CS
   0069 E0                  912 	movx	a,@dptr
   006A FE                  913 	mov	r6,a
   006B 20 E1 36            914 	jb	acc.1,00169$
                            915 ;	i2c.c:85: I2CS |= bmSTOP;
   006E 90 E6 78            916 	mov	dptr,#_I2CS
   0071 E0                  917 	movx	a,@dptr
   0072 FE                  918 	mov	r6,a
   0073 44 40               919 	orl	a,#0x40
   0075 F0                  920 	movx	@dptr,a
                            921 ;	i2c.c:86: while ( (I2CS & bmSTOP) && !cancel_i2c_trans);
   0076                     922 00115$:
   0076 90 E6 78            923 	mov	dptr,#_I2CS
   0079 E0                  924 	movx	a,@dptr
   007A FE                  925 	mov	r6,a
   007B 30 E6 07            926 	jnb	acc.6,00117$
   007E 90s00r00            927 	mov	dptr,#_cancel_i2c_trans
   0081 E0                  928 	movx	a,@dptr
   0082 FE                  929 	mov	r6,a
   0083 60 F1               930 	jz	00115$
   0085                     931 00117$:
                            932 ;	i2c.c:87: CHECK_I2C_CANCEL();
   0085 90s00r00            933 	mov	dptr,#_cancel_i2c_trans
   0088 E0                  934 	movx	a,@dptr
   0089 FE                  935 	mov	r6,a
   008A 60 04               936 	jz	00119$
   008C 75 82 00            937 	mov	dpl,#0x00
   008F 22                  938 	ret
   0090                     939 00119$:
                            940 ;	i2c.c:88: --retry_count;
                            941 ;	i2c.c:89: if (!retry_count){
   0090 D5*0C 04            942 	djnz	_i2c_write_retry_count_1_1,00121$
                            943 ;	i2c.c:91: return FALSE;
   0093 75 82 00            944 	mov	dpl,#0x00
   0096 22                  945 	ret
   0097                     946 00121$:
                            947 ;	i2c.c:93: delay(10);
   0097 90 00 0A            948 	mov	dptr,#0x000A
   009A C0 02               949 	push	ar2
   009C 12s00r00            950 	lcall	_delay
   009F D0 02               951 	pop	ar2
                            952 ;	i2c.c:94: goto step1;
   00A1 02s00r19            953 	ljmp	00101$
                            954 ;	i2c.c:98: while ( cur_byte < total_bytes ) {
   00A4                     955 00169$:
   00A4 7E 00               956 	mov	r6,#0x00
   00A6 7F 00               957 	mov	r7,#0x00
   00A8                     958 00138$:
   00A8 C3                  959 	clr	c
   00A9 EE                  960 	mov	a,r6
   00AA 95*0A               961 	subb	a,_i2c_write_total_bytes_1_1
   00AC EF                  962 	mov	a,r7
   00AD 95*0B               963 	subb	a,(_i2c_write_total_bytes_1_1 + 1)
   00AF 40 03               964 	jc	00187$
   00B1 02s01r45            965 	ljmp	00140$
   00B4                     966 00187$:
                            967 ;	i2c.c:100: I2DAT = cur_byte < len ? addr_buf[cur_byte] : data_buf[cur_byte-len];
   00B4 C3                  968 	clr	c
   00B5 EE                  969 	mov	a,r6
   00B6 95*00               970 	subb	a,_i2c_write_PARM_2
   00B8 EF                  971 	mov	a,r7
   00B9 95*01               972 	subb	a,(_i2c_write_PARM_2 + 1)
   00BB 50 16               973 	jnc	00149$
   00BD EE                  974 	mov	a,r6
   00BE 25*02               975 	add	a,_i2c_write_PARM_3
   00C0 F8                  976 	mov	r0,a
   00C1 EF                  977 	mov	a,r7
   00C2 35*03               978 	addc	a,(_i2c_write_PARM_3 + 1)
   00C4 F9                  979 	mov	r1,a
   00C5 AD*04               980 	mov	r5,(_i2c_write_PARM_3 + 2)
   00C7 88 82               981 	mov	dpl,r0
   00C9 89 83               982 	mov	dph,r1
   00CB 8D F0               983 	mov	b,r5
   00CD 12s00r00            984 	lcall	__gptrget
   00D0 FD                  985 	mov	r5,a
   00D1 80 1D               986 	sjmp	00150$
   00D3                     987 00149$:
   00D3 EE                  988 	mov	a,r6
   00D4 C3                  989 	clr	c
   00D5 95*00               990 	subb	a,_i2c_write_PARM_2
   00D7 F8                  991 	mov	r0,a
   00D8 EF                  992 	mov	a,r7
   00D9 95*01               993 	subb	a,(_i2c_write_PARM_2 + 1)
   00DB F9                  994 	mov	r1,a
   00DC E8                  995 	mov	a,r0
   00DD 25*07               996 	add	a,_i2c_write_PARM_5
   00DF F8                  997 	mov	r0,a
   00E0 E9                  998 	mov	a,r1
   00E1 35*08               999 	addc	a,(_i2c_write_PARM_5 + 1)
   00E3 F9                 1000 	mov	r1,a
   00E4 AB*09              1001 	mov	r3,(_i2c_write_PARM_5 + 2)
   00E6 88 82              1002 	mov	dpl,r0
   00E8 89 83              1003 	mov	dph,r1
   00EA 8B F0              1004 	mov	b,r3
   00EC 12s00r00           1005 	lcall	__gptrget
   00EF FD                 1006 	mov	r5,a
   00F0                    1007 00150$:
   00F0 90 E6 79           1008 	mov	dptr,#_I2DAT
   00F3 ED                 1009 	mov	a,r5
   00F4 F0                 1010 	movx	@dptr,a
                           1011 ;	i2c.c:101: ++cur_byte;
   00F5 0E                 1012 	inc	r6
   00F6 BE 00 01           1013 	cjne	r6,#0x00,00189$
   00F9 0F                 1014 	inc	r7
   00FA                    1015 00189$:
                           1016 ;	i2c.c:103: while (!(I2CS&bmDONE) && !cancel_i2c_trans); CHECK_I2C_CANCEL();
   00FA                    1017 00125$:
   00FA 90 E6 78           1018 	mov	dptr,#_I2CS
   00FD E0                 1019 	movx	a,@dptr
   00FE FB                 1020 	mov	r3,a
   00FF 20 E0 07           1021 	jb	acc.0,00127$
   0102 90s00r00           1022 	mov	dptr,#_cancel_i2c_trans
   0105 E0                 1023 	movx	a,@dptr
   0106 FB                 1024 	mov	r3,a
   0107 60 F1              1025 	jz	00125$
   0109                    1026 00127$:
   0109 90s00r00           1027 	mov	dptr,#_cancel_i2c_trans
   010C E0                 1028 	movx	a,@dptr
   010D FB                 1029 	mov	r3,a
   010E 60 04              1030 	jz	00129$
   0110 75 82 00           1031 	mov	dpl,#0x00
   0113 22                 1032 	ret
   0114                    1033 00129$:
                           1034 ;	i2c.c:104: if ( I2CS&bmBERR ) {
   0114 90 E6 78           1035 	mov	dptr,#_I2CS
   0117 E0                 1036 	movx	a,@dptr
   0118 FB                 1037 	mov	r3,a
   0119 30 E2 03           1038 	jnb	acc.2,00193$
   011C 02s00r19           1039 	ljmp	00101$
   011F                    1040 00193$:
                           1041 ;	i2c.c:110: if ( !(I2CS & bmACK) ) {
   011F 90 E6 78           1042 	mov	dptr,#_I2CS
   0122 E0                 1043 	movx	a,@dptr
   0123 FB                 1044 	mov	r3,a
   0124 30 E1 03           1045 	jnb	acc.1,00194$
   0127 02s00rA8           1046 	ljmp	00138$
   012A                    1047 00194$:
                           1048 ;	i2c.c:111: I2CS |= bmSTOP;
   012A 90 E6 78           1049 	mov	dptr,#_I2CS
   012D E0                 1050 	movx	a,@dptr
   012E FA                 1051 	mov	r2,a
   012F 44 40              1052 	orl	a,#0x40
   0131 F0                 1053 	movx	@dptr,a
                           1054 ;	i2c.c:112: while ( (I2CS&bmSTOP) && !cancel_i2c_trans);
   0132                    1055 00133$:
   0132 90 E6 78           1056 	mov	dptr,#_I2CS
   0135 E0                 1057 	movx	a,@dptr
   0136 FA                 1058 	mov	r2,a
   0137 30 E6 07           1059 	jnb	acc.6,00135$
   013A 90s00r00           1060 	mov	dptr,#_cancel_i2c_trans
   013D E0                 1061 	movx	a,@dptr
   013E FA                 1062 	mov	r2,a
   013F 60 F1              1063 	jz	00133$
   0141                    1064 00135$:
                           1065 ;	i2c.c:114: return FALSE; 
   0141 75 82 00           1066 	mov	dpl,#0x00
   0144 22                 1067 	ret
   0145                    1068 00140$:
                           1069 ;	i2c.c:121: I2CS |= bmSTOP;
   0145 90 E6 78           1070 	mov	dptr,#_I2CS
   0148 E0                 1071 	movx	a,@dptr
   0149 FA                 1072 	mov	r2,a
   014A 44 40              1073 	orl	a,#0x40
   014C F0                 1074 	movx	@dptr,a
                           1075 ;	i2c.c:122: while ( (I2CS & bmSTOP) && !cancel_i2c_trans);
   014D                    1076 00142$:
   014D 90 E6 78           1077 	mov	dptr,#_I2CS
   0150 E0                 1078 	movx	a,@dptr
   0151 FA                 1079 	mov	r2,a
   0152 30 E6 07           1080 	jnb	acc.6,00144$
   0155 90s00r00           1081 	mov	dptr,#_cancel_i2c_trans
   0158 E0                 1082 	movx	a,@dptr
   0159 FA                 1083 	mov	r2,a
   015A 60 F1              1084 	jz	00142$
   015C                    1085 00144$:
                           1086 ;	i2c.c:123: CHECK_I2C_CANCEL();
   015C 90s00r00           1087 	mov	dptr,#_cancel_i2c_trans
   015F E0                 1088 	movx	a,@dptr
   0160 FA                 1089 	mov	r2,a
   0161 60 04              1090 	jz	00146$
   0163 75 82 00           1091 	mov	dpl,#0x00
                           1092 ;	i2c.c:125: return TRUE;
   0166 22                 1093 	ret
   0167                    1094 00146$:
   0167 75 82 01           1095 	mov	dpl,#0x01
   016A 22                 1096 	ret
                           1097 ;------------------------------------------------------------
                           1098 ;Allocation info for local variables in function 'i2c_read'
                           1099 ;------------------------------------------------------------
                           1100 ;len                       Allocated with name '_i2c_read_PARM_2'
                           1101 ;buf                       Allocated with name '_i2c_read_PARM_3'
                           1102 ;addr                      Allocated to registers r2 
                           1103 ;tmp                       Allocated to registers 
                           1104 ;cur_byte                  Allocated with name '_i2c_read_cur_byte_1_1'
                           1105 ;------------------------------------------------------------
                           1106 ;	i2c.c:166: BOOL i2c_read( BYTE addr, WORD len, BYTE* buf) {
                           1107 ;	-----------------------------------------
                           1108 ;	 function i2c_read
                           1109 ;	-----------------------------------------
   016B                    1110 _i2c_read:
   016B AA 82              1111 	mov	r2,dpl
                           1112 ;	i2c.c:171: cancel_i2c_trans=FALSE;
   016D 90s00r00           1113 	mov	dptr,#_cancel_i2c_trans
   0170 E4                 1114 	clr	a
   0171 F0                 1115 	movx	@dptr,a
                           1116 ;	i2c.c:175: start:
   0172 EA                 1117 	mov	a,r2
   0173 2A                 1118 	add	a,r2
   0174 FA                 1119 	mov	r2,a
   0175 43 02 01           1120 	orl	ar2,#0x01
   0178 74 01              1121 	mov	a,#0x01
   017A B5*0D 08           1122 	cjne	a,_i2c_read_PARM_2,00175$
   017D E4                 1123 	clr	a
   017E B5*0E 04           1124 	cjne	a,(_i2c_read_PARM_2 + 1),00175$
   0181 74 01              1125 	mov	a,#0x01
   0183 80 01              1126 	sjmp	00176$
   0185                    1127 00175$:
   0185 E4                 1128 	clr	a
   0186                    1129 00176$:
   0186 FB                 1130 	mov	r3,a
   0187                    1131 00101$:
                           1132 ;	i2c.c:176: CHECK_I2C_CANCEL();
   0187 90s00r00           1133 	mov	dptr,#_cancel_i2c_trans
   018A E0                 1134 	movx	a,@dptr
   018B FC                 1135 	mov	r4,a
   018C 60 04              1136 	jz	00103$
   018E 75 82 00           1137 	mov	dpl,#0x00
   0191 22                 1138 	ret
   0192                    1139 00103$:
                           1140 ;	i2c.c:177: cur_byte=0;        
   0192 7C 00              1141 	mov	r4,#0x00
   0194 7D 00              1142 	mov	r5,#0x00
                           1143 ;	i2c.c:179: I2CS |= bmSTART;
   0196 90 E6 78           1144 	mov	dptr,#_I2CS
   0199 E0                 1145 	movx	a,@dptr
   019A 44 80              1146 	orl	a,#0x80
   019C F0                 1147 	movx	@dptr,a
                           1148 ;	i2c.c:180: if ( I2CS & bmBERR ) {            
   019D 90 E6 78           1149 	mov	dptr,#_I2CS
   01A0 E0                 1150 	movx	a,@dptr
   01A1 FE                 1151 	mov	r6,a
   01A2 30 E2 10           1152 	jnb	acc.2,00105$
                           1153 ;	i2c.c:182: delay(10); // NOTE way too long
   01A5 90 00 0A           1154 	mov	dptr,#0x000A
   01A8 C0 02              1155 	push	ar2
   01AA C0 03              1156 	push	ar3
   01AC 12s00r00           1157 	lcall	_delay
   01AF D0 03              1158 	pop	ar3
   01B1 D0 02              1159 	pop	ar2
                           1160 ;	i2c.c:183: goto start;
   01B3 80 D2              1161 	sjmp	00101$
   01B5                    1162 00105$:
                           1163 ;	i2c.c:187: I2DAT = (addr << 1) | 1; // last 1 for read
   01B5 90 E6 79           1164 	mov	dptr,#_I2DAT
   01B8 EA                 1165 	mov	a,r2
   01B9 F0                 1166 	movx	@dptr,a
                           1167 ;	i2c.c:191: while ( !(I2CS & bmDONE) && !cancel_i2c_trans ); CHECK_I2C_CANCEL();
   01BA                    1168 00107$:
   01BA 90 E6 78           1169 	mov	dptr,#_I2CS
   01BD E0                 1170 	movx	a,@dptr
   01BE FE                 1171 	mov	r6,a
   01BF 20 E0 07           1172 	jb	acc.0,00109$
   01C2 90s00r00           1173 	mov	dptr,#_cancel_i2c_trans
   01C5 E0                 1174 	movx	a,@dptr
   01C6 FE                 1175 	mov	r6,a
   01C7 60 F1              1176 	jz	00107$
   01C9                    1177 00109$:
   01C9 90s00r00           1178 	mov	dptr,#_cancel_i2c_trans
   01CC E0                 1179 	movx	a,@dptr
   01CD FE                 1180 	mov	r6,a
   01CE 60 04              1181 	jz	00111$
   01D0 75 82 00           1182 	mov	dpl,#0x00
   01D3 22                 1183 	ret
   01D4                    1184 00111$:
                           1185 ;	i2c.c:192: if ( I2CS & bmBERR )
   01D4 90 E6 78           1186 	mov	dptr,#_I2CS
   01D7 E0                 1187 	movx	a,@dptr
   01D8 FE                 1188 	mov	r6,a
   01D9 20 E2 AB           1189 	jb	acc.2,00101$
                           1190 ;	i2c.c:196: if (!(I2CS&bmACK) ) {
   01DC 90 E6 78           1191 	mov	dptr,#_I2CS
   01DF E0                 1192 	movx	a,@dptr
   01E0 FE                 1193 	mov	r6,a
   01E1 20 E1 1B           1194 	jb	acc.1,00119$
                           1195 ;	i2c.c:197: I2CS |= bmSTOP;
   01E4 90 E6 78           1196 	mov	dptr,#_I2CS
   01E7 E0                 1197 	movx	a,@dptr
   01E8 FE                 1198 	mov	r6,a
   01E9 44 40              1199 	orl	a,#0x40
   01EB F0                 1200 	movx	@dptr,a
                           1201 ;	i2c.c:198: while ( (I2CS&bmSTOP) && !cancel_i2c_trans );
   01EC                    1202 00115$:
   01EC 90 E6 78           1203 	mov	dptr,#_I2CS
   01EF E0                 1204 	movx	a,@dptr
   01F0 FE                 1205 	mov	r6,a
   01F1 30 E6 07           1206 	jnb	acc.6,00117$
   01F4 90s00r00           1207 	mov	dptr,#_cancel_i2c_trans
   01F7 E0                 1208 	movx	a,@dptr
   01F8 FE                 1209 	mov	r6,a
   01F9 60 F1              1210 	jz	00115$
   01FB                    1211 00117$:
                           1212 ;	i2c.c:199: return FALSE; 
   01FB 75 82 00           1213 	mov	dpl,#0x00
   01FE 22                 1214 	ret
   01FF                    1215 00119$:
                           1216 ;	i2c.c:204: if ( len==1 ) I2CS |= bmLASTRD; 
   01FF EB                 1217 	mov	a,r3
   0200 60 08              1218 	jz	00121$
   0202 90 E6 78           1219 	mov	dptr,#_I2CS
   0205 E0                 1220 	movx	a,@dptr
   0206 FE                 1221 	mov	r6,a
   0207 44 20              1222 	orl	a,#0x20
   0209 F0                 1223 	movx	@dptr,a
   020A                    1224 00121$:
                           1225 ;	i2c.c:208: tmp = I2DAT; // discard read
   020A 90 E6 79           1226 	mov	dptr,#_I2DAT
   020D E0                 1227 	movx	a,@dptr
                           1228 ;	i2c.c:210: while (len>cur_byte+1) { // reserve last byte read for after the loop
   020E E4                 1229 	clr	a
   020F F5*12              1230 	mov	_i2c_read_cur_byte_1_1,a
   0211 F5*13              1231 	mov	(_i2c_read_cur_byte_1_1 + 1),a
   0213                    1232 00132$:
   0213 74 01              1233 	mov	a,#0x01
   0215 25*12              1234 	add	a,_i2c_read_cur_byte_1_1
   0217 F8                 1235 	mov	r0,a
   0218 E4                 1236 	clr	a
   0219 35*13              1237 	addc	a,(_i2c_read_cur_byte_1_1 + 1)
   021B F9                 1238 	mov	r1,a
   021C C3                 1239 	clr	c
   021D E8                 1240 	mov	a,r0
   021E 95*0D              1241 	subb	a,_i2c_read_PARM_2
   0220 E9                 1242 	mov	a,r1
   0221 95*0E              1243 	subb	a,(_i2c_read_PARM_2 + 1)
   0223 50 69              1244 	jnc	00136$
                           1245 ;	i2c.c:214: while (!(I2CS&bmDONE) && !cancel_i2c_trans); CHECK_I2C_CANCEL(); 
   0225                    1246 00123$:
   0225 90 E6 78           1247 	mov	dptr,#_I2CS
   0228 E0                 1248 	movx	a,@dptr
   0229 F8                 1249 	mov	r0,a
   022A 20 E0 07           1250 	jb	acc.0,00125$
   022D 90s00r00           1251 	mov	dptr,#_cancel_i2c_trans
   0230 E0                 1252 	movx	a,@dptr
   0231 F8                 1253 	mov	r0,a
   0232 60 F1              1254 	jz	00123$
   0234                    1255 00125$:
   0234 90s00r00           1256 	mov	dptr,#_cancel_i2c_trans
   0237 E0                 1257 	movx	a,@dptr
   0238 F8                 1258 	mov	r0,a
   0239 60 04              1259 	jz	00127$
   023B 75 82 00           1260 	mov	dpl,#0x00
   023E 22                 1261 	ret
   023F                    1262 00127$:
                           1263 ;	i2c.c:215: if ( I2CS&bmBERR ) goto start;
   023F 90 E6 78           1264 	mov	dptr,#_I2CS
   0242 E0                 1265 	movx	a,@dptr
   0243 F8                 1266 	mov	r0,a
   0244 30 E2 03           1267 	jnb	acc.2,00191$
   0247 02s01r87           1268 	ljmp	00101$
   024A                    1269 00191$:
                           1270 ;	i2c.c:218: if (len==cur_byte+2) // 2nd to last byte
   024A 74 02              1271 	mov	a,#0x02
   024C 25*12              1272 	add	a,_i2c_read_cur_byte_1_1
   024E F8                 1273 	mov	r0,a
   024F E4                 1274 	clr	a
   0250 35*13              1275 	addc	a,(_i2c_read_cur_byte_1_1 + 1)
   0252 F9                 1276 	mov	r1,a
   0253 E8                 1277 	mov	a,r0
   0254 B5*0D 0C           1278 	cjne	a,_i2c_read_PARM_2,00131$
   0257 E9                 1279 	mov	a,r1
   0258 B5*0E 08           1280 	cjne	a,(_i2c_read_PARM_2 + 1),00131$
                           1281 ;	i2c.c:219: I2CS |= bmLASTRD;
   025B 90 E6 78           1282 	mov	dptr,#_I2CS
   025E E0                 1283 	movx	a,@dptr
   025F F8                 1284 	mov	r0,a
   0260 44 20              1285 	orl	a,#0x20
   0262 F0                 1286 	movx	@dptr,a
   0263                    1287 00131$:
                           1288 ;	i2c.c:224: buf[cur_byte++] = I2DAT;
   0263 A8*12              1289 	mov	r0,_i2c_read_cur_byte_1_1
   0265 A9*13              1290 	mov	r1,(_i2c_read_cur_byte_1_1 + 1)
   0267 05*12              1291 	inc	_i2c_read_cur_byte_1_1
   0269 E4                 1292 	clr	a
   026A B5*12 02           1293 	cjne	a,_i2c_read_cur_byte_1_1,00194$
   026D 05*13              1294 	inc	(_i2c_read_cur_byte_1_1 + 1)
   026F                    1295 00194$:
   026F AC*12              1296 	mov	r4,_i2c_read_cur_byte_1_1
   0271 AD*13              1297 	mov	r5,(_i2c_read_cur_byte_1_1 + 1)
   0273 E8                 1298 	mov	a,r0
   0274 25*0F              1299 	add	a,_i2c_read_PARM_3
   0276 F8                 1300 	mov	r0,a
   0277 E9                 1301 	mov	a,r1
   0278 35*10              1302 	addc	a,(_i2c_read_PARM_3 + 1)
   027A F9                 1303 	mov	r1,a
   027B AE*11              1304 	mov	r6,(_i2c_read_PARM_3 + 2)
   027D 90 E6 79           1305 	mov	dptr,#_I2DAT
   0280 E0                 1306 	movx	a,@dptr
   0281 FF                 1307 	mov	r7,a
   0282 88 82              1308 	mov	dpl,r0
   0284 89 83              1309 	mov	dph,r1
   0286 8E F0              1310 	mov	b,r6
   0288 12s00r00           1311 	lcall	__gptrput
   028B 02s02r13           1312 	ljmp	00132$
                           1313 ;	i2c.c:230: while (!(I2CS&bmDONE) && !cancel_i2c_trans); CHECK_I2C_CANCEL();
   028E                    1314 00136$:
   028E 90 E6 78           1315 	mov	dptr,#_I2CS
   0291 E0                 1316 	movx	a,@dptr
   0292 FE                 1317 	mov	r6,a
   0293 20 E0 07           1318 	jb	acc.0,00138$
   0296 90s00r00           1319 	mov	dptr,#_cancel_i2c_trans
   0299 E0                 1320 	movx	a,@dptr
   029A FE                 1321 	mov	r6,a
   029B 60 F1              1322 	jz	00136$
   029D                    1323 00138$:
   029D 90s00r00           1324 	mov	dptr,#_cancel_i2c_trans
   02A0 E0                 1325 	movx	a,@dptr
   02A1 FE                 1326 	mov	r6,a
   02A2 60 04              1327 	jz	00140$
   02A4 75 82 00           1328 	mov	dpl,#0x00
   02A7 22                 1329 	ret
   02A8                    1330 00140$:
                           1331 ;	i2c.c:231: if ( I2CS&bmBERR ) goto start;
   02A8 90 E6 78           1332 	mov	dptr,#_I2CS
   02AB E0                 1333 	movx	a,@dptr
   02AC FE                 1334 	mov	r6,a
   02AD 30 E2 03           1335 	jnb	acc.2,00198$
   02B0 02s01r87           1336 	ljmp	00101$
   02B3                    1337 00198$:
                           1338 ;	i2c.c:233: I2CS |= bmSTOP;
   02B3 90 E6 78           1339 	mov	dptr,#_I2CS
   02B6 E0                 1340 	movx	a,@dptr
   02B7 44 40              1341 	orl	a,#0x40
   02B9 F0                 1342 	movx	@dptr,a
                           1343 ;	i2c.c:237: buf[cur_byte] = I2DAT; // use instead of buffer addressing so next instruction reads I2DAT
   02BA EC                 1344 	mov	a,r4
   02BB 25*0F              1345 	add	a,_i2c_read_PARM_3
   02BD FC                 1346 	mov	r4,a
   02BE ED                 1347 	mov	a,r5
   02BF 35*10              1348 	addc	a,(_i2c_read_PARM_3 + 1)
   02C1 FD                 1349 	mov	r5,a
   02C2 AA*11              1350 	mov	r2,(_i2c_read_PARM_3 + 2)
   02C4 90 E6 79           1351 	mov	dptr,#_I2DAT
   02C7 E0                 1352 	movx	a,@dptr
   02C8 FB                 1353 	mov	r3,a
   02C9 8C 82              1354 	mov	dpl,r4
   02CB 8D 83              1355 	mov	dph,r5
   02CD 8A F0              1356 	mov	b,r2
   02CF 12s00r00           1357 	lcall	__gptrput
                           1358 ;	i2c.c:239: while ( (I2CS&bmSTOP) && !cancel_i2c_trans); CHECK_I2C_CANCEL();
   02D2                    1359 00144$:
   02D2 90 E6 78           1360 	mov	dptr,#_I2CS
   02D5 E0                 1361 	movx	a,@dptr
   02D6 FA                 1362 	mov	r2,a
   02D7 30 E6 07           1363 	jnb	acc.6,00146$
   02DA 90s00r00           1364 	mov	dptr,#_cancel_i2c_trans
   02DD E0                 1365 	movx	a,@dptr
   02DE FA                 1366 	mov	r2,a
   02DF 60 F1              1367 	jz	00144$
   02E1                    1368 00146$:
   02E1 90s00r00           1369 	mov	dptr,#_cancel_i2c_trans
   02E4 E0                 1370 	movx	a,@dptr
   02E5 FA                 1371 	mov	r2,a
   02E6 60 04              1372 	jz	00148$
   02E8 75 82 00           1373 	mov	dpl,#0x00
                           1374 ;	i2c.c:241: return TRUE;
   02EB 22                 1375 	ret
   02EC                    1376 00148$:
   02EC 75 82 01           1377 	mov	dpl,#0x01
   02EF 22                 1378 	ret
                           1379 ;------------------------------------------------------------
                           1380 ;Allocation info for local variables in function 'eeprom_write'
                           1381 ;------------------------------------------------------------
                           1382 ;addr                      Allocated with name '_eeprom_write_PARM_2'
                           1383 ;length                    Allocated with name '_eeprom_write_PARM_3'
                           1384 ;buf                       Allocated with name '_eeprom_write_PARM_4'
                           1385 ;prom_addr                 Allocated to registers 
                           1386 ;------------------------------------------------------------
                           1387 ;	i2c.c:246: BOOL eeprom_write(BYTE prom_addr, WORD addr, WORD length, BYTE* buf) {
                           1388 ;	-----------------------------------------
                           1389 ;	 function eeprom_write
                           1390 ;	-----------------------------------------
   02F0                    1391 _eeprom_write:
                           1392 ;	i2c.c:274: return TRUE;
   02F0 75 82 01           1393 	mov	dpl,#0x01
   02F3 22                 1394 	ret
                           1395 ;------------------------------------------------------------
                           1396 ;Allocation info for local variables in function 'eeprom_read'
                           1397 ;------------------------------------------------------------
                           1398 ;addr                      Allocated with name '_eeprom_read_PARM_2'
                           1399 ;length                    Allocated with name '_eeprom_read_PARM_3'
                           1400 ;buf                       Allocated with name '_eeprom_read_PARM_4'
                           1401 ;prom_addr                 Allocated to registers r2 
                           1402 ;eeprom_addr               Allocated with name '_eeprom_read_eeprom_addr_1_1'
                           1403 ;addr_len                  Allocated to registers r3 
                           1404 ;------------------------------------------------------------
                           1405 ;	i2c.c:279: BOOL eeprom_read (BYTE prom_addr, WORD addr, WORD length, BYTE *buf)
                           1406 ;	-----------------------------------------
                           1407 ;	 function eeprom_read
                           1408 ;	-----------------------------------------
   02F4                    1409 _eeprom_read:
   02F4 AA 82              1410 	mov	r2,dpl
                           1411 ;	i2c.c:283: BYTE addr_len=0;
   02F6 7B 00              1412 	mov	r3,#0x00
                           1413 ;	i2c.c:284: if (EEPROM_TWO_BYTE) 
   02F8 90 E6 78           1414 	mov	dptr,#_I2CS
   02FB E0                 1415 	movx	a,@dptr
   02FC FC                 1416 	mov	r4,a
   02FD 30 E4 06           1417 	jnb	acc.4,00102$
                           1418 ;	i2c.c:285: eeprom_addr[addr_len++] = MSB(addr);
   0300 7B 01              1419 	mov	r3,#0x01
   0302 AC*15              1420 	mov	r4,(_eeprom_read_PARM_2 + 1)
   0304 8C*1B              1421 	mov	_eeprom_read_eeprom_addr_1_1,r4
   0306                    1422 00102$:
                           1423 ;	i2c.c:287: eeprom_addr[addr_len++] = LSB(addr);
   0306 8B 04              1424 	mov	ar4,r3
   0308 0B                 1425 	inc	r3
   0309 EC                 1426 	mov	a,r4
   030A 24r1B              1427 	add	a,#_eeprom_read_eeprom_addr_1_1
   030C F8                 1428 	mov	r0,a
   030D AC*14              1429 	mov	r4,_eeprom_read_PARM_2
   030F A6 04              1430 	mov	@r0,ar4
                           1431 ;	i2c.c:291: if ( !i2c_write( prom_addr, addr_len, eeprom_addr, 0, NULL ) ) return FALSE;
   0311 8B*00              1432 	mov	_i2c_write_PARM_2,r3
   0313 75*01 00           1433 	mov	(_i2c_write_PARM_2 + 1),#0x00
   0316 75*02r1B           1434 	mov	_i2c_write_PARM_3,#_eeprom_read_eeprom_addr_1_1
   0319 75*03 00           1435 	mov	(_i2c_write_PARM_3 + 1),#0x00
   031C 75*04 40           1436 	mov	(_i2c_write_PARM_3 + 2),#0x40
   031F E4                 1437 	clr	a
   0320 F5*05              1438 	mov	_i2c_write_PARM_4,a
   0322 F5*06              1439 	mov	(_i2c_write_PARM_4 + 1),a
   0324 F5*07              1440 	mov	_i2c_write_PARM_5,a
   0326 F5*08              1441 	mov	(_i2c_write_PARM_5 + 1),a
   0328 F5*09              1442 	mov	(_i2c_write_PARM_5 + 2),a
   032A 8A 82              1443 	mov	dpl,r2
   032C C0 02              1444 	push	ar2
   032E 12s00r00           1445 	lcall	_i2c_write
   0331 E5 82              1446 	mov	a,dpl
   0333 D0 02              1447 	pop	ar2
   0335 70 03              1448 	jnz	00104$
   0337 F5 82              1449 	mov	dpl,a
   0339 22                 1450 	ret
   033A                    1451 00104$:
                           1452 ;	i2c.c:293: if ( !i2c_read ( prom_addr, length, buf ) ) return FALSE;
   033A 85*16*0D           1453 	mov	_i2c_read_PARM_2,_eeprom_read_PARM_3
   033D 85*17*0E           1454 	mov	(_i2c_read_PARM_2 + 1),(_eeprom_read_PARM_3 + 1)
   0340 85*18*0F           1455 	mov	_i2c_read_PARM_3,_eeprom_read_PARM_4
   0343 85*19*10           1456 	mov	(_i2c_read_PARM_3 + 1),(_eeprom_read_PARM_4 + 1)
   0346 85*1A*11           1457 	mov	(_i2c_read_PARM_3 + 2),(_eeprom_read_PARM_4 + 2)
   0349 8A 82              1458 	mov	dpl,r2
   034B 12s01r6B           1459 	lcall	_i2c_read
   034E E5 82              1460 	mov	a,dpl
   0350 70 03              1461 	jnz	00106$
   0352 F5 82              1462 	mov	dpl,a
                           1463 ;	i2c.c:295: return TRUE;
   0354 22                 1464 	ret
   0355                    1465 00106$:
   0355 75 82 01           1466 	mov	dpl,#0x01
   0358 22                 1467 	ret
                           1468 	.area CSEG    (CODE)
                           1469 	.area CONST   (CODE)
                           1470 	.area XINIT   (CODE)
                           1471 	.area CABS    (ABS,CODE)
