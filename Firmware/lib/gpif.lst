                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Thu Feb 28 13:14:42 2013
                              5 ;--------------------------------------------------------
                              6 	.module gpif
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _gpif_single_write16_PARM_2
                             13 	.globl _gpif_single_read16_PARM_2
                             14 	.globl _gpif_setflowstate_PARM_2
                             15 	.globl _gpif_init_PARM_2
                             16 	.globl _EIPX6
                             17 	.globl _EIPX5
                             18 	.globl _EIPX4
                             19 	.globl _PI2C
                             20 	.globl _PUSB
                             21 	.globl _EIEX6
                             22 	.globl _EIEX5
                             23 	.globl _EIEX4
                             24 	.globl _EI2C
                             25 	.globl _EUSB
                             26 	.globl _SMOD1
                             27 	.globl _ERESI
                             28 	.globl _RESI
                             29 	.globl _INT6
                             30 	.globl _CY
                             31 	.globl _AC
                             32 	.globl _F0
                             33 	.globl _RS1
                             34 	.globl _RS0
                             35 	.globl _OV
                             36 	.globl _FL
                             37 	.globl _P
                             38 	.globl _TF2
                             39 	.globl _EXF2
                             40 	.globl _RCLK
                             41 	.globl _TCLK
                             42 	.globl _EXEN2
                             43 	.globl _TR2
                             44 	.globl _C_T2
                             45 	.globl _CP_RL2
                             46 	.globl _SM01
                             47 	.globl _SM11
                             48 	.globl _SM21
                             49 	.globl _REN1
                             50 	.globl _TB81
                             51 	.globl _RB81
                             52 	.globl _TI1
                             53 	.globl _RI1
                             54 	.globl _PS1
                             55 	.globl _PT2
                             56 	.globl _PS0
                             57 	.globl _PT1
                             58 	.globl _PX1
                             59 	.globl _PT0
                             60 	.globl _PX0
                             61 	.globl _PD7
                             62 	.globl _PD6
                             63 	.globl _PD5
                             64 	.globl _PD4
                             65 	.globl _PD3
                             66 	.globl _PD2
                             67 	.globl _PD1
                             68 	.globl _PD0
                             69 	.globl _EA
                             70 	.globl _ES1
                             71 	.globl _ET2
                             72 	.globl _ES0
                             73 	.globl _ET1
                             74 	.globl _EX1
                             75 	.globl _ET0
                             76 	.globl _EX0
                             77 	.globl _PC7
                             78 	.globl _PC6
                             79 	.globl _PC5
                             80 	.globl _PC4
                             81 	.globl _PC3
                             82 	.globl _PC2
                             83 	.globl _PC1
                             84 	.globl _PC0
                             85 	.globl _SM0
                             86 	.globl _SM1
                             87 	.globl _SM2
                             88 	.globl _REN
                             89 	.globl _TB8
                             90 	.globl _RB8
                             91 	.globl _TI
                             92 	.globl _RI
                             93 	.globl _PB7
                             94 	.globl _PB6
                             95 	.globl _PB5
                             96 	.globl _PB4
                             97 	.globl _PB3
                             98 	.globl _PB2
                             99 	.globl _PB1
                            100 	.globl _PB0
                            101 	.globl _TF1
                            102 	.globl _TR1
                            103 	.globl _TF0
                            104 	.globl _TR0
                            105 	.globl _IE1
                            106 	.globl _IT1
                            107 	.globl _IE0
                            108 	.globl _IT0
                            109 	.globl _PA7
                            110 	.globl _PA6
                            111 	.globl _PA5
                            112 	.globl _PA4
                            113 	.globl _PA3
                            114 	.globl _PA2
                            115 	.globl _PA1
                            116 	.globl _PA0
                            117 	.globl _EIP
                            118 	.globl _B
                            119 	.globl _EIE
                            120 	.globl _ACC
                            121 	.globl _EICON
                            122 	.globl _PSW
                            123 	.globl _TH2
                            124 	.globl _TL2
                            125 	.globl _RCAP2H
                            126 	.globl _RCAP2L
                            127 	.globl _T2CON
                            128 	.globl _SBUF1
                            129 	.globl _SCON1
                            130 	.globl _GPIFSGLDATLNOX
                            131 	.globl _GPIFSGLDATLX
                            132 	.globl _GPIFSGLDATH
                            133 	.globl _GPIFTRIG
                            134 	.globl _EP01STAT
                            135 	.globl _IP
                            136 	.globl _OEE
                            137 	.globl _OED
                            138 	.globl _OEC
                            139 	.globl _OEB
                            140 	.globl _OEA
                            141 	.globl _IOE
                            142 	.globl _IOD
                            143 	.globl _AUTOPTRSETUP
                            144 	.globl _EP68FIFOFLGS
                            145 	.globl _EP24FIFOFLGS
                            146 	.globl _EP2468STAT
                            147 	.globl _IE
                            148 	.globl _INT4CLR
                            149 	.globl _INT2CLR
                            150 	.globl _IOC
                            151 	.globl _AUTOPTRL2
                            152 	.globl _AUTOPTRH2
                            153 	.globl _AUTOPTRL1
                            154 	.globl _AUTOPTRH1
                            155 	.globl _SBUF0
                            156 	.globl _SCON0
                            157 	.globl __XPAGE
                            158 	.globl _EXIF
                            159 	.globl _IOB
                            160 	.globl _CKCON
                            161 	.globl _TH1
                            162 	.globl _TH0
                            163 	.globl _TL1
                            164 	.globl _TL0
                            165 	.globl _TMOD
                            166 	.globl _TCON
                            167 	.globl _PCON
                            168 	.globl _DPS
                            169 	.globl _DPH1
                            170 	.globl _DPL1
                            171 	.globl _DPH
                            172 	.globl _DPL
                            173 	.globl _SP
                            174 	.globl _IOA
                            175 	.globl _GPCR2
                            176 	.globl _ECC2B2
                            177 	.globl _ECC2B1
                            178 	.globl _ECC2B0
                            179 	.globl _ECC1B2
                            180 	.globl _ECC1B1
                            181 	.globl _ECC1B0
                            182 	.globl _ECCRESET
                            183 	.globl _ECCCFG
                            184 	.globl _EP8FIFOBUF
                            185 	.globl _EP6FIFOBUF
                            186 	.globl _EP4FIFOBUF
                            187 	.globl _EP2FIFOBUF
                            188 	.globl _EP1INBUF
                            189 	.globl _EP1OUTBUF
                            190 	.globl _EP0BUF
                            191 	.globl _UDMACRCQUAL
                            192 	.globl _UDMACRCL
                            193 	.globl _UDMACRCH
                            194 	.globl _GPIFHOLDAMOUNT
                            195 	.globl _FLOWSTBHPERIOD
                            196 	.globl _FLOWSTBEDGE
                            197 	.globl _FLOWSTB
                            198 	.globl _FLOWHOLDOFF
                            199 	.globl _FLOWEQ1CTL
                            200 	.globl _FLOWEQ0CTL
                            201 	.globl _FLOWLOGIC
                            202 	.globl _FLOWSTATE
                            203 	.globl _GPIFABORT
                            204 	.globl _GPIFREADYSTAT
                            205 	.globl _GPIFREADYCFG
                            206 	.globl _XGPIFSGLDATLNOX
                            207 	.globl _XGPIFSGLDATLX
                            208 	.globl _XGPIFSGLDATH
                            209 	.globl _EP8GPIFTRIG
                            210 	.globl _EP8GPIFPFSTOP
                            211 	.globl _EP8GPIFFLGSEL
                            212 	.globl _EP6GPIFTRIG
                            213 	.globl _EP6GPIFPFSTOP
                            214 	.globl _EP6GPIFFLGSEL
                            215 	.globl _EP4GPIFTRIG
                            216 	.globl _EP4GPIFPFSTOP
                            217 	.globl _EP4GPIFFLGSEL
                            218 	.globl _EP2GPIFTRIG
                            219 	.globl _EP2GPIFPFSTOP
                            220 	.globl _EP2GPIFFLGSEL
                            221 	.globl _GPIFTCB0
                            222 	.globl _GPIFTCB1
                            223 	.globl _GPIFTCB2
                            224 	.globl _GPIFTCB3
                            225 	.globl _GPIFADRL
                            226 	.globl _GPIFADRH
                            227 	.globl _GPIFCTLCFG
                            228 	.globl _GPIFIDLECTL
                            229 	.globl _GPIFIDLECS
                            230 	.globl _GPIFWFSELECT
                            231 	.globl _SETUPDAT
                            232 	.globl _SUDPTRCTL
                            233 	.globl _SUDPTRL
                            234 	.globl _SUDPTRH
                            235 	.globl _EP8FIFOBCL
                            236 	.globl _EP8FIFOBCH
                            237 	.globl _EP6FIFOBCL
                            238 	.globl _EP6FIFOBCH
                            239 	.globl _EP4FIFOBCL
                            240 	.globl _EP4FIFOBCH
                            241 	.globl _EP2FIFOBCL
                            242 	.globl _EP2FIFOBCH
                            243 	.globl _EP8FIFOFLGS
                            244 	.globl _EP6FIFOFLGS
                            245 	.globl _EP4FIFOFLGS
                            246 	.globl _EP2FIFOFLGS
                            247 	.globl _EP8CS
                            248 	.globl _EP6CS
                            249 	.globl _EP4CS
                            250 	.globl _EP2CS
                            251 	.globl _EP1INCS
                            252 	.globl _EP1OUTCS
                            253 	.globl _EP0CS
                            254 	.globl _EP8BCL
                            255 	.globl _EP8BCH
                            256 	.globl _EP6BCL
                            257 	.globl _EP6BCH
                            258 	.globl _EP4BCL
                            259 	.globl _EP4BCH
                            260 	.globl _EP2BCL
                            261 	.globl _EP2BCH
                            262 	.globl _EP1INBC
                            263 	.globl _EP1OUTBC
                            264 	.globl _EP0BCL
                            265 	.globl _EP0BCH
                            266 	.globl _FNADDR
                            267 	.globl _MICROFRAME
                            268 	.globl _USBFRAMEL
                            269 	.globl _USBFRAMEH
                            270 	.globl _TOGCTL
                            271 	.globl _WAKEUPCS
                            272 	.globl _SUSPEND
                            273 	.globl _USBCS
                            274 	.globl _XAUTODAT2
                            275 	.globl _XAUTODAT1
                            276 	.globl _I2CTL
                            277 	.globl _I2DAT
                            278 	.globl _I2CS
                            279 	.globl _PORTECFG
                            280 	.globl _PORTCCFG
                            281 	.globl _PORTACFG
                            282 	.globl _INTSETUP
                            283 	.globl _INT4IVEC
                            284 	.globl _INT2IVEC
                            285 	.globl _CLRERRCNT
                            286 	.globl _ERRCNTLIM
                            287 	.globl _USBERRIRQ
                            288 	.globl _USBERRIE
                            289 	.globl _GPIFIRQ
                            290 	.globl _GPIFIE
                            291 	.globl _EPIRQ
                            292 	.globl _EPIE
                            293 	.globl _USBIRQ
                            294 	.globl _USBIE
                            295 	.globl _NAKIRQ
                            296 	.globl _NAKIE
                            297 	.globl _IBNIRQ
                            298 	.globl _IBNIE
                            299 	.globl _EP8FIFOIRQ
                            300 	.globl _EP8FIFOIE
                            301 	.globl _EP6FIFOIRQ
                            302 	.globl _EP6FIFOIE
                            303 	.globl _EP4FIFOIRQ
                            304 	.globl _EP4FIFOIE
                            305 	.globl _EP2FIFOIRQ
                            306 	.globl _EP2FIFOIE
                            307 	.globl _OUTPKTEND
                            308 	.globl _INPKTEND
                            309 	.globl _EP8ISOINPKTS
                            310 	.globl _EP6ISOINPKTS
                            311 	.globl _EP4ISOINPKTS
                            312 	.globl _EP2ISOINPKTS
                            313 	.globl _EP8FIFOPFL
                            314 	.globl _EP8FIFOPFH
                            315 	.globl _EP6FIFOPFL
                            316 	.globl _EP6FIFOPFH
                            317 	.globl _EP4FIFOPFL
                            318 	.globl _EP4FIFOPFH
                            319 	.globl _EP2FIFOPFL
                            320 	.globl _EP2FIFOPFH
                            321 	.globl _EP8AUTOINLENL
                            322 	.globl _EP8AUTOINLENH
                            323 	.globl _EP6AUTOINLENL
                            324 	.globl _EP6AUTOINLENH
                            325 	.globl _EP4AUTOINLENL
                            326 	.globl _EP4AUTOINLENH
                            327 	.globl _EP2AUTOINLENL
                            328 	.globl _EP2AUTOINLENH
                            329 	.globl _EP8FIFOCFG
                            330 	.globl _EP6FIFOCFG
                            331 	.globl _EP4FIFOCFG
                            332 	.globl _EP2FIFOCFG
                            333 	.globl _EP8CFG
                            334 	.globl _EP6CFG
                            335 	.globl _EP4CFG
                            336 	.globl _EP2CFG
                            337 	.globl _EP1INCFG
                            338 	.globl _EP1OUTCFG
                            339 	.globl _REVCTL
                            340 	.globl _REVID
                            341 	.globl _FIFOPINPOLAR
                            342 	.globl _UART230
                            343 	.globl _BPADDRL
                            344 	.globl _BPADDRH
                            345 	.globl _BREAKPT
                            346 	.globl _FIFORESET
                            347 	.globl _PINFLAGSCD
                            348 	.globl _PINFLAGSAB
                            349 	.globl _IFCONFIG
                            350 	.globl _CPUCS
                            351 	.globl _RES_WAVEDATA_END
                            352 	.globl _GPIF_WAVE_DATA
                            353 	.globl _gpif_init
                            354 	.globl _gpif_setflowstate
                            355 	.globl _gpif_set_tc32
                            356 	.globl _gpif_set_tc16
                            357 	.globl _gpif_single_read16
                            358 	.globl _gpif_single_write16
                            359 	.globl _gpif_fifo_read
                            360 	.globl _gpif_fifo_write
                            361 ;--------------------------------------------------------
                            362 ; special function registers
                            363 ;--------------------------------------------------------
                            364 	.area RSEG    (DATA)
                    0080    365 _IOA	=	0x0080
                    0081    366 _SP	=	0x0081
                    0082    367 _DPL	=	0x0082
                    0083    368 _DPH	=	0x0083
                    0084    369 _DPL1	=	0x0084
                    0085    370 _DPH1	=	0x0085
                    0086    371 _DPS	=	0x0086
                    0087    372 _PCON	=	0x0087
                    0088    373 _TCON	=	0x0088
                    0089    374 _TMOD	=	0x0089
                    008A    375 _TL0	=	0x008a
                    008B    376 _TL1	=	0x008b
                    008C    377 _TH0	=	0x008c
                    008D    378 _TH1	=	0x008d
                    008E    379 _CKCON	=	0x008e
                    0090    380 _IOB	=	0x0090
                    0091    381 _EXIF	=	0x0091
                    0092    382 __XPAGE	=	0x0092
                    0098    383 _SCON0	=	0x0098
                    0099    384 _SBUF0	=	0x0099
                    009A    385 _AUTOPTRH1	=	0x009a
                    009B    386 _AUTOPTRL1	=	0x009b
                    009D    387 _AUTOPTRH2	=	0x009d
                    009E    388 _AUTOPTRL2	=	0x009e
                    00A0    389 _IOC	=	0x00a0
                    00A1    390 _INT2CLR	=	0x00a1
                    00A2    391 _INT4CLR	=	0x00a2
                    00A8    392 _IE	=	0x00a8
                    00AA    393 _EP2468STAT	=	0x00aa
                    00AB    394 _EP24FIFOFLGS	=	0x00ab
                    00AC    395 _EP68FIFOFLGS	=	0x00ac
                    00AF    396 _AUTOPTRSETUP	=	0x00af
                    00B0    397 _IOD	=	0x00b0
                    00B1    398 _IOE	=	0x00b1
                    00B2    399 _OEA	=	0x00b2
                    00B3    400 _OEB	=	0x00b3
                    00B4    401 _OEC	=	0x00b4
                    00B5    402 _OED	=	0x00b5
                    00B6    403 _OEE	=	0x00b6
                    00B8    404 _IP	=	0x00b8
                    00BA    405 _EP01STAT	=	0x00ba
                    00BB    406 _GPIFTRIG	=	0x00bb
                    00BD    407 _GPIFSGLDATH	=	0x00bd
                    00BE    408 _GPIFSGLDATLX	=	0x00be
                    00BF    409 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    410 _SCON1	=	0x00c0
                    00C1    411 _SBUF1	=	0x00c1
                    00C8    412 _T2CON	=	0x00c8
                    00CA    413 _RCAP2L	=	0x00ca
                    00CB    414 _RCAP2H	=	0x00cb
                    00CC    415 _TL2	=	0x00cc
                    00CD    416 _TH2	=	0x00cd
                    00D0    417 _PSW	=	0x00d0
                    00D8    418 _EICON	=	0x00d8
                    00E0    419 _ACC	=	0x00e0
                    00E8    420 _EIE	=	0x00e8
                    00F0    421 _B	=	0x00f0
                    00F8    422 _EIP	=	0x00f8
                            423 ;--------------------------------------------------------
                            424 ; special function bits
                            425 ;--------------------------------------------------------
                            426 	.area RSEG    (DATA)
                    0080    427 _PA0	=	0x0080
                    0081    428 _PA1	=	0x0081
                    0082    429 _PA2	=	0x0082
                    0083    430 _PA3	=	0x0083
                    0084    431 _PA4	=	0x0084
                    0085    432 _PA5	=	0x0085
                    0086    433 _PA6	=	0x0086
                    0087    434 _PA7	=	0x0087
                    0088    435 _IT0	=	0x0088
                    0089    436 _IE0	=	0x0089
                    008A    437 _IT1	=	0x008a
                    008B    438 _IE1	=	0x008b
                    008C    439 _TR0	=	0x008c
                    008D    440 _TF0	=	0x008d
                    008E    441 _TR1	=	0x008e
                    008F    442 _TF1	=	0x008f
                    0090    443 _PB0	=	0x0090
                    0091    444 _PB1	=	0x0091
                    0092    445 _PB2	=	0x0092
                    0093    446 _PB3	=	0x0093
                    0094    447 _PB4	=	0x0094
                    0095    448 _PB5	=	0x0095
                    0096    449 _PB6	=	0x0096
                    0097    450 _PB7	=	0x0097
                    0098    451 _RI	=	0x0098
                    0099    452 _TI	=	0x0099
                    009A    453 _RB8	=	0x009a
                    009B    454 _TB8	=	0x009b
                    009C    455 _REN	=	0x009c
                    009D    456 _SM2	=	0x009d
                    009E    457 _SM1	=	0x009e
                    009F    458 _SM0	=	0x009f
                    00A0    459 _PC0	=	0x00a0
                    00A1    460 _PC1	=	0x00a1
                    00A2    461 _PC2	=	0x00a2
                    00A3    462 _PC3	=	0x00a3
                    00A4    463 _PC4	=	0x00a4
                    00A5    464 _PC5	=	0x00a5
                    00A6    465 _PC6	=	0x00a6
                    00A7    466 _PC7	=	0x00a7
                    00A8    467 _EX0	=	0x00a8
                    00A9    468 _ET0	=	0x00a9
                    00AA    469 _EX1	=	0x00aa
                    00AB    470 _ET1	=	0x00ab
                    00AC    471 _ES0	=	0x00ac
                    00AD    472 _ET2	=	0x00ad
                    00AE    473 _ES1	=	0x00ae
                    00AF    474 _EA	=	0x00af
                    00B0    475 _PD0	=	0x00b0
                    00B1    476 _PD1	=	0x00b1
                    00B2    477 _PD2	=	0x00b2
                    00B3    478 _PD3	=	0x00b3
                    00B4    479 _PD4	=	0x00b4
                    00B5    480 _PD5	=	0x00b5
                    00B6    481 _PD6	=	0x00b6
                    00B7    482 _PD7	=	0x00b7
                    00B8    483 _PX0	=	0x00b8
                    00B9    484 _PT0	=	0x00b9
                    00BA    485 _PX1	=	0x00ba
                    00BB    486 _PT1	=	0x00bb
                    00BC    487 _PS0	=	0x00bc
                    00BD    488 _PT2	=	0x00bd
                    00BE    489 _PS1	=	0x00be
                    00C0    490 _RI1	=	0x00c0
                    00C1    491 _TI1	=	0x00c1
                    00C2    492 _RB81	=	0x00c2
                    00C3    493 _TB81	=	0x00c3
                    00C4    494 _REN1	=	0x00c4
                    00C5    495 _SM21	=	0x00c5
                    00C6    496 _SM11	=	0x00c6
                    00C7    497 _SM01	=	0x00c7
                    00C8    498 _CP_RL2	=	0x00c8
                    00C9    499 _C_T2	=	0x00c9
                    00CA    500 _TR2	=	0x00ca
                    00CB    501 _EXEN2	=	0x00cb
                    00CC    502 _TCLK	=	0x00cc
                    00CD    503 _RCLK	=	0x00cd
                    00CE    504 _EXF2	=	0x00ce
                    00CF    505 _TF2	=	0x00cf
                    00D0    506 _P	=	0x00d0
                    00D1    507 _FL	=	0x00d1
                    00D2    508 _OV	=	0x00d2
                    00D3    509 _RS0	=	0x00d3
                    00D4    510 _RS1	=	0x00d4
                    00D5    511 _F0	=	0x00d5
                    00D6    512 _AC	=	0x00d6
                    00D7    513 _CY	=	0x00d7
                    00DB    514 _INT6	=	0x00db
                    00DC    515 _RESI	=	0x00dc
                    00DD    516 _ERESI	=	0x00dd
                    00DF    517 _SMOD1	=	0x00df
                    00E8    518 _EUSB	=	0x00e8
                    00E9    519 _EI2C	=	0x00e9
                    00EA    520 _EIEX4	=	0x00ea
                    00EB    521 _EIEX5	=	0x00eb
                    00EC    522 _EIEX6	=	0x00ec
                    00F8    523 _PUSB	=	0x00f8
                    00F9    524 _PI2C	=	0x00f9
                    00FA    525 _EIPX4	=	0x00fa
                    00FB    526 _EIPX5	=	0x00fb
                    00FC    527 _EIPX6	=	0x00fc
                            528 ;--------------------------------------------------------
                            529 ; overlayable register banks
                            530 ;--------------------------------------------------------
                            531 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     532 	.ds 8
                            533 ;--------------------------------------------------------
                            534 ; internal ram data
                            535 ;--------------------------------------------------------
                            536 	.area DSEG    (DATA)
                            537 ;--------------------------------------------------------
                            538 ; overlayable items in internal ram 
                            539 ;--------------------------------------------------------
                            540 	.area	OSEG    (OVR,DATA)
   0000                     541 _gpif_init_PARM_2::
   0000                     542 	.ds 3
   0003                     543 _gpif_init_wavedata_1_1::
   0003                     544 	.ds 3
                            545 	.area	OSEG    (OVR,DATA)
   0000                     546 _gpif_setflowstate_PARM_2::
   0000                     547 	.ds 1
                            548 	.area	OSEG    (OVR,DATA)
                            549 	.area	OSEG    (OVR,DATA)
                            550 	.area	OSEG    (OVR,DATA)
   0000                     551 _gpif_single_read16_PARM_2::
   0000                     552 	.ds 2
   0002                     553 _gpif_single_read16_res_1_1::
   0002                     554 	.ds 3
   0005                     555 _gpif_single_read16_sloc0_1_0::
   0005                     556 	.ds 3
                            557 	.area	OSEG    (OVR,DATA)
   0000                     558 _gpif_single_write16_PARM_2::
   0000                     559 	.ds 2
                            560 	.area	OSEG    (OVR,DATA)
                            561 	.area	OSEG    (OVR,DATA)
                            562 ;--------------------------------------------------------
                            563 ; indirectly addressable internal ram data
                            564 ;--------------------------------------------------------
                            565 	.area ISEG    (DATA)
                            566 ;--------------------------------------------------------
                            567 ; absolute internal ram data
                            568 ;--------------------------------------------------------
                            569 	.area IABS    (ABS,DATA)
                            570 	.area IABS    (ABS,DATA)
                            571 ;--------------------------------------------------------
                            572 ; bit data
                            573 ;--------------------------------------------------------
                            574 	.area BSEG    (BIT)
                            575 ;--------------------------------------------------------
                            576 ; paged external ram data
                            577 ;--------------------------------------------------------
                            578 	.area PSEG    (PAG,XDATA)
                            579 ;--------------------------------------------------------
                            580 ; external ram data
                            581 ;--------------------------------------------------------
                            582 	.area XSEG    (XDATA)
                    E400    583 _GPIF_WAVE_DATA	=	0xe400
                    E480    584 _RES_WAVEDATA_END	=	0xe480
                    E600    585 _CPUCS	=	0xe600
                    E601    586 _IFCONFIG	=	0xe601
                    E602    587 _PINFLAGSAB	=	0xe602
                    E603    588 _PINFLAGSCD	=	0xe603
                    E604    589 _FIFORESET	=	0xe604
                    E605    590 _BREAKPT	=	0xe605
                    E606    591 _BPADDRH	=	0xe606
                    E607    592 _BPADDRL	=	0xe607
                    E608    593 _UART230	=	0xe608
                    E609    594 _FIFOPINPOLAR	=	0xe609
                    E60A    595 _REVID	=	0xe60a
                    E60B    596 _REVCTL	=	0xe60b
                    E610    597 _EP1OUTCFG	=	0xe610
                    E611    598 _EP1INCFG	=	0xe611
                    E612    599 _EP2CFG	=	0xe612
                    E613    600 _EP4CFG	=	0xe613
                    E614    601 _EP6CFG	=	0xe614
                    E615    602 _EP8CFG	=	0xe615
                    E618    603 _EP2FIFOCFG	=	0xe618
                    E619    604 _EP4FIFOCFG	=	0xe619
                    E61A    605 _EP6FIFOCFG	=	0xe61a
                    E61B    606 _EP8FIFOCFG	=	0xe61b
                    E620    607 _EP2AUTOINLENH	=	0xe620
                    E621    608 _EP2AUTOINLENL	=	0xe621
                    E622    609 _EP4AUTOINLENH	=	0xe622
                    E623    610 _EP4AUTOINLENL	=	0xe623
                    E624    611 _EP6AUTOINLENH	=	0xe624
                    E625    612 _EP6AUTOINLENL	=	0xe625
                    E626    613 _EP8AUTOINLENH	=	0xe626
                    E627    614 _EP8AUTOINLENL	=	0xe627
                    E630    615 _EP2FIFOPFH	=	0xe630
                    E631    616 _EP2FIFOPFL	=	0xe631
                    E632    617 _EP4FIFOPFH	=	0xe632
                    E633    618 _EP4FIFOPFL	=	0xe633
                    E634    619 _EP6FIFOPFH	=	0xe634
                    E635    620 _EP6FIFOPFL	=	0xe635
                    E636    621 _EP8FIFOPFH	=	0xe636
                    E637    622 _EP8FIFOPFL	=	0xe637
                    E640    623 _EP2ISOINPKTS	=	0xe640
                    E641    624 _EP4ISOINPKTS	=	0xe641
                    E642    625 _EP6ISOINPKTS	=	0xe642
                    E643    626 _EP8ISOINPKTS	=	0xe643
                    E648    627 _INPKTEND	=	0xe648
                    E649    628 _OUTPKTEND	=	0xe649
                    E650    629 _EP2FIFOIE	=	0xe650
                    E651    630 _EP2FIFOIRQ	=	0xe651
                    E652    631 _EP4FIFOIE	=	0xe652
                    E653    632 _EP4FIFOIRQ	=	0xe653
                    E654    633 _EP6FIFOIE	=	0xe654
                    E655    634 _EP6FIFOIRQ	=	0xe655
                    E656    635 _EP8FIFOIE	=	0xe656
                    E657    636 _EP8FIFOIRQ	=	0xe657
                    E658    637 _IBNIE	=	0xe658
                    E659    638 _IBNIRQ	=	0xe659
                    E65A    639 _NAKIE	=	0xe65a
                    E65B    640 _NAKIRQ	=	0xe65b
                    E65C    641 _USBIE	=	0xe65c
                    E65D    642 _USBIRQ	=	0xe65d
                    E65E    643 _EPIE	=	0xe65e
                    E65F    644 _EPIRQ	=	0xe65f
                    E660    645 _GPIFIE	=	0xe660
                    E661    646 _GPIFIRQ	=	0xe661
                    E662    647 _USBERRIE	=	0xe662
                    E663    648 _USBERRIRQ	=	0xe663
                    E664    649 _ERRCNTLIM	=	0xe664
                    E665    650 _CLRERRCNT	=	0xe665
                    E666    651 _INT2IVEC	=	0xe666
                    E667    652 _INT4IVEC	=	0xe667
                    E668    653 _INTSETUP	=	0xe668
                    E670    654 _PORTACFG	=	0xe670
                    E671    655 _PORTCCFG	=	0xe671
                    E672    656 _PORTECFG	=	0xe672
                    E678    657 _I2CS	=	0xe678
                    E679    658 _I2DAT	=	0xe679
                    E67A    659 _I2CTL	=	0xe67a
                    E67B    660 _XAUTODAT1	=	0xe67b
                    E67C    661 _XAUTODAT2	=	0xe67c
                    E680    662 _USBCS	=	0xe680
                    E681    663 _SUSPEND	=	0xe681
                    E682    664 _WAKEUPCS	=	0xe682
                    E683    665 _TOGCTL	=	0xe683
                    E684    666 _USBFRAMEH	=	0xe684
                    E685    667 _USBFRAMEL	=	0xe685
                    E686    668 _MICROFRAME	=	0xe686
                    E687    669 _FNADDR	=	0xe687
                    E68A    670 _EP0BCH	=	0xe68a
                    E68B    671 _EP0BCL	=	0xe68b
                    E68D    672 _EP1OUTBC	=	0xe68d
                    E68F    673 _EP1INBC	=	0xe68f
                    E690    674 _EP2BCH	=	0xe690
                    E691    675 _EP2BCL	=	0xe691
                    E694    676 _EP4BCH	=	0xe694
                    E695    677 _EP4BCL	=	0xe695
                    E698    678 _EP6BCH	=	0xe698
                    E699    679 _EP6BCL	=	0xe699
                    E69C    680 _EP8BCH	=	0xe69c
                    E69D    681 _EP8BCL	=	0xe69d
                    E6A0    682 _EP0CS	=	0xe6a0
                    E6A1    683 _EP1OUTCS	=	0xe6a1
                    E6A2    684 _EP1INCS	=	0xe6a2
                    E6A3    685 _EP2CS	=	0xe6a3
                    E6A4    686 _EP4CS	=	0xe6a4
                    E6A5    687 _EP6CS	=	0xe6a5
                    E6A6    688 _EP8CS	=	0xe6a6
                    E6A7    689 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    690 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    691 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    692 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    693 _EP2FIFOBCH	=	0xe6ab
                    E6AC    694 _EP2FIFOBCL	=	0xe6ac
                    E6AD    695 _EP4FIFOBCH	=	0xe6ad
                    E6AE    696 _EP4FIFOBCL	=	0xe6ae
                    E6AF    697 _EP6FIFOBCH	=	0xe6af
                    E6B0    698 _EP6FIFOBCL	=	0xe6b0
                    E6B1    699 _EP8FIFOBCH	=	0xe6b1
                    E6B2    700 _EP8FIFOBCL	=	0xe6b2
                    E6B3    701 _SUDPTRH	=	0xe6b3
                    E6B4    702 _SUDPTRL	=	0xe6b4
                    E6B5    703 _SUDPTRCTL	=	0xe6b5
                    E6B8    704 _SETUPDAT	=	0xe6b8
                    E6C0    705 _GPIFWFSELECT	=	0xe6c0
                    E6C1    706 _GPIFIDLECS	=	0xe6c1
                    E6C2    707 _GPIFIDLECTL	=	0xe6c2
                    E6C3    708 _GPIFCTLCFG	=	0xe6c3
                    E6C4    709 _GPIFADRH	=	0xe6c4
                    E6C5    710 _GPIFADRL	=	0xe6c5
                    E6CE    711 _GPIFTCB3	=	0xe6ce
                    E6CF    712 _GPIFTCB2	=	0xe6cf
                    E6D0    713 _GPIFTCB1	=	0xe6d0
                    E6D1    714 _GPIFTCB0	=	0xe6d1
                    E6D2    715 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    716 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    717 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    718 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    719 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    720 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    721 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    722 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    723 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    724 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    725 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    726 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    727 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    728 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    729 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    730 _GPIFREADYCFG	=	0xe6f3
                    E6F4    731 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    732 _GPIFABORT	=	0xe6f5
                    E6C6    733 _FLOWSTATE	=	0xe6c6
                    E6C7    734 _FLOWLOGIC	=	0xe6c7
                    E6C8    735 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    736 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    737 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    738 _FLOWSTB	=	0xe6cb
                    E6CC    739 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    740 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    741 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    742 _UDMACRCH	=	0xe67d
                    E67E    743 _UDMACRCL	=	0xe67e
                    E67F    744 _UDMACRCQUAL	=	0xe67f
                    E740    745 _EP0BUF	=	0xe740
                    E780    746 _EP1OUTBUF	=	0xe780
                    E7C0    747 _EP1INBUF	=	0xe7c0
                    F000    748 _EP2FIFOBUF	=	0xf000
                    F400    749 _EP4FIFOBUF	=	0xf400
                    F800    750 _EP6FIFOBUF	=	0xf800
                    FC00    751 _EP8FIFOBUF	=	0xfc00
                    E628    752 _ECCCFG	=	0xe628
                    E629    753 _ECCRESET	=	0xe629
                    E62A    754 _ECC1B0	=	0xe62a
                    E62B    755 _ECC1B1	=	0xe62b
                    E62C    756 _ECC1B2	=	0xe62c
                    E62D    757 _ECC2B0	=	0xe62d
                    E62E    758 _ECC2B1	=	0xe62e
                    E62F    759 _ECC2B2	=	0xe62f
                    E50D    760 _GPCR2	=	0xe50d
                            761 ;--------------------------------------------------------
                            762 ; absolute external ram data
                            763 ;--------------------------------------------------------
                            764 	.area XABS    (ABS,XDATA)
                            765 ;--------------------------------------------------------
                            766 ; external initialized ram data
                            767 ;--------------------------------------------------------
                            768 	.area XISEG   (XDATA)
                            769 	.area HOME    (CODE)
                            770 	.area GSINIT0 (CODE)
                            771 	.area GSINIT1 (CODE)
                            772 	.area GSINIT2 (CODE)
                            773 	.area GSINIT3 (CODE)
                            774 	.area GSINIT4 (CODE)
                            775 	.area GSINIT5 (CODE)
                            776 	.area GSINIT  (CODE)
                            777 	.area GSFINAL (CODE)
                            778 	.area CSEG    (CODE)
                            779 ;--------------------------------------------------------
                            780 ; global & static initialisations
                            781 ;--------------------------------------------------------
                            782 	.area HOME    (CODE)
                            783 	.area GSINIT  (CODE)
                            784 	.area GSFINAL (CODE)
                            785 	.area GSINIT  (CODE)
                            786 ;--------------------------------------------------------
                            787 ; Home
                            788 ;--------------------------------------------------------
                            789 	.area HOME    (CODE)
                            790 	.area HOME    (CODE)
                            791 ;--------------------------------------------------------
                            792 ; code
                            793 ;--------------------------------------------------------
                            794 	.area CSEG    (CODE)
                            795 ;------------------------------------------------------------
                            796 ;Allocation info for local variables in function 'gpif_init'
                            797 ;------------------------------------------------------------
                            798 ;initdata                  Allocated with name '_gpif_init_PARM_2'
                            799 ;wavedata                  Allocated with name '_gpif_init_wavedata_1_1'
                            800 ;i                         Allocated to registers r2 
                            801 ;------------------------------------------------------------
                            802 ;	gpif.c:28: void gpif_init( BYTE* wavedata, BYTE* initdata ) {
                            803 ;	-----------------------------------------
                            804 ;	 function gpif_init
                            805 ;	-----------------------------------------
   0000                     806 _gpif_init:
                    0002    807 	ar2 = 0x02
                    0003    808 	ar3 = 0x03
                    0004    809 	ar4 = 0x04
                    0005    810 	ar5 = 0x05
                    0006    811 	ar6 = 0x06
                    0007    812 	ar7 = 0x07
                    0000    813 	ar0 = 0x00
                    0001    814 	ar1 = 0x01
   0000 85 82*03            815 	mov	_gpif_init_wavedata_1_1,dpl
   0003 85 83*04            816 	mov	(_gpif_init_wavedata_1_1 + 1),dph
   0006 85 F0*05            817 	mov	(_gpif_init_wavedata_1_1 + 2),b
                            818 ;	gpif.c:59: IFCONFIG &= ~0x03; // turn off IFCFG[1:0]
                            819 ;	gpif.c:60: IFCONFIG |= 0x02; // set's IFCFG[1:0] to 10 to put in GPIF master mode.
   0009 90 E6 01            820 	mov	dptr,#_IFCONFIG
   000C E0                  821 	movx	a,@dptr
   000D 54 FC               822 	anl	a,#0xFC
   000F F0                  823 	movx	@dptr,a
   0010 E0                  824 	movx	a,@dptr
   0011 44 02               825 	orl	a,#0x02
   0013 F0                  826 	movx	@dptr,a
                            827 ;	gpif.c:63: GPIFABORT = 0xFF;  // abort any waveforms pending
   0014 90 E6 F5            828 	mov	dptr,#_GPIFABORT
   0017 74 FF               829 	mov	a,#0xFF
   0019 F0                  830 	movx	@dptr,a
                            831 ;	gpif.c:65: GPIFREADYCFG = initdata[ 0 ];
   001A AD*00               832 	mov	r5,_gpif_init_PARM_2
   001C AE*01               833 	mov	r6,(_gpif_init_PARM_2 + 1)
   001E AF*02               834 	mov	r7,(_gpif_init_PARM_2 + 2)
   0020 8D 82               835 	mov	dpl,r5
   0022 8E 83               836 	mov	dph,r6
   0024 8F F0               837 	mov	b,r7
   0026 12s00r00            838 	lcall	__gptrget
   0029 90 E6 F3            839 	mov	dptr,#_GPIFREADYCFG
   002C F0                  840 	movx	@dptr,a
                            841 ;	gpif.c:66: GPIFCTLCFG = initdata[ 1 ];
   002D 74 01               842 	mov	a,#0x01
   002F 2D                  843 	add	a,r5
   0030 F8                  844 	mov	r0,a
   0031 E4                  845 	clr	a
   0032 3E                  846 	addc	a,r6
   0033 F9                  847 	mov	r1,a
   0034 8F 02               848 	mov	ar2,r7
   0036 88 82               849 	mov	dpl,r0
   0038 89 83               850 	mov	dph,r1
   003A 8A F0               851 	mov	b,r2
   003C 12s00r00            852 	lcall	__gptrget
   003F F8                  853 	mov	r0,a
   0040 90 E6 C3            854 	mov	dptr,#_GPIFCTLCFG
   0043 F0                  855 	movx	@dptr,a
                            856 ;	gpif.c:67: GPIFIDLECS = initdata[ 2 ];
   0044 74 02               857 	mov	a,#0x02
   0046 2D                  858 	add	a,r5
   0047 FA                  859 	mov	r2,a
   0048 E4                  860 	clr	a
   0049 3E                  861 	addc	a,r6
   004A FB                  862 	mov	r3,a
   004B 8F 04               863 	mov	ar4,r7
   004D 8A 82               864 	mov	dpl,r2
   004F 8B 83               865 	mov	dph,r3
   0051 8C F0               866 	mov	b,r4
   0053 12s00r00            867 	lcall	__gptrget
   0056 90 E6 C1            868 	mov	dptr,#_GPIFIDLECS
   0059 F0                  869 	movx	@dptr,a
                            870 ;	gpif.c:68: GPIFIDLECTL = initdata[ 3 ];
   005A 74 03               871 	mov	a,#0x03
   005C 2D                  872 	add	a,r5
   005D FA                  873 	mov	r2,a
   005E E4                  874 	clr	a
   005F 3E                  875 	addc	a,r6
   0060 FB                  876 	mov	r3,a
   0061 8F 04               877 	mov	ar4,r7
   0063 8A 82               878 	mov	dpl,r2
   0065 8B 83               879 	mov	dph,r3
   0067 8C F0               880 	mov	b,r4
   0069 12s00r00            881 	lcall	__gptrget
   006C 90 E6 C2            882 	mov	dptr,#_GPIFIDLECTL
   006F F0                  883 	movx	@dptr,a
                            884 ;	gpif.c:69: GPIFWFSELECT = initdata[ 5 ];
   0070 74 05               885 	mov	a,#0x05
   0072 2D                  886 	add	a,r5
   0073 FA                  887 	mov	r2,a
   0074 E4                  888 	clr	a
   0075 3E                  889 	addc	a,r6
   0076 FB                  890 	mov	r3,a
   0077 8F 04               891 	mov	ar4,r7
   0079 8A 82               892 	mov	dpl,r2
   007B 8B 83               893 	mov	dph,r3
   007D 8C F0               894 	mov	b,r4
   007F 12s00r00            895 	lcall	__gptrget
   0082 90 E6 C0            896 	mov	dptr,#_GPIFWFSELECT
   0085 F0                  897 	movx	@dptr,a
                            898 ;	gpif.c:70: GPIFREADYSTAT = initdata[ 6 ];
   0086 74 06               899 	mov	a,#0x06
   0088 2D                  900 	add	a,r5
   0089 FD                  901 	mov	r5,a
   008A E4                  902 	clr	a
   008B 3E                  903 	addc	a,r6
   008C FE                  904 	mov	r6,a
   008D 8D 82               905 	mov	dpl,r5
   008F 8E 83               906 	mov	dph,r6
   0091 8F F0               907 	mov	b,r7
   0093 12s00r00            908 	lcall	__gptrget
   0096 FD                  909 	mov	r5,a
   0097 90 E6 F4            910 	mov	dptr,#_GPIFREADYSTAT
   009A F0                  911 	movx	@dptr,a
                            912 ;	gpif.c:73: AUTOPTRSETUP = 0x07;          // inc both pointers, 
   009B 75 AF 07            913 	mov	_AUTOPTRSETUP,#0x07
                            914 ;	gpif.c:78: AUTOPTRH1 = MSB( (WORD)wavedata );
   009E AA*03               915 	mov	r2,_gpif_init_wavedata_1_1
   00A0 AB*04               916 	mov	r3,(_gpif_init_wavedata_1_1 + 1)
   00A2 8B 9A               917 	mov	_AUTOPTRH1,r3
                            918 ;	gpif.c:79: AUTOPTRL1 = LSB( (WORD)wavedata );
   00A4 7B 00               919 	mov	r3,#0x00
   00A6 8A 9B               920 	mov	_AUTOPTRL1,r2
                            921 ;	gpif.c:82: AUTOPTRH2 = 0xE4;
   00A8 75 9D E4            922 	mov	_AUTOPTRH2,#0xE4
                            923 ;	gpif.c:83: AUTOPTRL2 = 0x00;
   00AB 75 9E 00            924 	mov	_AUTOPTRL2,#0x00
                            925 ;	gpif.c:86: for ( i = 0x00; i < 128; i++ )
   00AE 7A 00               926 	mov	r2,#0x00
   00B0                     927 00101$:
   00B0 BA 80 00            928 	cjne	r2,#0x80,00110$
   00B3                     929 00110$:
   00B3 50 0C               930 	jnc	00104$
                            931 ;	gpif.c:88: EXTAUTODAT2 = EXTAUTODAT1;
   00B5 90 E6 7B            932 	mov	dptr,#_XAUTODAT1
   00B8 E0                  933 	movx	a,@dptr
   00B9 FB                  934 	mov	r3,a
   00BA 90 E6 7C            935 	mov	dptr,#_XAUTODAT2
   00BD F0                  936 	movx	@dptr,a
                            937 ;	gpif.c:86: for ( i = 0x00; i < 128; i++ )
   00BE 0A                  938 	inc	r2
   00BF 80 EF               939 	sjmp	00101$
   00C1                     940 00104$:
                            941 ;	gpif.c:94: PORTCCFG = 0xFF;    // [7:0] as alt. func. GPIFADR[7:0]
   00C1 90 E6 71            942 	mov	dptr,#_PORTCCFG
   00C4 74 FF               943 	mov	a,#0xFF
   00C6 F0                  944 	movx	@dptr,a
                            945 ;	gpif.c:95: OEC = 0xFF;         // and as outputs
   00C7 75 B4 FF            946 	mov	_OEC,#0xFF
                            947 ;	gpif.c:96: PORTECFG |= 0x80;   // [8] as alt. func. GPIFADR[8]
   00CA 90 E6 72            948 	mov	dptr,#_PORTECFG
   00CD E0                  949 	movx	a,@dptr
   00CE FA                  950 	mov	r2,a
   00CF 44 80               951 	orl	a,#0x80
   00D1 F0                  952 	movx	@dptr,a
                            953 ;	gpif.c:97: OEE |= 0x80;        // and as output
   00D2 43 B6 80            954 	orl	_OEE,#0x80
                            955 ;	gpif.c:106: SYNCDELAY();                    // 
   00D5 00                  956 	 nop 
   00D6 00                  957 	 nop 
   00D7 00                  958 	 nop 
   00D8 00                  959 	 nop 
                            960 ;	gpif.c:107: GPIFADRH = 0x00;    // bits[7:1] always 0
   00D9 90 E6 C4            961 	mov	dptr,#_GPIFADRH
   00DC E4                  962 	clr	a
   00DD F0                  963 	movx	@dptr,a
                            964 ;	gpif.c:108: SYNCDELAY();                    // 
   00DE 00                  965 	 nop 
   00DF 00                  966 	 nop 
   00E0 00                  967 	 nop 
   00E1 00                  968 	 nop 
                            969 ;	gpif.c:109: GPIFADRL = 0x00;    // point to PERIPHERAL address 0x0000
   00E2 90 E6 C5            970 	mov	dptr,#_GPIFADRL
                            971 ;	gpif.c:113: FLOWSTATE = 0;
                            972 ;	gpif.c:114: FLOWLOGIC = 0;
                            973 ;	gpif.c:115: FLOWEQ0CTL = 0;
   00E5 E4                  974 	clr	a
   00E6 F0                  975 	movx	@dptr,a
   00E7 90 E6 C6            976 	mov	dptr,#_FLOWSTATE
   00EA F0                  977 	movx	@dptr,a
   00EB 90 E6 C7            978 	mov	dptr,#_FLOWLOGIC
   00EE F0                  979 	movx	@dptr,a
   00EF 90 E6 C8            980 	mov	dptr,#_FLOWEQ0CTL
   00F2 F0                  981 	movx	@dptr,a
                            982 ;	gpif.c:116: FLOWEQ1CTL = 0;
   00F3 90 E6 C9            983 	mov	dptr,#_FLOWEQ1CTL
                            984 ;	gpif.c:117: FLOWHOLDOFF = 0;
                            985 ;	gpif.c:118: FLOWSTB = 0;
                            986 ;	gpif.c:119: FLOWSTBEDGE = 0;
   00F6 E4                  987 	clr	a
   00F7 F0                  988 	movx	@dptr,a
   00F8 90 E6 CA            989 	mov	dptr,#_FLOWHOLDOFF
   00FB F0                  990 	movx	@dptr,a
   00FC 90 E6 CB            991 	mov	dptr,#_FLOWSTB
   00FF F0                  992 	movx	@dptr,a
   0100 90 E6 CC            993 	mov	dptr,#_FLOWSTBEDGE
   0103 F0                  994 	movx	@dptr,a
                            995 ;	gpif.c:120: FLOWSTBHPERIOD = 0;
   0104 90 E6 CD            996 	mov	dptr,#_FLOWSTBHPERIOD
   0107 E4                  997 	clr	a
   0108 F0                  998 	movx	@dptr,a
   0109 22                  999 	ret
                           1000 ;------------------------------------------------------------
                           1001 ;Allocation info for local variables in function 'gpif_setflowstate'
                           1002 ;------------------------------------------------------------
                           1003 ;bank                      Allocated with name '_gpif_setflowstate_PARM_2'
                           1004 ;flowstates                Allocated to registers r2 r3 r4 
                           1005 ;base                      Allocated to registers r5 
                           1006 ;------------------------------------------------------------
                           1007 ;	gpif.c:123: void gpif_setflowstate( BYTE* flowstates, BYTE bank) {
                           1008 ;	-----------------------------------------
                           1009 ;	 function gpif_setflowstate
                           1010 ;	-----------------------------------------
   010A                    1011 _gpif_setflowstate:
   010A AA 82              1012 	mov	r2,dpl
   010C AB 83              1013 	mov	r3,dph
   010E AC F0              1014 	mov	r4,b
                           1015 ;	gpif.c:124: BYTE base = 9*bank;
   0110 E5*00              1016 	mov	a,_gpif_setflowstate_PARM_2
   0112 75 F0 09           1017 	mov	b,#0x09
   0115 A4                 1018 	mul	ab
                           1019 ;	gpif.c:125: FLOWSTATE = flowstates[ base ];
   0116 FD                 1020 	mov	r5,a
   0117 2A                 1021 	add	a,r2
   0118 FE                 1022 	mov	r6,a
   0119 E4                 1023 	clr	a
   011A 3B                 1024 	addc	a,r3
   011B FF                 1025 	mov	r7,a
   011C 8C 00              1026 	mov	ar0,r4
   011E 8E 82              1027 	mov	dpl,r6
   0120 8F 83              1028 	mov	dph,r7
   0122 88 F0              1029 	mov	b,r0
   0124 12s00r00           1030 	lcall	__gptrget
   0127 90 E6 C6           1031 	mov	dptr,#_FLOWSTATE
   012A F0                 1032 	movx	@dptr,a
                           1033 ;	gpif.c:126: FLOWLOGIC = flowstates[ base+1 ];
   012B 7E 00              1034 	mov	r6,#0x00
   012D 74 01              1035 	mov	a,#0x01
   012F 2D                 1036 	add	a,r5
   0130 FF                 1037 	mov	r7,a
   0131 E4                 1038 	clr	a
   0132 3E                 1039 	addc	a,r6
   0133 F8                 1040 	mov	r0,a
   0134 EF                 1041 	mov	a,r7
   0135 2A                 1042 	add	a,r2
   0136 FF                 1043 	mov	r7,a
   0137 E8                 1044 	mov	a,r0
   0138 3B                 1045 	addc	a,r3
   0139 F8                 1046 	mov	r0,a
   013A 8C 01              1047 	mov	ar1,r4
   013C 8F 82              1048 	mov	dpl,r7
   013E 88 83              1049 	mov	dph,r0
   0140 89 F0              1050 	mov	b,r1
   0142 12s00r00           1051 	lcall	__gptrget
   0145 90 E6 C7           1052 	mov	dptr,#_FLOWLOGIC
   0148 F0                 1053 	movx	@dptr,a
                           1054 ;	gpif.c:127: FLOWEQ0CTL = flowstates[ base+2 ];
   0149 74 02              1055 	mov	a,#0x02
   014B 2D                 1056 	add	a,r5
   014C FF                 1057 	mov	r7,a
   014D E4                 1058 	clr	a
   014E 3E                 1059 	addc	a,r6
   014F F8                 1060 	mov	r0,a
   0150 EF                 1061 	mov	a,r7
   0151 2A                 1062 	add	a,r2
   0152 FF                 1063 	mov	r7,a
   0153 E8                 1064 	mov	a,r0
   0154 3B                 1065 	addc	a,r3
   0155 F8                 1066 	mov	r0,a
   0156 8C 01              1067 	mov	ar1,r4
   0158 8F 82              1068 	mov	dpl,r7
   015A 88 83              1069 	mov	dph,r0
   015C 89 F0              1070 	mov	b,r1
   015E 12s00r00           1071 	lcall	__gptrget
   0161 90 E6 C8           1072 	mov	dptr,#_FLOWEQ0CTL
   0164 F0                 1073 	movx	@dptr,a
                           1074 ;	gpif.c:128: FLOWEQ1CTL = flowstates[ base+3 ];
   0165 74 03              1075 	mov	a,#0x03
   0167 2D                 1076 	add	a,r5
   0168 FF                 1077 	mov	r7,a
   0169 E4                 1078 	clr	a
   016A 3E                 1079 	addc	a,r6
   016B F8                 1080 	mov	r0,a
   016C EF                 1081 	mov	a,r7
   016D 2A                 1082 	add	a,r2
   016E FF                 1083 	mov	r7,a
   016F E8                 1084 	mov	a,r0
   0170 3B                 1085 	addc	a,r3
   0171 F8                 1086 	mov	r0,a
   0172 8C 01              1087 	mov	ar1,r4
   0174 8F 82              1088 	mov	dpl,r7
   0176 88 83              1089 	mov	dph,r0
   0178 89 F0              1090 	mov	b,r1
   017A 12s00r00           1091 	lcall	__gptrget
   017D 90 E6 C9           1092 	mov	dptr,#_FLOWEQ1CTL
   0180 F0                 1093 	movx	@dptr,a
                           1094 ;	gpif.c:129: FLOWHOLDOFF = flowstates[ base+4 ];
   0181 74 04              1095 	mov	a,#0x04
   0183 2D                 1096 	add	a,r5
   0184 FF                 1097 	mov	r7,a
   0185 E4                 1098 	clr	a
   0186 3E                 1099 	addc	a,r6
   0187 F8                 1100 	mov	r0,a
   0188 EF                 1101 	mov	a,r7
   0189 2A                 1102 	add	a,r2
   018A FF                 1103 	mov	r7,a
   018B E8                 1104 	mov	a,r0
   018C 3B                 1105 	addc	a,r3
   018D F8                 1106 	mov	r0,a
   018E 8C 01              1107 	mov	ar1,r4
   0190 8F 82              1108 	mov	dpl,r7
   0192 88 83              1109 	mov	dph,r0
   0194 89 F0              1110 	mov	b,r1
   0196 12s00r00           1111 	lcall	__gptrget
   0199 90 E6 CA           1112 	mov	dptr,#_FLOWHOLDOFF
   019C F0                 1113 	movx	@dptr,a
                           1114 ;	gpif.c:130: FLOWSTB = flowstates[ base+5 ];
   019D 74 05              1115 	mov	a,#0x05
   019F 2D                 1116 	add	a,r5
   01A0 FF                 1117 	mov	r7,a
   01A1 E4                 1118 	clr	a
   01A2 3E                 1119 	addc	a,r6
   01A3 F8                 1120 	mov	r0,a
   01A4 EF                 1121 	mov	a,r7
   01A5 2A                 1122 	add	a,r2
   01A6 FF                 1123 	mov	r7,a
   01A7 E8                 1124 	mov	a,r0
   01A8 3B                 1125 	addc	a,r3
   01A9 F8                 1126 	mov	r0,a
   01AA 8C 01              1127 	mov	ar1,r4
   01AC 8F 82              1128 	mov	dpl,r7
   01AE 88 83              1129 	mov	dph,r0
   01B0 89 F0              1130 	mov	b,r1
   01B2 12s00r00           1131 	lcall	__gptrget
   01B5 90 E6 CB           1132 	mov	dptr,#_FLOWSTB
   01B8 F0                 1133 	movx	@dptr,a
                           1134 ;	gpif.c:131: FLOWSTBEDGE = flowstates[ base+6 ];
   01B9 74 06              1135 	mov	a,#0x06
   01BB 2D                 1136 	add	a,r5
   01BC FF                 1137 	mov	r7,a
   01BD E4                 1138 	clr	a
   01BE 3E                 1139 	addc	a,r6
   01BF F8                 1140 	mov	r0,a
   01C0 EF                 1141 	mov	a,r7
   01C1 2A                 1142 	add	a,r2
   01C2 FF                 1143 	mov	r7,a
   01C3 E8                 1144 	mov	a,r0
   01C4 3B                 1145 	addc	a,r3
   01C5 F8                 1146 	mov	r0,a
   01C6 8C 01              1147 	mov	ar1,r4
   01C8 8F 82              1148 	mov	dpl,r7
   01CA 88 83              1149 	mov	dph,r0
   01CC 89 F0              1150 	mov	b,r1
   01CE 12s00r00           1151 	lcall	__gptrget
   01D1 90 E6 CC           1152 	mov	dptr,#_FLOWSTBEDGE
   01D4 F0                 1153 	movx	@dptr,a
                           1154 ;	gpif.c:132: FLOWSTBHPERIOD = flowstates[ base+7 ];
   01D5 74 07              1155 	mov	a,#0x07
   01D7 2D                 1156 	add	a,r5
   01D8 FD                 1157 	mov	r5,a
   01D9 E4                 1158 	clr	a
   01DA 3E                 1159 	addc	a,r6
   01DB FE                 1160 	mov	r6,a
   01DC ED                 1161 	mov	a,r5
   01DD 2A                 1162 	add	a,r2
   01DE FA                 1163 	mov	r2,a
   01DF EE                 1164 	mov	a,r6
   01E0 3B                 1165 	addc	a,r3
   01E1 FB                 1166 	mov	r3,a
   01E2 8A 82              1167 	mov	dpl,r2
   01E4 8B 83              1168 	mov	dph,r3
   01E6 8C F0              1169 	mov	b,r4
   01E8 12s00r00           1170 	lcall	__gptrget
   01EB 90 E6 CD           1171 	mov	dptr,#_FLOWSTBHPERIOD
   01EE F0                 1172 	movx	@dptr,a
   01EF 22                 1173 	ret
                           1174 ;------------------------------------------------------------
                           1175 ;Allocation info for local variables in function 'gpif_set_tc32'
                           1176 ;------------------------------------------------------------
                           1177 ;tc                        Allocated to registers r2 r3 r4 r5 
                           1178 ;------------------------------------------------------------
                           1179 ;	gpif.c:135: void gpif_set_tc32(DWORD tc) {
                           1180 ;	-----------------------------------------
                           1181 ;	 function gpif_set_tc32
                           1182 ;	-----------------------------------------
   01F0                    1183 _gpif_set_tc32:
   01F0 AA 82              1184 	mov	r2,dpl
   01F2 AB 83              1185 	mov	r3,dph
   01F4 AC F0              1186 	mov	r4,b
   01F6 FD                 1187 	mov	r5,a
                           1188 ;	gpif.c:136: GPIFTCB3 = MSB(MSW(tc));
   01F7 8C 06              1189 	mov	ar6,r4
   01F9 8D 07              1190 	mov	ar7,r5
   01FB 90 E6 CE           1191 	mov	dptr,#_GPIFTCB3
   01FE EF                 1192 	mov	a,r7
   01FF F0                 1193 	movx	@dptr,a
                           1194 ;	gpif.c:137: SYNCDELAY();
   0200 00                 1195 	 nop 
   0201 00                 1196 	 nop 
   0202 00                 1197 	 nop 
   0203 00                 1198 	 nop 
                           1199 ;	gpif.c:138: GPIFTCB2 = LSB(MSW(tc));
   0204 7F 00              1200 	mov	r7,#0x00
   0206 90 E6 CF           1201 	mov	dptr,#_GPIFTCB2
   0209 EE                 1202 	mov	a,r6
   020A F0                 1203 	movx	@dptr,a
                           1204 ;	gpif.c:139: SYNCDELAY();
   020B 00                 1205 	 nop 
   020C 00                 1206 	 nop 
   020D 00                 1207 	 nop 
   020E 00                 1208 	 nop 
                           1209 ;	gpif.c:140: GPIFTCB1 = MSB(LSW(tc));
   020F 7C 00              1210 	mov	r4,#0x00
   0211 7D 00              1211 	mov	r5,#0x00
   0213 90 E6 D0           1212 	mov	dptr,#_GPIFTCB1
   0216 EB                 1213 	mov	a,r3
   0217 F0                 1214 	movx	@dptr,a
                           1215 ;	gpif.c:141: SYNCDELAY();
   0218 00                 1216 	 nop 
   0219 00                 1217 	 nop 
   021A 00                 1218 	 nop 
   021B 00                 1219 	 nop 
                           1220 ;	gpif.c:142: GPIFTCB0 = LSB(LSW(tc));
   021C 90 E6 D1           1221 	mov	dptr,#_GPIFTCB0
   021F EA                 1222 	mov	a,r2
   0220 F0                 1223 	movx	@dptr,a
   0221 22                 1224 	ret
                           1225 ;------------------------------------------------------------
                           1226 ;Allocation info for local variables in function 'gpif_set_tc16'
                           1227 ;------------------------------------------------------------
                           1228 ;tc                        Allocated to registers r2 r3 
                           1229 ;------------------------------------------------------------
                           1230 ;	gpif.c:144: void gpif_set_tc16(WORD tc) {
                           1231 ;	-----------------------------------------
                           1232 ;	 function gpif_set_tc16
                           1233 ;	-----------------------------------------
   0222                    1234 _gpif_set_tc16:
   0222 AA 82              1235 	mov	r2,dpl
   0224 AB 83              1236 	mov	r3,dph
                           1237 ;	gpif.c:145: GPIFTCB1= MSB(tc);
   0226 90 E6 D0           1238 	mov	dptr,#_GPIFTCB1
   0229 EB                 1239 	mov	a,r3
   022A F0                 1240 	movx	@dptr,a
                           1241 ;	gpif.c:146: SYNCDELAY();
   022B 00                 1242 	 nop 
   022C 00                 1243 	 nop 
   022D 00                 1244 	 nop 
   022E 00                 1245 	 nop 
                           1246 ;	gpif.c:147: GPIFTCB0= LSB(tc);
   022F 90 E6 D1           1247 	mov	dptr,#_GPIFTCB0
   0232 EA                 1248 	mov	a,r2
   0233 F0                 1249 	movx	@dptr,a
   0234 22                 1250 	ret
                           1251 ;------------------------------------------------------------
                           1252 ;Allocation info for local variables in function 'gpif_single_read16'
                           1253 ;------------------------------------------------------------
                           1254 ;len                       Allocated with name '_gpif_single_read16_PARM_2'
                           1255 ;res                       Allocated with name '_gpif_single_read16_res_1_1'
                           1256 ;c                         Allocated to registers r7 
                           1257 ;sloc0                     Allocated with name '_gpif_single_read16_sloc0_1_0'
                           1258 ;------------------------------------------------------------
                           1259 ;	gpif.c:151: void gpif_single_read16( WORD* res, WORD len ){
                           1260 ;	-----------------------------------------
                           1261 ;	 function gpif_single_read16
                           1262 ;	-----------------------------------------
   0235                    1263 _gpif_single_read16:
   0235 85 82*02           1264 	mov	_gpif_single_read16_res_1_1,dpl
   0238 85 83*03           1265 	mov	(_gpif_single_read16_res_1_1 + 1),dph
   023B 85 F0*04           1266 	mov	(_gpif_single_read16_res_1_1 + 2),b
                           1267 ;	gpif.c:153: while (!(GPIFTRIG & 0x80)); // wait done
   023E                    1268 00101$:
   023E E5 BB              1269 	mov	a,_GPIFTRIG
   0240 30 E7 FB           1270 	jnb	acc.7,00101$
                           1271 ;	gpif.c:155: res[0] = XGPIFSGLDATLX;
   0243 90 E6 F1           1272 	mov	dptr,#_XGPIFSGLDATLX
   0246 E0                 1273 	movx	a,@dptr
   0247 FD                 1274 	mov	r5,a
   0248 7E 00              1275 	mov	r6,#0x00
   024A 85*02 82           1276 	mov	dpl,_gpif_single_read16_res_1_1
   024D 85*03 83           1277 	mov	dph,(_gpif_single_read16_res_1_1 + 1)
   0250 85*04 F0           1278 	mov	b,(_gpif_single_read16_res_1_1 + 2)
   0253 ED                 1279 	mov	a,r5
   0254 12s00r00           1280 	lcall	__gptrput
   0257 A3                 1281 	inc	dptr
   0258 EE                 1282 	mov	a,r6
   0259 12s00r00           1283 	lcall	__gptrput
                           1284 ;	gpif.c:156: for (c=0;c<len;++c) {
   025C E5*00              1285 	mov	a,_gpif_single_read16_PARM_2
   025E 24 FF              1286 	add	a,#0xff
   0260 FD                 1287 	mov	r5,a
   0261 E5*01              1288 	mov	a,(_gpif_single_read16_PARM_2 + 1)
   0263 34 FF              1289 	addc	a,#0xff
   0265 FE                 1290 	mov	r6,a
   0266 7F 00              1291 	mov	r7,#0x00
   0268                    1292 00107$:
   0268 8F 00              1293 	mov	ar0,r7
   026A 79 00              1294 	mov	r1,#0x00
   026C C3                 1295 	clr	c
   026D E8                 1296 	mov	a,r0
   026E 95*00              1297 	subb	a,_gpif_single_read16_PARM_2
   0270 E9                 1298 	mov	a,r1
   0271 95*01              1299 	subb	a,(_gpif_single_read16_PARM_2 + 1)
   0273 50 6C              1300 	jnc	00111$
                           1301 ;	gpif.c:157: while ( !(GPIFTRIG & 0x80) ); // wait done
   0275                    1302 00104$:
   0275 E5 BB              1303 	mov	a,_GPIFTRIG
   0277 30 E7 FB           1304 	jnb	acc.7,00104$
                           1305 ;	gpif.c:159: res[c] = GPIFSGLDATH << 8;
   027A EF                 1306 	mov	a,r7
   027B 75 F0 02           1307 	mov	b,#0x02
   027E A4                 1308 	mul	ab
   027F 25*02              1309 	add	a,_gpif_single_read16_res_1_1
   0281 F8                 1310 	mov	r0,a
   0282 E5*03              1311 	mov	a,(_gpif_single_read16_res_1_1 + 1)
   0284 35 F0              1312 	addc	a,b
   0286 F9                 1313 	mov	r1,a
   0287 AA*04              1314 	mov	r2,(_gpif_single_read16_res_1_1 + 2)
   0289 AC BD              1315 	mov	r4,_GPIFSGLDATH
   028B 7B 00              1316 	mov	r3,#0x00
   028D 88 82              1317 	mov	dpl,r0
   028F 89 83              1318 	mov	dph,r1
   0291 8A F0              1319 	mov	b,r2
   0293 EB                 1320 	mov	a,r3
   0294 12s00r00           1321 	lcall	__gptrput
   0297 A3                 1322 	inc	dptr
   0298 EC                 1323 	mov	a,r4
   0299 12s00r00           1324 	lcall	__gptrput
                           1325 ;	gpif.c:161: res[c] |= c==len-1 ? GPIFSGLDATLNOX : GPIFSGLDATLX ;
   029C 88*05              1326 	mov	_gpif_single_read16_sloc0_1_0,r0
   029E 89*06              1327 	mov	(_gpif_single_read16_sloc0_1_0 + 1),r1
   02A0 8A*07              1328 	mov	(_gpif_single_read16_sloc0_1_0 + 2),r2
   02A2 88 82              1329 	mov	dpl,r0
   02A4 89 83              1330 	mov	dph,r1
   02A6 8A F0              1331 	mov	b,r2
   02A8 12s00r00           1332 	lcall	__gptrget
   02AB FA                 1333 	mov	r2,a
   02AC A3                 1334 	inc	dptr
   02AD 12s00r00           1335 	lcall	__gptrget
   02B0 FB                 1336 	mov	r3,a
   02B1 8F 04              1337 	mov	ar4,r7
   02B3 78 00              1338 	mov	r0,#0x00
   02B5 EC                 1339 	mov	a,r4
   02B6 B5 05 08           1340 	cjne	a,ar5,00113$
   02B9 E8                 1341 	mov	a,r0
   02BA B5 06 04           1342 	cjne	a,ar6,00113$
   02BD AC BF              1343 	mov	r4,_GPIFSGLDATLNOX
   02BF 80 02              1344 	sjmp	00114$
   02C1                    1345 00113$:
   02C1 AC BE              1346 	mov	r4,_GPIFSGLDATLX
   02C3                    1347 00114$:
   02C3 78 00              1348 	mov	r0,#0x00
   02C5 EC                 1349 	mov	a,r4
   02C6 42 02              1350 	orl	ar2,a
   02C8 E8                 1351 	mov	a,r0
   02C9 42 03              1352 	orl	ar3,a
   02CB 85*05 82           1353 	mov	dpl,_gpif_single_read16_sloc0_1_0
   02CE 85*06 83           1354 	mov	dph,(_gpif_single_read16_sloc0_1_0 + 1)
   02D1 85*07 F0           1355 	mov	b,(_gpif_single_read16_sloc0_1_0 + 2)
   02D4 EA                 1356 	mov	a,r2
   02D5 12s00r00           1357 	lcall	__gptrput
   02D8 A3                 1358 	inc	dptr
   02D9 EB                 1359 	mov	a,r3
   02DA 12s00r00           1360 	lcall	__gptrput
                           1361 ;	gpif.c:156: for (c=0;c<len;++c) {
   02DD 0F                 1362 	inc	r7
   02DE 02s02r68           1363 	ljmp	00107$
   02E1                    1364 00111$:
   02E1 22                 1365 	ret
                           1366 ;------------------------------------------------------------
                           1367 ;Allocation info for local variables in function 'gpif_single_write16'
                           1368 ;------------------------------------------------------------
                           1369 ;len                       Allocated with name '_gpif_single_write16_PARM_2'
                           1370 ;dat                       Allocated to registers r2 r3 r4 
                           1371 ;c                         Allocated to registers r5 
                           1372 ;------------------------------------------------------------
                           1373 ;	gpif.c:165: void gpif_single_write16( WORD* dat, WORD len) {
                           1374 ;	-----------------------------------------
                           1375 ;	 function gpif_single_write16
                           1376 ;	-----------------------------------------
   02E2                    1377 _gpif_single_write16:
   02E2 AA 82              1378 	mov	r2,dpl
   02E4 AB 83              1379 	mov	r3,dph
   02E6 AC F0              1380 	mov	r4,b
                           1381 ;	gpif.c:167: for (c=0;c<len;++c) {
   02E8 7D 00              1382 	mov	r5,#0x00
   02EA                    1383 00104$:
   02EA 8D 06              1384 	mov	ar6,r5
   02EC 7F 00              1385 	mov	r7,#0x00
   02EE C3                 1386 	clr	c
   02EF EE                 1387 	mov	a,r6
   02F0 95*00              1388 	subb	a,_gpif_single_write16_PARM_2
   02F2 EF                 1389 	mov	a,r7
   02F3 95*01              1390 	subb	a,(_gpif_single_write16_PARM_2 + 1)
   02F5 50 2E              1391 	jnc	00108$
                           1392 ;	gpif.c:168: while (!(GPIFTRIG & 0x80) );
   02F7                    1393 00101$:
   02F7 E5 BB              1394 	mov	a,_GPIFTRIG
   02F9 30 E7 FB           1395 	jnb	acc.7,00101$
                           1396 ;	gpif.c:169: XGPIFSGLDATH = MSB(dat[c]);
   02FC ED                 1397 	mov	a,r5
   02FD 75 F0 02           1398 	mov	b,#0x02
   0300 A4                 1399 	mul	ab
   0301 2A                 1400 	add	a,r2
   0302 FE                 1401 	mov	r6,a
   0303 EB                 1402 	mov	a,r3
   0304 35 F0              1403 	addc	a,b
   0306 FF                 1404 	mov	r7,a
   0307 8C 00              1405 	mov	ar0,r4
   0309 8E 82              1406 	mov	dpl,r6
   030B 8F 83              1407 	mov	dph,r7
   030D 88 F0              1408 	mov	b,r0
   030F 12s00r00           1409 	lcall	__gptrget
   0312 FE                 1410 	mov	r6,a
   0313 A3                 1411 	inc	dptr
   0314 12s00r00           1412 	lcall	__gptrget
   0317 90 E6 F0           1413 	mov	dptr,#_XGPIFSGLDATH
   031A F0                 1414 	movx	@dptr,a
                           1415 ;	gpif.c:170: XGPIFSGLDATLX = LSB(dat[c]);
   031B 7F 00              1416 	mov	r7,#0x00
   031D 90 E6 F1           1417 	mov	dptr,#_XGPIFSGLDATLX
   0320 EE                 1418 	mov	a,r6
   0321 F0                 1419 	movx	@dptr,a
                           1420 ;	gpif.c:167: for (c=0;c<len;++c) {
   0322 0D                 1421 	inc	r5
   0323 80 C5              1422 	sjmp	00104$
   0325                    1423 00108$:
   0325 22                 1424 	ret
                           1425 ;------------------------------------------------------------
                           1426 ;Allocation info for local variables in function 'gpif_fifo_read'
                           1427 ;------------------------------------------------------------
                           1428 ;ep_num                    Allocated to registers r2 
                           1429 ;------------------------------------------------------------
                           1430 ;	gpif.c:174: void gpif_fifo_read ( GPIF_EP_NUM ep_num ) {
                           1431 ;	-----------------------------------------
                           1432 ;	 function gpif_fifo_read
                           1433 ;	-----------------------------------------
   0326                    1434 _gpif_fifo_read:
   0326 AA 82              1435 	mov	r2,dpl
                           1436 ;	gpif.c:175: while ( !(GPIFTRIG & 0x80 ) ); // wait until things are finished
   0328                    1437 00101$:
   0328 E5 BB              1438 	mov	a,_GPIFTRIG
   032A 30 E7 FB           1439 	jnb	acc.7,00101$
                           1440 ;	gpif.c:176: GPIFTRIG = GPIFTRGRD | ep_num;
   032D 74 04              1441 	mov	a,#0x04
   032F 4A                 1442 	orl	a,r2
   0330 F5 BB              1443 	mov	_GPIFTRIG,a
   0332 22                 1444 	ret
                           1445 ;------------------------------------------------------------
                           1446 ;Allocation info for local variables in function 'gpif_fifo_write'
                           1447 ;------------------------------------------------------------
                           1448 ;ep_num                    Allocated to registers r2 
                           1449 ;------------------------------------------------------------
                           1450 ;	gpif.c:179: void gpif_fifo_write ( GPIF_EP_NUM ep_num ) {
                           1451 ;	-----------------------------------------
                           1452 ;	 function gpif_fifo_write
                           1453 ;	-----------------------------------------
   0333                    1454 _gpif_fifo_write:
   0333 AA 82              1455 	mov	r2,dpl
                           1456 ;	gpif.c:180: while ( !(GPIFTRIG & 0x80) ); // wait until things are finished
   0335                    1457 00101$:
   0335 E5 BB              1458 	mov	a,_GPIFTRIG
   0337 30 E7 FB           1459 	jnb	acc.7,00101$
                           1460 ;	gpif.c:181: GPIFTRIG = ep_num; // R/W=0, E[1:0] = ep_num
   033A 8A BB              1461 	mov	_GPIFTRIG,r2
   033C 22                 1462 	ret
                           1463 	.area CSEG    (CODE)
                           1464 	.area CONST   (CODE)
                           1465 	.area XINIT   (CODE)
                           1466 	.area CABS    (ABS,CODE)
